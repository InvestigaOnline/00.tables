# Visualización gráfica {#tse08}

Los gráficos son hoy en día uno de los elementos más potentes sobre los que descansa la analítica de datos. En muchos casos es el *único* instrumento utilizado para comunicar los resultados de una investigación. nuestra elección para ilustrar esta parte del documento es `highcharter`. Este paquete es un _wrapper_ del software `highcharts` y ha sido desarrollado para ser utilizado en R. `highcharts`es un librería de JavaScript muy conocida y una de las más utilizadas en el desarrollo de páginas web.

En este capítulo vamos a enseñarte como aprovechar toda la potencia visual del os gráficos, utilizando como vehículo de propulsión el paquete `highcharter` desarrollado por [@highcharter]. 

## highcharteR, introducción

El paquete `highcharter` es un contenedor - _wrapper_ - para la biblioteca [Highcharts](https://www.highcharts.com/) que incluye funciones de acceso directo para trazar objetos gráficos de R. Es una biblioteca de gráficos que ofrece numerosos tipos de gráficos con una sintaxis de configuración muy simple y repetitiva. Suponemos que ya estás acostumbrado a trabajar con R, por lo que no te resultará complicado seguir los pasos aquí indicados.

Este documento fundamentalmente se ha dedicado a trabajar con tablas cruzadas, ese elemento que tanta productividad produce y que tan claras deja las visualizaciones; sin embargo la mayoría de librerías de gráficos trabajan con _dataframe_, por lo que deberemos hacer una simplificación de la tabla para trabajar con ella de forma adecuada. No sería necesario, pero como digo te ayudará a ver con otros ojos la simplicidad de `highcharter`. Comenzaremos trabajando con la base de la librería y en el desarrollo del capítulo indicaremos como trabajar con tablas cruzadas.

Lo primero que debemos saber, es que hay unos nombres de campo (por defecto) que pueden existir en el _dataframe_, y cuya presencia facilita enormemente el trabajo con los gráficos. Mira esta tabla de datos. En esta tabla son muy importantes los nombres de los campos, porque su existencia hace que, sin apenas código, el gráfico ya visualiza de acuerdo a nuestra necesidad.

```{r echo=FALSE, message=FALSE, warning=FALSE}
knitr::kable(df)
```

A saber ...

* `x`, que contiene la secuencia de datos
* `y`, que contiene el dato que habitualmente representaremos en el eje de las Y (ordenadas)
* `z`, dimensiona el valor de y cuando se quieren usar tres dimensiones de representación (por ejemplo cuando queremos que en un _scatter_ la burbuja sea tan grande como una tercera variable)
* `low`, valor más bajo para la categoría
* `high`, valor más alto para la categoría
* `value`, valor de la categoría
* `name`, que contiene lo nombres o textos de las categorías; suele ser lo que queremos que aparezca en el eje de las X (abscisas)
* `color`, código del color en hexadecimal que modificará el color por defecto de la serie (puede ser también el nombre del color)
* `from`, importante en gráficos especiales de tipo organización o donde hay una relación "desde"
* `to`, igual al anterior, importante en gráficos especiales de tipo organización o donde hay una relación "hasta"
* `weight`, utilizado en algunos gráficos a los que nos referiremos después.

Debemos saber que `highcharteR`nos permite utilizar dos tipos diferentes de funciones que a continuación explicamos, auqnue nos centramos en la primera de ellas. La segunda es una forma de acortar la primera.

* `highchart()`
* `hchart()`

### highchart()

Esta función crea un gráfico _highchart_ usando un _widget_. El _widget_ creado se puede representar en páginas HTML generadas a partir de _rmarkdown_ y con características de interactividad. Si estás familiarizado con el paquete `ggplot2`, es una función similar a `ggplot()` del paquete donde se define un objeto ggplot base sobre el cual se pueden agregar más capas geométricas. De manera similar, una vez que se define la función `highchart()`, se pueden agregar más elementos _highchart_ encima de ella, como si fueran capas superpuestas.

### hchart()

Por otro lado, hchart () es una función genérica para dibujar diferentes gráficos sobre la marcha. El gráfico resultante es un objeto highchart, por lo que puede seguir modificando con la API implícita. Si estás familiarizado con `ggplot2`, esta función es similar a `qplot()`. Comencemos nuestro viaje de visualización interactiva con los diseño más sencillos.

## Mi primer gráfico

Para trabajar con los gráficos, utilizaremos la siguiente tabla de datos, muy sencilla, propuesta por el autor del paquete, que además contiene los nombres de campo estandarizados que nos van a ayudar a de forma muy sencilla a generar nuestras visualizaciones.


## Gráfico de barras 

Un diagrama de barras (o columnas) muestra la relación entre una variable numérica (y) y una categórica (name). Cada entidad de la variable categórica se representa como una barra. El tamaño de la barra representa su valor numérico. A veces se describe como una forma aburrida de visualizar información. Sin embargo, probablemente sea la forma más eficaz de mostrar este tipo de datos.

Vamos a mostrar las dos formas de hacer este gráfico y entenderás la información que te aportábamos en la descripción anterior de las funciones posibles para hacer un gráfico.

```{r echo=TRUE, warning=FALSE, message=FALSE}
require(highcharter) # solicitamos la carga de highcharter si no lo está ya
df1 <- select(df, name, y, color) # seleccionamos las columnas name e y, por un motivo que más adelante explicamos

highchart() %>% 
    hc_chart(type = 'bar') %>% 
    hc_xAxis(categories = df1$name) %>%
    hc_add_series(df1)
```

¿Por qué hemos seleccionado estos tres campos? Ya hemos hablado de la importancia del nombre de los campos en highcharter. El gráfico de barras que es un estándar, es transformado a un gráfico de barras low-high si se localizan estos nombres de campo, low y high en el dataframe de trabajo, y el dataframe original `df` los tenía. Por tanto si repetimos este gráfico, pero con el dataframe original con esos dos campos, veremos que variación se produce.

```{r echo=TRUE, warning=FALSE, message=FALSE}
highchart() %>% 
    hc_chart(type = 'bar') %>% 
    hc_xAxis(categories = df$name) %>% 
    hc_add_series(df)
```

La barra no se traza completa sino que se traza con origen en el valor más bajo (`low`), y con final en el valor más alto (`high`). Sin embargo si acercas el ratón a una barra, verás que el valor listado se corresponde con el campo `y` del dataframe.

Vamos a realizar unas pequeñas variaciones muy habituales en los gráficos.

### Cambiar el nombre de la serie de datos

La primera modificación sería añadir el nombre de la serie al gráfico ...

```{r echo=TRUE, warning=FALSE, message=FALSE}
highchart() %>% 
    hc_chart(type = 'bar') %>% 
    hc_xAxis(categories = df1$name) %>% 
    hc_add_series(df1, name='Fruits')
```

Podemos observar, como en ángulo inferior derecho de la ventana del gráfico aparece la palabra _fruits_ que hemos escrito como nombre del conjunto de datos, que en realidad es una única serie.

### Añadir créditos al gráfico

Añadir un pie de gráfico con créditos del creador del mismo.

```{r echo=TRUE, warning=FALSE, message=FALSE}
highchart() %>% 
    hc_chart(type = 'bar') %>% 
    hc_xAxis(categories = df1$name) %>% 
    hc_add_series(df1, name='Fruits') %>%
    hc_credits(enabled=TRUE, text='InvestigaOnline.com', href ='https://www.investigaonline.com')
```

Ver ángulo inferior derecho, justo debajo del nombre de la serie. Posibilidad de hacer clic y llegar hasta la URL indicada.

### Añadir el valor del dato al elemento (datalabels)

```{r echo=TRUE, warning=FALSE, message=FALSE}
highchart() %>% 
    hc_chart(type = 'bar') %>% 
    hc_xAxis(categories = df1$name) %>% 
    hc_add_series(df1, name='Fruits', dataLabels=list(enabled=TRUE)) %>%
    hc_credits(enabled=TRUE, text='InvestigaOnline.com', href ='https://www.investigaonline.com')
```

### Guardar y exportar el gráfico

En ocasiones es necesario dar la oportunidad al usuario del gráfico de poder guardarlo como imagen o guardarlo como tabla de EXCEL o fichero de texto separado por ',' (CSV).

```{r echo=TRUE, warning=FALSE, message=FALSE}
highchart() %>% 
    hc_chart(type = 'bar') %>% 
    hc_xAxis(categories = df1$name) %>% 
    hc_add_series(df1, name='Fruits', dataLabels=list(enabled=TRUE)) %>%
    hc_credits(enabled=TRUE, text='InvestigaOnline.com', href ='https://www.investigaonline.com') %>%
    hc_exporting(enabled=TRUE)
```

### API de Highcharts, toda la potencia de los gráficos

La pregunta que ahora nos deberíamos estar haciendo es... ¿como puedo yo saber que debo usar `hc_credits()`, o `hc_exporting()` o `dataLabels(list=())`?

Para eso tenemos lo que se llama la API de la librería de gráficos. Ahora entenderemos mejor el apartado de presentación cuando decíamos que `highcharter`es un _wrapper_ de la librería `Highcharts`. Si visitamos el sitio web de la [api de highcharts](https://api.highcharts.com) podemos ver que todas las opciones que se pueden usar en los gráficos están documentadas. Si a ello añadimos el [sitio demo](https://highcharts.com/demo) de esta marca podemos ver todo lo que se puede hacer. Te recomiendo la lectura del [post de Danton Noriega](https://dantonnoriega.github.io/ultinomics.org/posts/2017-04-05-highcharter-explainer.html) acerca de como usar la API para saber construir nuestros gráficos en de highchart en R, en especial la parte en la que refiere a este punto que estamos hablando (Highcharts API and highcharter functions). Tras la lectura de ese post te darás cuenta de que en tus manos de analista de datos, tienes un auténtico cañón de magníficas visualizaciones. Pero vayamos poco a poco y continuemos con nuestros ejemplos de gráficos.

## Gráfico de columna

Es un gráfico idéntico al anterior, pero con la barra vertical en lugar de horizontal. Mantenemos la última vista básica con los elementos añadidos de exportación, créditos y mostrado de valores de aquí en adelante.

```{r echo=TRUE, warning=FALSE, message=FALSE}
highchart() %>% 
    hc_chart(type = 'column') %>% 
    hc_xAxis(categories = df1$name) %>% 
    hc_add_series(df1, name='Fruits', dataLabels=list(enabled=TRUE)) %>%
    hc_credits(enabled=TRUE, text='InvestigaOnline.com', href ='https://www.investigaonline.com') %>%
    hc_exporting(enabled=TRUE)
```

Obsérvese que en el gráfico lo único que hemos hecho ha sido modificar el tipo de gráfico de `bar`a `column`. Añadamos ahora perspectiva al gráfico, incluyendo la lista de opciones de 3D.

```{r echo=TRUE, warning=FALSE, message=FALSE}
highchart() %>% 
    hc_chart(type = 'column', options3d = list(enabled = TRUE, beta = 45, alpha = 15)) %>% 
    hc_xAxis(categories = df1$name) %>% 
    hc_add_series(df1, name='Fruits', dataLabels=list(enabled=TRUE)) %>%
    hc_credits(enabled=TRUE, text='InvestigaOnline.com', href ='https://www.investigaonline.com') %>%
    hc_exporting(enabled=TRUE)
```
### Variación de columna a pirámide

Y si lo presentamos en forma de pirámide ...

```{r echo=TRUE, warning=FALSE, message=FALSE}
highchart() %>% 
    hc_chart(type = 'columnpyramid') %>% 
    hc_xAxis(categories = df1$name) %>% 
    hc_add_series(df1, name='Fruits',showInLegend = FALSE, dataLabels = list(enabled=TRUE)) %>%
    hc_credits(enabled=TRUE, text='InvestigaOnline.com', href ='https://www.investigaonline.com') %>%
    hc_exporting(enabled=TRUE)
```
### Variación de columna a _lollipop_

Y si lo presentamos en forma de _lollipop_, debemos variar al dataframe al completo, porque este gráfico muy parecido a la variación de rango, requiere del _low-high_.

```{r echo=TRUE, warning=FALSE, message=FALSE}
highchart() %>% 
    hc_chart(type = 'dumbbell') %>% 
    hc_xAxis(categories = df$name) %>% 
    hc_add_series(df, name='Fruits',showInLegend = FALSE, dataLabels = list(enabled=TRUE)) %>%
    hc_credits(enabled=TRUE, text='InvestigaOnline.com', href ='https://www.investigaonline.com') %>%
    hc_exporting(enabled=TRUE)
```

```{r echo=TRUE, warning=FALSE, message=FALSE}
highchart() %>% 
    hc_chart(type = 'dumbbell', inverted=TRUE) %>% 
    hc_xAxis(categories = df$name) %>% 
    hc_add_series(df, name='Fruits',showInLegend = FALSE, dataLabels = list(enabled=TRUE)) %>%
    hc_credits(enabled=TRUE, text='InvestigaOnline.com', href ='https://www.investigaonline.com') %>%
    hc_exporting(enabled=TRUE)
```

### Gráficos polares

Existe otra forma de visualizar el gráfico que nos va a gustar mucho, porque se ve en pocas ocasiones.


```{r echo=TRUE, warning=FALSE, message=FALSE}
highchart() %>% 
    hc_chart(type = 'bar', polar=TRUE) %>% 
    hc_xAxis(categories = df1$name) %>% 
    hc_add_series(df1, name='Fruits', dataLabels=list(enabled=TRUE)) %>%
    hc_credits(enabled=TRUE, text='InvestigaOnline.com', href ='https://www.investigaonline.com') %>%
    hc_exporting(enabled=TRUE)
```

Nótese que se ha añadido el modificador `polar=TRUE` Una buena vista, espectacular pero poco efectiva. Desde el propio script, sin embargo se puede añadir una mínima opción que mejoraría esta salida.

```{r echo=TRUE, warning=FALSE, message=FALSE}
highchart() %>% 
    hc_chart(type = 'bar', polar=TRUE) %>% 
    hc_xAxis(categories = df1$name) %>% 
    hc_add_series(df1, name='Fruits', dataLabels=list(enabled=TRUE)) %>%
    hc_credits(enabled=TRUE, text='InvestigaOnline.com', href ='https://www.investigaonline.com') %>%
    hc_exporting(enabled=TRUE) %>%
    hc_pane(endAngle=270)
```

Esta nueva función `hc_pane()` hace que el círculo termine en el ángulo 270 (de 360), de forma que las etiquetas se leen mejor. Pero no es una visualización fácil, visualmente atractiva, pero difícil de leer e intepretar.

## Diagramas de secciones

### Tarta / _pie chart_

Si hay algún gráfico tan o más famoso que el de barras o el de columnas, ese es el gráfico de tarta.

```{r}
df$sliced <- c(0,1,0,0,1,0) #añadimos el campo sliced
highchart() %>%
    hc_title(text = 'Fruits pie') %>% 
    hc_subtitle(text = 'My favourite fruits') %>% 
    hc_chart(type = 'pie', polar = FALSE, inverted = FALSE) %>% 
    hc_xAxis(categories = df$name) %>%
    hc_add_series(df,name = "Fruits", showInLegend = TRUE)
df <- select(df, -sliced) #eliminamos el campo sliced
```

Además de haberle añadido un título y un subtítulo este gráfico presenta un nuevo elemento fundamental: el modificador `showInLegend=TRUE` que nos permite mostrar una leyenda con las diferentes frutas y sus colores. Además, en el script hemos comenzado por añadir un nuevo campo a la tabla df, denominado `sliced`que ya puedes ver su efecto, separa del centro (desgaja) una sección de la tarta. En este caso ha sucedido para la fruta en segundo lugar (nut) y para la que está en quinto lugar (fig).

### Anillo / _doughnut_

Y si queremos convertir este gráfico en un anillo o *doughnut* utilizaremos el modificador `innerSize='75%'` en la función `hc_add_series()`. Este modificador traza un círculo desde el baricentro del diagrama hasta el porcentaje indicado dejando espacio central en blanco. El gráfico puede tomar diferente aspecto según ese porcentaje indicado.

```{r}
highchart() %>%
    hc_title(text = 'Fruits pie') %>% 
    hc_subtitle(text = 'My favourite fruits') %>% 
    hc_chart(type = 'pie', polar = FALSE, inverted = FALSE) %>% 
    hc_xAxis(categories = df$name) %>%
    hc_add_series(df,name = "Fruits", showInLegend = TRUE, innerSize='75%' )
```

o también, cambiando el radio inferior de vaciado ...

```{r}
highchart() %>%
    hc_title(text = 'Fruits pie') %>% 
    hc_subtitle(text = 'My favourite fruits') %>% 
    hc_chart(type = 'pie', polar = FALSE, inverted = FALSE) %>%  
    hc_xAxis(categories = df$name) %>%
    hc_add_series(df,name = "Fruits", showInLegend = TRUE, innerSize='33%')
```

### _Funnel_

Una variante para gráficos de un único campo es el _funnel_.

```{r echo=FALSE, message=FALSE, warning=FALSE}
highchart() %>%
    hc_chart(type = 'funnel', polar = FALSE, inverted = FALSE) %>% 
    hc_xAxis(categories = df$name) %>% 
    hc_yAxis(visible = TRUE) %>% 
    hc_tooltip(outside = TRUE, enabled=TRUE) %>% 
    hc_add_series(df,name = "Frutas",showInLegend = FALSE, dataLabels = list(enabled=TRUE), colorByPoint=TRUE)
```

### Pirámide

Una nueva variante para un gráfico de una sola variable. el tipo _pyramid_.

```{r echo=FALSE, message=FALSE, warning=FALSE}
highchart() %>%
    hc_chart(type = 'pyramid', polar = FALSE, inverted = FALSE) %>% 
    hc_xAxis(categories = df$name) %>% 
    hc_yAxis(visible = TRUE) %>% 
    hc_tooltip(outside = TRUE, enabled=TRUE) %>% 
    hc_add_series(df,name = "Frutas",showInLegend = FALSE, dataLabels = list(enabled=TRUE), colorByPoint=TRUE)
```

## Gráfico de línea

Un nuevo pero tradicional modelo, el gráfico de línea. Vamos a aprovechar para no ser demasiado repetitivos para añadir una nueva serie de valores; recordemos la tabla de datos inicial.

```{r echo=FALSE, message=FALSE, warning=FALSE}
knitr::kable(df)
```
Vamos a utilizar z, como si fuera una nueva serie de valores. Es decir como si quisiéramos representar en el diagrama dos conjuntos de valores. Primero lo mostramos como hasta ahora, con una sola serie...

```{r echo=TRUE, warning=FALSE, message=FALSE}
df1 <- select(df, name, y, z, color) # seleccionamos las columnas name, y y z
highchart() %>% 
    hc_chart(type = 'line') %>% 
    hc_xAxis(categories = df1$name) %>% 
    hc_add_series(df1, name='Fruits', dataLabels=list(enabled=TRUE)) %>%
    hc_credits(enabled=TRUE, text='InvestigaOnline.com', href ='https://www.investigaonline.com') %>%
    hc_exporting(enabled=TRUE)
```

Para ahora añadir la nueva serie. Nótese la variación en el modificador `hc_add_series()`donde ahora hay dos líneas, como si de dos capas se tratara.

```{r echo=TRUE, warning=FALSE, message=FALSE}
highchart() %>% 
    hc_chart(type = 'line') %>% 
    hc_xAxis(categories = df1$name) %>% 
    hc_add_series(df1, name='Fruits - serie 1', dataLabels=list(enabled=TRUE)) %>%
    hc_add_series(df1$z, name='Fruits - serie 2', dataLabels=list(enabled=TRUE)) %>%
    hc_credits(enabled=TRUE, text='InvestigaOnline.com', href ='https://www.investigaonline.com') %>%
    hc_exporting(enabled=TRUE)
```

Quisiera hacer notar que simplemente hemos añadido una nueva serie que se contiene en la columna denominada z de df1 (df1$z) y no hemos modificado la anterior serie que por defecto era el campo `y`. Creo que sería mucho más limpio y ordenado el escribir este mismo gráfico así.

```{r echo=TRUE, warning=FALSE, message=FALSE}
highchart() %>% 
    hc_chart(type = 'line') %>% 
    hc_xAxis(categories = df1$name) %>% 
    hc_add_series(df1$y, name='Fruits - serie 1', dataLabels=list(enabled=TRUE)) %>%
    hc_add_series(df1$z, name='Fruits - serie 2', dataLabels=list(enabled=TRUE)) %>%
    hc_credits(enabled=TRUE, text='InvestigaOnline.com', href ='https://www.investigaonline.com') %>%
    hc_exporting(enabled=TRUE)
```

De este modo, identificamos que es cada una de las series `y`y `z`, obteniendo idéntico resultado pero quedando más clara la sintaxis de cada una de las series introducidas.

#### Suavizado de la línea

En muchas ocasiones es interesante suavizar la línea. Para ello `highcharts` tiene un modificador del tipo de gráfico denominado `spline`.

```{r echo=TRUE, warning=FALSE, message=FALSE}
highchart() %>% 
    hc_chart(type = 'spline') %>% 
    hc_xAxis(categories = df1$name) %>% 
    hc_add_series(df1$y, name='Fruits - serie 1', dataLabels=list(enabled=TRUE)) %>%
    hc_add_series(df1$z, name='Fruits - serie 2', dataLabels=list(enabled=TRUE)) %>%
    hc_credits(enabled=TRUE, text='InvestigaOnline.com', href ='https://www.investigaonline.com') %>%
    hc_exporting(enabled=TRUE)
```

Nótese el suavizado de la curva. 

Y ha llegado un momento de hacer algo no habitual, pero que sí puede darte ideas de futuro.

```{r echo=TRUE, warning=FALSE, message=FALSE}
highchart() %>% 
    hc_chart(type = 'line') %>% 
    hc_xAxis(categories = df1$name) %>% 
    hc_add_series(df1$y, name='Fruits - serie 1', dataLabels=list(enabled=TRUE)) %>%
    hc_add_series(df1$z, type='column', name='Fruits - serie 2', dataLabels=list(enabled=TRUE)) %>%
    hc_credits(enabled=TRUE, text='InvestigaOnline.com', href ='https://www.investigaonline.com') %>%
    hc_exporting(enabled=TRUE)
```

Vaya sorpresón y qué sencillo, ¿verdad? Hemos combinado línea con columna (no todas las combinaciones son posibles). Además como `z` tenía valores negativos, las barras negativas se muestran muy claramente. ¿Y si polarizamos este gráfico?


```{r echo=TRUE, warning=FALSE, message=FALSE}
highchart() %>% 
    hc_chart(type = 'line', polar=TRUE) %>% 
    hc_xAxis(categories = df1$name) %>% 
    hc_add_series(df1$y, name='Fruits - serie 1', dataLabels=list(enabled=TRUE)) %>%
    hc_add_series(df1$z, type='column', name='Fruits - serie 2', dataLabels=list(enabled=TRUE)) %>%
    hc_credits(enabled=TRUE, text='InvestigaOnline.com', href ='https://www.investigaonline.com') %>%
    hc_exporting(enabled=TRUE)
```

¡Nada mal! aunque es posible que no combinando el tipo de representación en las series, la visualización sea más clara, en lo que se denomina gráfico *spider* que es muy utilizado para las baterías o tablas de ítems en nuestras encuestas. Y ya puestos, añadimos un toque de color a nuestro gráfico. Analiza tú mismo los modificadores que cambian.

```{r echo=TRUE, warning=FALSE, message=FALSE}
highchart() %>% 
    hc_chart(type = 'line', polar=TRUE, backgroundColor='#E2E2E2') %>%
    hc_xAxis(categories = df1$name) %>% 
    hc_add_series(df1$y, name='Fruits - serie 1', dataLabels=list(enabled=TRUE), color='#eb6909') %>%
    hc_add_series(df1$z, name='Fruits - serie 2', dataLabels=list(enabled=TRUE), color='teal') %>%
    hc_credits(enabled=TRUE, text='InvestigaOnline.com', href ='https://www.investigaonline.com') %>%
    hc_exporting(enabled=TRUE)
```

## Gráficos de columnas / barras con apilamiento

Volvamos la vista un poco atrás, y ahora que tenemos dos series, vamos a jugar un poco más el gráfico o más específicamente
con las columnas (o barras). Vamos a realizar los apilamientos (no se pueden hacer lógicamente con los gráficos de tarta).

Recuperamos nuestro gráfico de columnas, pero lo hacemos ahora con las dos series, pero ahora, para que los dos valores (y,z) sean positivos, vamos a trabajar con el campo denominado `y`y el campo denominado `value`.

```{r echo=TRUE, warning=FALSE, message=FALSE}
df1 <- select(df, name, y, z, value, color) # seleccionamos las columnas name, y y value
highchart() %>% 
    hc_chart(type = 'column') %>% 
    hc_xAxis(categories = df1$name) %>% 
    hc_add_series(df1$y, name='Año 1900', dataLabels=list(enabled=TRUE), color='#EB6909') %>%
    hc_add_series(df1$value, name='Año 2000', dataLabels=list(enabled=TRUE), color='#C2C2C2') %>%
    hc_credits(enabled=TRUE, text='InvestigaOnline.com', href ='https://www.investigaonline.com') %>%
    hc_exporting(enabled=TRUE)
```

Nótese que hemos añadido una novedad y es la asignación a la serie del color que nos gusta para ella, mediente el modificador `color` en la opción `hc_add_series()`. Procedamos con el apilamiento.

```{r echo=TRUE, warning=FALSE, message=FALSE}
highchart() %>% 
    hc_chart(type = 'column') %>% 
    hc_xAxis(categories = df1$name) %>% 
    hc_add_series(df1$y, name='Año 1900', dataLabels=list(enabled=TRUE), color='#EB6909', stacking='normal') %>% 
    hc_add_series(df1$value, name='Año 2000', dataLabels=list(enabled=TRUE), color='#C2C2C2', stacking='normal') %>%
    hc_credits(enabled=TRUE, text='InvestigaOnline.com', href ='https://www.investigaonline.com') %>%
    hc_exporting(enabled=TRUE)
```

Nótese que en ambas series, se ha introducido el modificador `stacking='normal'`que ocasiona ese ajuste en las series. Podemos combinar series con apilamiento y series sin apilamiento (agrupaciones de categorías para verlas conjuntamente).

```{r echo=TRUE, warning=FALSE, message=FALSE}
highchart() %>% 
    hc_chart(type = 'column') %>% 
    hc_xAxis(categories = df1$name) %>% 
    hc_add_series(df1$y, name='Año 1900', dataLabels=list(enabled=TRUE), color='#EB6909', stacking='normal') %>% 
    hc_add_series(df1$value, name='Año 2000', dataLabels=list(enabled=TRUE), color='#C2C2C2', stacking='normal') %>%
    hc_add_series(df1$z, name='Año 2020', dataLabels=list(enabled=TRUE), color='#020202') %>%
    hc_credits(enabled=TRUE, text='InvestigaOnline.com', href ='https://www.investigaonline.com') %>%
    hc_exporting(enabled=TRUE)
```

Y por último, el apilamiento puede ser `normal` o puede ser `percent` donde la representación (que no el valor mostrado) se calcula en base 100. Nótese que todas las columnas son igual de altas y nótese que nuevamente `z` se mantiene sin apilamiento.

```{r echo=TRUE, warning=FALSE, message=FALSE}
highchart() %>% 
    hc_chart(type = 'column') %>% 
    hc_xAxis(categories = df1$name) %>% 
    hc_add_series(df1$y, name='Año 1900', dataLabels=list(enabled=TRUE), color='#EB6909', stacking='percent') %>% 
    hc_add_series(df1$value, name='Año 2000', dataLabels=list(enabled=TRUE), color='#C2C2C2', stacking='percent') %>%
    hc_add_series(df1$z, name='Año 2020', dataLabels=list(enabled=TRUE), color='#020202') %>%
    hc_credits(enabled=TRUE, text='InvestigaOnline.com', href ='https://www.investigaonline.com') %>%
    hc_exporting(enabled=TRUE)
```

Por último, apilemos todas ...

```{r echo=TRUE, warning=FALSE, message=FALSE}
highchart() %>% 
    hc_chart(type = 'column') %>% 
    hc_xAxis(categories = df1$name) %>% 
    hc_add_series(df1$y, name='Año 1900', dataLabels=list(enabled=TRUE), color='#EB6909', stacking='percent') %>% 
    hc_add_series(df1$value, name='Año 2000', dataLabels=list(enabled=TRUE), color='#C2C2C2', stacking='percent') %>%
    hc_add_series(df1$z, name='Año 2020', dataLabels=list(enabled=TRUE), color='#020202', stacking='percent') %>%
    hc_credits(enabled=TRUE, text='InvestigaOnline.com', href ='https://www.investigaonline.com') %>%
    hc_exporting(enabled=TRUE)
```

Y pongamos el gráfico en estilo `polar`.

```{r echo=TRUE, warning=FALSE, message=FALSE}
highchart() %>% 
    hc_chart(type = 'column', polar='TRUE') %>% 
    hc_xAxis(categories = df1$name) %>% 
    hc_add_series(df1$y, name='Año 1900', dataLabels=list(enabled=TRUE), color='#EB6909', stacking='percent') %>% 
    hc_add_series(df1$value, name='Año 2000', dataLabels=list(enabled=TRUE), color='#C2C2C2', stacking='percent') %>%
    hc_add_series(df1$z, name='Año 2020', dataLabels=list(enabled=TRUE), color='#020202', stacking='percent') %>%
    hc_credits(enabled=TRUE, text='InvestigaOnline.com', href ='https://www.investigaonline.com') %>%
    hc_exporting(enabled=TRUE)
```

## Gráfico de área

Volvamos a nuestras dos series (`y`, `value`) para presentar ahora una nueva visualización, el gráfico de `área`. Esta es una variación del gráfico de línea donde se dibujan éstas pero con la superficie bajo las líneas con el color indicado, mostrándose de esta forma.

```{r echo=TRUE, warning=FALSE, message=FALSE}
highchart() %>% 
    hc_chart(type = 'area') %>% 
    hc_xAxis(categories = df1$name) %>% 
    hc_add_series(df1$y, name='Año 1900', dataLabels=list(enabled=TRUE), color='#EB6909') %>% 
    hc_add_series(df1$value, name='Año 2000', dataLabels=list(enabled=TRUE), color='#C2C2C2') %>%
    hc_credits(enabled=TRUE, text='InvestigaOnline.com', href ='https://www.investigaonline.com') %>%
    hc_exporting(enabled=TRUE)
```

Nótese la superposición de una y otra. Normalmente ese gráfico se usa para representar mediciones en las que una siempre está por encima de la otra (como aquí sucede), pero siempre pensando que las áreas de intersección van a combinar el color.

Podemos también apilar los valores directos.

```{r echo=TRUE, warning=FALSE, message=FALSE}
highchart() %>% 
    hc_chart(type = 'area') %>% 
    hc_xAxis(categories = df1$name) %>% 
    hc_add_series(df1$y, name='Año 1900', dataLabels=list(enabled=TRUE), color='#EB6909', stacking='normal') %>% 
    hc_add_series(df1$value, name='Año 2000', dataLabels=list(enabled=TRUE), color='#C2C2C2', stacking='normal') %>%
    hc_credits(enabled=TRUE, text='InvestigaOnline.com', href ='https://www.investigaonline.com') %>%
    hc_exporting(enabled=TRUE)
```

O mostrar las áreas con base 100.

```{r echo=TRUE, warning=FALSE, message=FALSE}
highchart() %>% 
    hc_chart(type = 'area') %>% 
    hc_xAxis(categories = df1$name) %>% 
    hc_add_series(df1$y, name='Año 1900', dataLabels=list(enabled=TRUE), color='#EB6909', stacking='percent') %>% 
    hc_add_series(df1$value, name='Año 2000', dataLabels=list(enabled=TRUE), color='#C2C2C2', stacking='percent') %>%
    hc_credits(enabled=TRUE, text='InvestigaOnline.com', href ='https://www.investigaonline.com') %>%
    hc_exporting(enabled=TRUE)
```

## Gráfico de puntos / _scatterplot_

Variación de los anteriores vamos a presentar sus dos versiones. La versión llamemos natural sería representar los puntos (igual que en el gráfico de línea) pero sin dibujar el trazo que los une. 

```{r echo=TRUE, warning=FALSE, message=FALSE}
highchart() %>% 
    hc_chart(type = 'scatter') %>% 
    hc_xAxis(categories = df1$name) %>% 
    hc_add_series(df1$y, name='Año 1900', dataLabels=list(enabled=TRUE)) %>% 
    hc_add_series(df1$value, name='Año 2000', dataLabels=list(enabled=TRUE)) %>%
    hc_credits(enabled=TRUE, text='InvestigaOnline.com', href ='https://www.investigaonline.com') %>%
    hc_exporting(enabled=TRUE)
```

Sin embargo, cuando uno piensa en un scatterplot, lo que piensa es en un diagrama de dispersión o mapa cartesiano donde se presentan los puntos con sus coordenadas en `x` y también en `y`. Un diagrama de dispersión muestra la relación entre 2 variables numéricas. Para cada punto de datos, el valor de su primera variable se representa en el eje X, el segundo en el eje Y. Como no disponemos datos para un buen scatterplot, vamos a construirnos un banco de datos (aleatorio) y trabajamos con él.

```{r echo=TRUE, warning=FALSE, message=FALSE}
#==================== construcción del dataframe
set.seed(311265) # para que la aleatoriedad sea siempre la misma, fijamos su semilla de aleatorización
dfextra <- data.frame(mat=sample(1:100, 400, replace=TRUE), # un valor de un campo X, por ejemplo puntuación en habilidad en matemáticas
                      bio=sample(1:100, 400, replace=TRUE), # un valor de un campo y, por ejemplo puntuación en habilidad en biología
                      glob=sample(50:100, 400, replace=TRUE), # un valor z de peso global de adecuación al puesto
                      grp=sample(1:3, 400, replace=TRUE) # grupo de pertenencia (tres grupos, 1, 2 y 3)
                      ) 
#================== mostramos extracto del data frame
knitr::kable(head(dfextra)) # mostramos breve extracto de la tabla creada
```

Y vamos con el gráfico ...

```{r echo=TRUE, warning=FALSE, message=FALSE}
hchart(dfextra, 'scatter', hcaes(x=mat, y=bio, group=grp))
```

Puedes observar que para este tipo de gráfico hemos optado por la forma acotada; esto es debido a que la forma de ofrecerle los datos es más simple, sin embargo podemos seguir añadiendo elementos al mismo del mismo modo que lo hacíamos con el uso de la función `highchart()`. La agrupación por colores es debida al modificador de grupo `group=grp`en la función `hcaes()`. Si no lo ponemos, simplemente el color sería único.

```{r echo=TRUE, warning=FALSE, message=FALSE}
hchart(dfextra, 'scatter', hcaes(x=mat, y=bio)) %>% 
    hc_credits(enabled=TRUE, text='InvestigaOnline.com', href ='https://www.investigaonline.com') %>%
    hc_exporting(enabled=TRUE)

```

Una última variación al scatterplot sería convertirlo en un *bubble scatterplot*. Un diagrama de burbujas es un diagrama de dispersión donde se agrega una tercera dimensión: el valor de una variable numérica adicional se representa mediante el tamaño de los puntos. Necesita 3 variables numéricas como entrada: una está representada por el eje X, una por el eje Y y otra por el tamaño del punto. Más vale un imagen que mil palabras.

```{r echo=TRUE, warning=FALSE, message=FALSE}
hchart(dfextra, 'scatter', hcaes(x=mat, y=bio, z=glob, group = grp)) %>% 
    hc_credits(enabled=TRUE, text='InvestigaOnline.com', href ='https://www.investigaonline.com') %>%
    hc_exporting(enabled=TRUE)
```

## Histograma o gráfico de densidad

También en este caso vamos a recurrir a la forma simple. Un histograma solo toma como entrada una variable numérica. La variable se divide en varios cortes y el número de observaciones por corte se representa mediante la altura de la barra. Es posible representar la distribución de varias variables en el mismo eje utilizando esta técnica. Sigamos utilizando nuestro nuevo dataframe `dfextra`.

```{r echo=TRUE, warning=FALSE, message=FALSE}
hchart(dfextra$mat, color='teal', name='Matemáticas') %>% 
    hc_credits(enabled=TRUE, text='InvestigaOnline.com', href ='https://www.investigaonline.com') %>%
    hc_exporting(enabled=TRUE)
```

Este gráfico puede fácilmente reconvertirse a la función de densidad. Una gráfica de densidad muestra la distribución de una variable numérica. Solo toma variables numéricas como entrada y está muy cerca de un histograma. Puede usarse exactamente en las mismas condiciones.

```{r echo=TRUE, warning=FALSE, message=FALSE}
hchart(density(dfextra$mat), color='teal', name='Matemáticas') %>% 
    hc_credits(enabled=TRUE, text='InvestigaOnline.com', href ='https://www.investigaonline.com') %>%
    hc_exporting(enabled=TRUE)
```

## Gráficos indicadores

Estos gráfico están caracterizados en su mayor parte por presentar un único valor numérico en una imagen muy simplificada. Su mayor exponente es el denominado `gauge` que estamos acostumbrados a ver en multitud de páginas web de tipo _dashboard_. Se caracterizan por tener datos que se proporcionan de forma externa al dataframe de donde se representa la información. Veamos algunos ejemplos.

### Gauge

Un gráfico de indicador (o gráfico de velocímetro) combina un gráfico de anillo y un gráfico circular en un solo gráfico. Muestra el valor deseado al que se le presupone un valor mínimo y un máximo. Es muy típico para representar por ejmplo el NPS y presentarlo con secciones tipo semáforo. En nuestro script y con afán de ir probando nuevas cosas, crearemos primero lo que se denominan las secciones del semáforo (3 o n) y luego haremos el gráfico. Representemos el campo `value` de nuestras frutas, comenzando por la oliva (fila 3) . Presentamos el script de forma más extendida para ir apreciando y comentando alguno de sus detalles

```{r echo=TRUE, warning=FALSE, message=FALSE}
col_stops <-
  data.frame(
    q = c(0.25, 0.50, 0.75), # se establecen las secciones de valor en término porcentual
    c = c('#CD5C5C', '#F0E68C', '#3CB371'), # se establecen los colores que tomará cada sección
    stringsAsFactors = FALSE
  )
stops <- list_parse2(col_stops) # se crea una lista con este dataframe que hemos creado, pues highcharts lo necesita así.

highchart() %>%
  hc_chart(type = "solidgauge") %>%
  hc_pane(
    startAngle = -90, # determina el ángulo donde comienza
    endAngle = 90, # determina el ángulo donde acaba
    background = list(
      outerRadius = '100%', # "vaciamos" el hueco del círculo que hemos dibujado
      innerRadius = '60%', # "vaciamos" el hueco del círculo que hemos dibujado
      shape = "arc" 
    )
  ) %>%
  hc_tooltip(enabled = FALSE) %>%
  hc_yAxis(
    stops = stops, # le aplicamos la lista de secciones colo (semáforo)
    lineWidth = 0,
    minorTickWidth = 0,
    tickAmount = 2,
    min = 0,
    max = 100,
    labels = list(y = 25) # baja las etiquetas 0 y 100 de límites para que no sitúen sobre el gráfico
  ) %>%
  hc_add_series(
    data = df$high[3],  # le indicamos que capturamos el valor desde dataframe 'df', del campo 'high', y la fila '3'
    dataLabels = list(
      borderWidth = 0,
      useHTML = TRUE,
      style = list(fontSize = "60px")
    )
  ) %>%
  hc_credits(enabled=TRUE, text='InvestigaOnline.com', href ='https://www.investigaonline.com') %>%
  hc_exporting(enabled=TRUE)
``` 

Prueba si lo deseas a ir cambiando el valor de `df$high[3]`  a cualquier valor entre 0 y 10 y observarás el cambio de color.

```{r echo=TRUE, warning=FALSE, message=FALSE}
col_stops <-data.frame(q = c(0.25, 0.50, 0.75),c = c('#CD5C5C', '#F0E68C', '#3CB371'),stringsAsFactors = FALSE)
stops <- list_parse2(col_stops)
highchart() %>%
  hc_chart(type = "solidgauge") %>%
  hc_pane(startAngle = -90,endAngle = 90,background = list(outerRadius = '100%',innerRadius = '60%',shape = "arc" )) %>%
  hc_tooltip(enabled = FALSE) %>%
  hc_yAxis(stops = stops,lineWidth = 0,minorTickWidth = 0,tickAmount = 2,min = 0,max = 100,labels = list(y = 25)) %>%
  hc_add_series(data = 65,dataLabels = list(borderWidth = 0,useHTML = TRUE,style = list(fontSize = "60px"))) %>%
  hc_credits(enabled=TRUE, text='InvestigaOnline.com', href ='https://www.investigaonline.com') %>%
  hc_exporting(enabled=TRUE)
``` 

### Bullet

Otra forma de representar valores unitario pero que tienen un objetivo definido y que pueden haber superado ese objetivo es el gráfico denominado bullet. vamos a imaginar que en nuestro dataframe, `y` es el valor alcanzado, y `value`es el objetivo.

```{r echo=TRUE, warning=FALSE, message=FALSE}
bandas <- list(list(from = 0, to = 10, color = "#ddd"),list(from = 10, to = 20, color = "#bbb"),list(from = 20, to = 25, color ="#888"))
hchart(df1, "bullet", hcaes(x = name, y = y, target = value), color = "teal", targetOptions=list(color='black')) %>%
  hc_chart(inverted = TRUE) %>%
  hc_yAxis(min = 0,max = 25, gridLineWidth = 0, plotBands = bandas) %>%
  hc_xAxis(gridLineWidth = 15, gridLineColor = "white") %>% 
  hc_plotOptions(series = list(pointPadding = 0.25, pointWidth = 15, borderWidth = 0, targetOptions = list(width = '200%'))) %>% 
  hc_size(height = 300)%>%
  hc_credits(enabled=TRUE, text='InvestigaOnline.com', href ='https://www.investigaonline.com') %>%
  hc_exporting(enabled=TRUE)
```

Nótese que en el gráfico la barra vertical perpendicular a cada barra horizontal, que es el `target` se toma de los propios datos. Es un gráfico que también se ve mucho en los _dashboard_, al igual que el anterior.

## Gráfico / _boxplot_

No lo hemos olvidado, el gráfico más típico en estadística junto con los histogramas, el denominado _boxplot_ o diagrama de caja o diagrama de Box-Whiskers. Un diagrama de caja ofrece un buen resumen de una o varias variables numéricas. La línea que divide el cuadro en 2 partes representa la mediana de los datos. El final del cuadro muestra los cuartiles superior e inferior. Las líneas extremas muestran el valor más alto y más bajo excluyendo los valores atípicos. Nótese que es usada una función de tranformación de los datos del campo `value`para obtener los valores adecuados para el gráfico. Del mismo modo, nótese que la función de adición de las series, se ve mínimamente modificada ya que va a recibir una lista de valores por cada campos de trabajo. Usamos `hc_add_series_list()`.


```{r echo=TRUE, warning=FALSE, message=FALSE}
dfboxplot1 <- data_to_boxplot(df, value, add_outliers=TRUE, name= 'value', color = 'teal')

highchart() %>%
  hc_chart(type='boxplot') %>% 
  hc_add_series_list(dfboxplot1) %>%
  hc_credits(enabled=TRUE, text='InvestigaOnline.com', href ='https://www.investigaonline.com') %>%
  hc_exporting(enabled=TRUE)
```

Añadir más series sólo implica repetir el proceso, lo que permite la compración. 

```{r echo=TRUE, warning=FALSE, message=FALSE}
dfboxplot1 <- data_to_boxplot(df, value, add_outliers=TRUE, name= 'value', color = 'teal')
dfboxplot2 <- data_to_boxplot(df, high, add_outliers=TRUE, name= 'high', color = 'red')
dfboxplot3 <- data_to_boxplot(df, low, add_outliers=TRUE, name= 'low', color = 'orange')

highchart() %>%
  hc_chart(type='boxplot') %>%
  hc_add_series_list(dfboxplot1) %>%
  hc_add_series_list(dfboxplot2) %>%
  hc_add_series_list(dfboxplot3) %>%
  hc_credits(enabled=TRUE, text='InvestigaOnline.com', href ='https://www.investigaonline.com') %>%
  hc_exporting(enabled=TRUE)
```

## Gráfico de barras de error

A menudo tenemos necesidad de incluir un gráfico denominado de barras de error. Este gráfico toma los valores de _low-high_ (que podrían ser lo límites de confianza de un intervalo) y los representa en forma gráfica, quedando de esta forma.

```{r echo=TRUE, warning=FALSE, message=FALSE}
highchart() %>%
  hc_chart(type = 'errorbar', polar = FALSE, inverted = FALSE) %>% 
  hc_xAxis(categories = df$name) %>% 
  hc_yAxis(visible = TRUE) %>% 
  hc_tooltip(outside = TRUE, enabled=TRUE) %>% 
  hc_add_series(df,name = "Límites de confianza",showInLegend = FALSE, dataLabels = list(enabled=TRUE))
```

Si además de los límites de la medición, quisiéramos añadir el punto de valor, el resultado sería éste.

```{r echo=TRUE, warning=FALSE, message=FALSE}
highchart() %>%
  hc_chart(type = 'errorbar', polar = FALSE, inverted = FALSE) %>% 
  hc_xAxis(categories = df$name) %>% 
  hc_yAxis(visible = TRUE) %>% 
  hc_tooltip(outside = TRUE, enabled=TRUE) %>% 
  hc_add_series(df,name = "Límites de confianza",showInLegend = FALSE, dataLabels = list(enabled=TRUE)) %>% 
  hc_add_series(df,type = 'scatter', name = "Valor",showInLegend = FALSE, dataLabels = list(enabled=TRUE, x=15, y=5))
```

Probando nuevas cosas, hemos movido la etiqueta del valor hacia la derecha `(x=15)` y hacia abajo `(y=5)`. Eso hace que no se solape con el punto señalado en el gráfico.

## Gráficos de transiciones

En nuestro trabajo en mucho casos debemos a veces plantear gráficos en los que se trata de graficar relaciones de objetos con fuente y destino. Aunque nuestro banco de datos es muy simple, hemos creado campos con el nombrede `weight`,  `from` y `to` para que nos permitan hacer este tipo de gráficos que tienen dos versiones diferentes: el diagrama de Sankey y el diagrama de rueda de dependencia. Veamos ambos.

### Diagrama de Sankey

El diagrama de Sankey es un tipo específico de diagrama de flujo, en el que la anchura de las linea de relación entre dos puntos (from y to) se muestra proporcional a la cantidad de flujo transferido (weight, que podría ser frecuencia de emparejamiento).

```{r echo=TRUE, warning=FALSE, message=FALSE}
highchart() %>%
    hc_chart(type = 'sankey', polar = FALSE, inverted = FALSE) %>% 
    hc_xAxis(categories = df$name) %>% 
    hc_yAxis(visible = TRUE) %>% 
    hc_tooltip(outside = TRUE, enabled=TRUE) %>% 
    hc_add_series(df,name = "Nombre de la serie",showInLegend = FALSE, dataLabels = list(enabled=TRUE), colorByPoint=TRUE)
```

De esta forma se muestra que las relaciones más fuertes se producen entre aceituna y pera o entre guava y pera.

### Diagrama de rueda

Otra forma de ver el mismo gráfico, pero en forma circular. Las mismas necesidades de campos `weight`, `from ` y `to`.

```{r echo=TRUE, warning=FALSE, message=FALSE}
highchart() %>%
    hc_chart(type = 'dependencywheel', polar = FALSE, inverted = FALSE) %>% 
    hc_xAxis(categories = df$name) %>% 
    hc_yAxis(visible = TRUE) %>% 
    hc_tooltip(outside = TRUE, enabled=TRUE) %>% 
    hc_add_series(df,name = "Nombre de la serie",showInLegend = FALSE, dataLabels = list(enabled=TRUE), colorByPoint=TRUE)
```

### Diagrama _streamgraph_

Un _streamgraph_ es un tipo de gráfico de áreas apiladas. Muestra la evolución de un valor numérico (eje Y) después de otro valor numérico (eje X). Esta evolución está representada por varios grupos, todos con un color distinto. Al contrario que en un área apilada, no hay esquinas: los bordes están redondeados, lo que da esta agradable impresión de flujo. Además, las áreas generalmente se desplazan alrededor de un eje central, lo que da como resultado una forma fluida y orgánica.

Usaremos los valores `y`, `z` y `value` para crear tres series.

```{r echo=TRUE, warning=FALSE, message=FALSE}
highchart() %>%
    hc_chart(type = 'streamgraph', polar = FALSE, inverted = FALSE) %>% 
    hc_xAxis(categories = df$name) %>% 
    hc_yAxis(visible = TRUE) %>% 
    hc_tooltip(outside = TRUE, enabled=TRUE) %>% 
    hc_add_series(df$y,name = "y", showInLegend = FALSE, dataLabels = list(enabled=FALSE), color='silver') %>% 
    hc_add_series(df$z,name = "z", showInLegend = FALSE, dataLabels = list(enabled=FALSE), color='teal') %>% 
    hc_add_series(df$value ,name = "value", showInLegend = FALSE, dataLabels = list(enabled=FALSE), color='orange')
```

### Diagrama de redes

Para finalizar como homenaje a mis compañeros en TESI, quiero poner este gráfico muy de moda en la actualidad para representar transiciones, flujos o relaciones más complejas. Como es obvio, recogemos los datos de forma externa (ocultamos el código de carga) y presentamos los mismos en la imagen. El gráfico muestra nuestra relaciones de proyecto y de unidades de negocio de modo interno.


```{r echo=TRUE, warning=FALSE, message=FALSE}

#edges contiene las relaciones mientras que names contiene los elementos

g <- graph_from_data_frame(edges, directed=TRUE, vertices=names)

hchart(g, layout = layout_with_fr, dataLabels=list(enabled = TRUE, format='{point.name}')) %>%
    hc_title(text='TESI', useHTML=TRUE) %>%
    hc_tooltip(useHTML = TRUE, pointFormat = "{point.photo}")
```

## Conclusión

Hasta aquí llegamos. Hemos presentado de forma muy breve y simplificada como podemos aprovechar toda la potencia de `highcharts` en nuestros scripts. Lo importante es practicar y practicar. No dejes de leer el [post de Danton Noriega](https://dantonnoriega.github.io/ultinomics.org/posts/2017-04-05-highcharter-explainer.html) acerca de como usar la [API](https://api.highcharts.com) para saber construir los gráficos highchart en R mediante `highcharteR` Del mismo modo, no dejes de acudir al sitio web de [Joshua Kunst](https://jkunst.com/highcharter), creador y mantenedor del paquete junto con otros colaboradores que permiten llevar adelante este excelente proyecto.
