--- 
title: "Tablas y gráficos con R y R Studio"
author: "Roberto Gil-Saura<br>![](data/88x31.png)"
date: "Última actualización: `r Sys.Date()`<br><br><br>![](data/portada.png)"
site: bookdown::bookdown_site
documentclass: book
bibliography: [book.bib, packages.bib]
biblio-style: apalike
link-citations: yes
description: "Guía para la realización de tablas de contingencia, reproduciendo tablas del tipo `SPSS` o `BarbWin` usando el paquete `expss` y visualizaciones de resultados con el paquete `highcharter`. Introducción al uso de scripts con `R` en el entorno de `R Studio`."
---

# Prefacio {-}

Todavía recuerdo cuando hace unos años descubrí R  [@R-base] -lejos queda ya aquel 2000- y me pareció una herramienta valiosa para mi trabajo, pero que no era para mí. La percibí para usuarios programadores y no para analistas o científicos de datos, como gusta llamar hoy en día a estos trabajadores del dato. Sin embargo, hace tres años (2018)y tras una etapa en la que centré mis energías y esfuerzos en mi PhD, redescubrí esta herramienta y no sólo ella, también R Studio y todo el trabajo que se había realizado en estos últimos años. Quedé gratamente impresionado y me puse manos a la obra porque vi un enorme potencial en la misma para lo que era mi trabajo actual. Una de las cuestiones fundamentales que aprecié es que las dos herramientas ya no sólo se enfocaban (probablemente nunca lo habían hecho) sólo a los programadores, sino que se apreciaba mucho el enfoque a analistas con todo tipo de formación y con escasos conocimientos de programación, pero que no temían enfrentarse a algo que les iba a reportar eficiencia en su trabajo y un enorme potencial de evolución. Con el paso del tiempo fui descubriendo todo lo que R y R Studio podrían hacer por mí (y por mis alumnos), y lo que ganaba / ahorraba en mi trabajo y en las soluciones que podía ofrecer a mis colegas y/o clientes. Y ahí empezó todo. 

En este documento, sólo pongo el foco en dos aspectos fundamentales en el mundo de la investigación de mercados cuantitativa: las tablas de contingencia y los gráficos, en sus diferentes modalidades y con sus diferentes sabores, básico y avanzados, visuales y no tan visuales; todo ello condimentado y aderezado con una cantidad de paquetes suplementarios y la inestimable ayuda de esos programadores que desinteresadamente ceden su trabajo a la comunidad. En especial aquí debo agradecer a Gregory Demin, Joshua Kunst y a Yihui Xie su desinteresada colaboración en la creación de diferentes paquetes y utilidades que han servidor para poder plasmar toda la información que aquí se desarrolla.

> **Cita**

<hr>
Gil-Saura, R., 2021. Tablas y gráficos con R y R Studio. 1st ed. [ebook] València: InvestigaOnline.com. Available at: <https://tables.investigaonline.com>.
<hr>

> **Licencia**

<br>![](data/88x31.png)
<br>
&copy; Textos y gráficos: Roberto Gil-Saura
(robertogil@investigaonline.com)

Cualquier forma de reproducción, distribución, comunicación pública o transformación de esta obra solo podrá ser realizada con la autorización expresa del autor bajo los términos abajo descritos.

1ª edición: Valencia, 2021
Última actualización: `r Sys.Date()`

<br>
This work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 Unported License (CC BY-NC-SA 4.0) http://creativecommons.org/licenses/by-nc/4.0/ In short: Roberto Gil-Saura retains the Copyright but you are free to reproduce, reblog, remix and modify the content only under the same license to this one. You may not use this work for commercial purposes
but permission to use this material in nonprofit teaching is still granted, provided the authorship and licensing information here is displayed.

```{r warning = FALSE, messages=FALSE, include=FALSE}
if(!knitr:::is_html_output())
{
  options("width"=56)
  knitr::opts_chunk$set(tidy.opts=list(width.cutoff=56, indent = 2), tidy = TRUE)
  knitr::opts_chunk$set(fig.pos = "H")
}
knitr::write_bib(c(.packages(), "bookdown", "knitr", "rmarkdown", "knitr", "kableExtra", "DT", "expss", "formattable", "flextable", "fontawesome", "sparkline", "dplyr", "stringr", "purrr", "lubridate", "readr", "igraph", "highcharter", "plotly", "formatR" ), "packages.bib")
suppressMessages(library(dplyr, quietly=TRUE))
suppressMessages(library(stringr, quietly=TRUE))
suppressMessages(library(purrr, quietly=TRUE))
suppressMessages(library(lubridate, quietly=TRUE))
suppressMessages(library(readr, quietly=TRUE))
suppressMessages(library(expss, quietly=TRUE))
suppressMessages(library(DT, quietly=TRUE))
suppressMessages(library(igraph, quietly=TRUE))
suppressMessages(library(highcharter, quietly=TRUE))
suppressMessages(library(plotly, quietly=TRUE))
suppressMessages(library(knitr, quietly=TRUE))
suppressMessages(library(kableExtra, quietly=TRUE))
suppressMessages(library(fontawesome, quietly=TRUE))
suppressMessages(library(sparkline, quietly=TRUE))
suppressMessages(library(formatR, quietly=TRUE))
options(highcharter.theme = hc_theme_hcrt(dataLabels=list(valueDecimals=2), tooltip = list(valueDecimals = 2)))
options(tinytex.verbose = TRUE)
data <- suppressMessages(read_spss("~/R/r-data/00.tables/data/3192.sav"))
df <-suppressMessages(read_csv("~/R/r-data/00.tables/data/df.csv", col_names =TRUE))
edges <-suppressMessages(read_csv("~/R/r-data/00.tables/data/edges.csv",locale = locale(encoding = "ISO-8859-1")))
names <-suppressMessages(read_csv("~/R/r-data/00.tables/data/names.csv",locale = locale(encoding = "ISO-8859-1")))
```


<!--chapter:end:index.Rmd-->

# Introducción  {#tse01}

```{r include = FALSE}
if(!knitr:::is_html_output())
{
  options("width"=56)
  knitr::opts_chunk$set(tidy.opts=list(width.cutoff=56, indent = 2), tidy = TRUE)
  knitr::opts_chunk$set(fig.pos = "H")
}
```

## ¿Por qué este libro?

La respuesta más simple a la pregunta ¿Por qué este libro? es que no hay libros dedicados a ilustrar y mostrar cómo hacer tablas de contingencia y gráficos a partir de esas tablas usando R; hablando más específicamente usando `expss` y `highcharter`. Por otro lado, a partir de mi experiencia y de muchos años dedicado al mundo de la investigación y la docencia (mi hobbie personal) encontré el tiempo y la motivación para escribirlo. Quería crear un recurso que fuera diferente del resto de textos con el mismo contenido aproximado y porque creo que para que las ideas se difundan y adopten ampliamente, deben percibirse de manera amigable y fácil de entender, lo que tiene por qué estar reñido con una baja calidad científica y teórica. Si algo se percibe como complejo e intimidante, solo pocos creerán que ese recurso es apropiado para ellos. Así pues, y aunque todos los análisis requieren las habilidades propias de una persona acostumbrada a manejar fuentes de datos variadas, creo realmente que el recurso es extremadamente sencillo, funcional, comprensible y válido para todos.

¿No es acaso necesario y nos viene muy bien el poder utilizar macros en software como Microsoft Office<sup>&copy;</sup> o sintaxis en IBM SPSS<sup>&copy;</sup> ? Pues esta es la respuesta, mostrar de una forma sencilla la posibilidad de que el usuario pueda utilizar código R [@R-base] en sus análisis de datos, que le permitan ir mucho más allá de lo que ofrecen las herramientas básicas comerciales. 

Además, la elección de R no es casual: 

* La primera razón para elegir R es que es un programa extremadamente potente para manipular y analizar datos. Su popularidad en alza lo ha convertido en el software de referencia para estadísticas y análisis en muchas disciplinas, y se enseña cada vez más en muchas universidades. R se ha convertido en uno los de los estándares de facto de la industria del proceso, análisis y visualización de datos, dentro de ese nuevo ámbito que es al analítica o ciencia de datos, que está dando cabida a muchos profesionales de nueva creación y en la que nos estamos integrando muchos otros que provenimos de ámbitos diferentes. 

* La segunda razón para seleccionar R es que es independiente de la plataforma (puede usarla en Windows<sup>&copy;</sup> , Mac o Unix) y es gratis y por ello no se deb invertir un euro en licencias, mantenimientos o actualizaciones. Los proveedores de software comercial pueden brindar soporte y ofrecer algún tipo de garantía, pero eso es secundario. No se puede superar el precio y la funcionalidad de R. R se enriquece por el hecho de que muchas personas de todo el mundo contribuyen y comparten su propio trabajo en forma de funcionalidades incluidas en paquetes de lo más variado y que llegan al mercado con una celeridad imposible para cualquier otro software comercial. Asimismo, R tiene recursos de ayuda inigualables, tanto en línea como físicos. Hay muchos foros en línea, listas de correo electrónico, grupos de interés, foros, blogs y sitios web llenos de información rica sobre R. Además, cada año se publican cada vez más muchos libros de R de excelente calidad. Lo que realmente se valora de R, es su carácter de código abierto, lo que permite (si sabes) ver el código por dentro alejándose de ser una caja negra. 

## ¿Para quién este libro?

El presente documento enfoca e introduce al usuario de investigación (fundamentalmente de Investigación de Mercados) en la creación de información analítica y reproducible utilizando scripting con _Markdown_, que permita obtener cualquier tipo de tabla resumen de datos o cualquier análisis que pueda hacer utilizando código R. 

Este manual ha sido redactado pensando en los usuarios que trabajan de forma conjunta con R Studio y R. Por tanto, se asume que el usuario estará familiarizado con el uso de ambas aplicaciones y se le supone conocimiento básico de cómo funcionar con ellas. No obstante, al inicio de la sección 3, el usuario puede encontrar unos sencillos rudimentos de como trabajar para iniciarse con el trabajo de R Studio y por extensión de R.

## Estructura del documento

En investigación de mercado, las tablas de contingencia o cruzadas probablemente sean el análisis de datos más predominante de todos los utilizados, complementado por una potente visualización en forma de gráfico de esos datos. Se pretende dotar al usuario de de las herramientas básicas que le permitan reproducir cualquier tipo de cuadro o tabla, de tipo marginal o cruzada, con medidas estadísticas básicas, combinando estadísticos y frecuencias o porcentajes, o realizar pruebas de significación estándar, así como la reproducción de los gráficos que se adaptarían a esas tablas. La estructura del manual se adapta por tanto a este objetivo, organizándose de la siguiente forma:

* esta introducción al manual, donde también se ayuda a la instalación de ambas herramientas de trabajo R y R Studio;
* una sección que dedicamos a introducir al lector en el lenguaje R; no se pretende hacer un revisión exhaustiva del lenguaje, sino simplemente enumerar los términos y conceptos que serán necesarios para entender el funcionamiento de las tablas y el manejo y gestión de las mismas;
* una sección donde se introduce al usuario en la escritura de sencillas órdenes que como resultado obtendrán un cuadro o tabla;
* una sección dedicada a la creación de las tablas cruzadas;
* una sección dedicada a tablas más especiales, que denominaremos multi dimensionales;
* una sección dedicada a la generación de otras tablas auxiliares: cuadros, escalas, etc.;
* un epígrafe que describirá las pruebas básicas de significación que se utilizan en las tablas de contingencia;
* una sección dedicada a los gráficos;
* un epígrafe dedicado a operaciones con tablas, entre filas y/o columnas y a mejorar la visualización de las tablas y obtener gráficos a partir de estas operaciones especiales, ampliando el conjunto de paquetes a utilizar y combinando sus funcionalidades;
* por último, una sección complementaria más de lenguaje R, para saber cómo se incluyen las condiciones para cualquier tipo de selección de datos.

Para seguir este manual, tal y como hemos comentado anteriormente, asumimos que el usuario conoce mínimamente R y R Studio y que ha constatado su necesidad de reproducir tipos de tabla que ha visto que son posibles de obtener en Quantum, Minitab, Systat, Star, SPSS o BarbWin entre otros. Explicaremos los rudimentos básicos de trabajo en R, pero adecuados a su uso en R Studio, con una primera introducción a cómo integramos R en su flujo de trabajo.

Agradecemos expresamente a Gregory @expss, desarrollador del paquete **`expss`** de R por su desinteresado trabajo en código abierto que permite reproducir e ir más allá de los cuadros resumen creados; al igual que a Joshua @highcharter, desarrollador del paquete **`highcharter`** por su excelente aportación en el mundo de la graficación con la creación del _wrapper_ para la librería Highchart, renombrada y conocida librería de gráficos JavaScipt que permite su uso en R. Y no puedo acabar esta sección sin mencionar al equipo de R Studio y en particular a Yihui @bookdown, que con sus diferentes aportaciones, permite que esta obra llegue a vuestros ojos en las condiciones que lo hace usando el paquete **`bookdown`** desde R Studio.

## Instalación de R y R Studio

Para poder seguir el manual de forma correcta, deberemos tener instalados R y R Studio. Sigue estos pasos para poder hacerlo en Windows. Si es sobre Linux o MacOS, busca información sobre cómo instalarlo específicamente en tu versión. Es muy sencillo, pero con una imágenes se ve mejor.

### Instalación de R en Windows

Los pasos son los siguientes:

1. Abre el siguiente enlace: https://cran.r-project.org/

2. Selecciona la opción “Download R for Windows”.

![](data/01.jpg)

3. En la nueva página seleccione “base”.

![](data/02.jpg)

4. En la nueva página presiona en “Download R X.X.X for Windows”, donde X.X.X corresponde a la versión más actualizada disponible en ese momento. Para este caso es 4.0.3.

![](data/03.jpg)

5. El archivo instalador empieza a descargarse como cualquier otro documento, la ubicación de la descarga y la forma en que se realice dependerán de la configuración que estés usando en tu navegador de internet.

6. Una vez que la descarga se complete, ejecuta el archivo de instalación desde la carpeta donde se haya almacenado.

7. Selecciona el idioma de preferencia y presiona OK.

![](data/04.png)

8. Sigue las recomendaciones de la pantalla y luego presiona “Siguiente”.

![](data/08.jpg)

9. Selecciona la carpeta donde quieres instalar R. La recomendación es dejar la carpeta que viene por defecto. Luego, presiona “Siguiente”.

![](data/09.jpg)

10. Selecciona los componentes que desea instalar. Es recomendable dejar seleccionados los que vienen por defecto. Luego, presiona “Siguiente”.

![](data/10.jpg)

11. Especifica las opciones de configuración. En este caso, como es la instalación básica, la opción sugerida es “No”. Luego, presiona “Siguiente”.

![](data/11.jpg)

12. Lee las indicaciones y selecciona las opciones de su conveniencia. La sugerencia es dejar las opciones que vienen por defecto. Luego, presiona “Siguiente”.

![](data/12.jpg)

13. Selecciona las tareas adicionales. La sugerencia es dejar habilitadas solamente las que vienen por defecto. Luego, presiona “Siguiente”.

![](data/13.jpg)

14. Esto iniciará el proceso de instalación. No cierres la ventana hasta que el programa indique que el proceso ha sido completado con éxito.

![](data/14.jpg)

15. Esto completa la instalación de R. Presiona “Finalizar”.

![](data/15.jpg)


### Instalación de R Studio en Windows

Vamos ahora a proceder con R Studio.

1. Abre el siguiente enlace https://R Studio.com/products/R Studio/download/#download

2. En esta página, se indica lo siguiente:

2.1. Install R: Se requiere que R esté preinstalado. La versión más antigua soportada es 3.0.1, si se siguieron los pasos descritos anteriormente para la instalación de R tendríamos la versión más nueva, por lo que no tendríamos problema.

2.2. Download R Studio Desktop: R Studio provee un instalador sugerido basado en su sistema. En la imagen de abajo el instalador sugerido es Windows porque es el sistema operativo detectado. Si el instalador coincide con su sistema operativo, haga click en el recuadro para iniciar la descarga. Si requiere otro instalador, mirar el punto 3.

![](data/R01.png)

3. En caso de requerir instaladores para otros sistemas operativos, estos se pueden encontrar en el cuadro abajo de la imagen en la misma página “All Installers”.

![](data/R02.png)

4. Después de seleccionar la descarga del instalador correspondiente, el archivo empezará a descargarse como cualquier otro documento, la ubicación de la descarga y la forma en que se realice dependerán de la configuración que estés usando tu navegador de internet.

5. Una vez que la descarga se complete, ejecuta el archivo de instalación desde la carpeta donde haya sido descargado.

6. La ventana de bienvenida indica que es recomendado cerrar todas las demás aplicaciones que se estén usando antes de iniciar la instalación. Esto es para que sea posible actualizar archivos importantes en el sistema sin necesidad de reiniciar el PC. Presiona “Next” cuando se haya completado lo anterior o si no hay inconveniente con reiniciar el PC.

![](data/R06.jpg)

7. Seleccion la carpeta donde instalar R Studio. La recomendación es dejar la carpeta que viene por defecto. Luego, presiona “Next”.

![](data/R07.jpg)

8. Selecciona la carpeta del menú de Inicio en el que se crearán los accesos directos al programa, o escribe un nombre para crear una nueva carpeta. La sugerencia es dejar las opciones que vienen por defecto. Luego, presiona “Install”.

![](data/R08.jpg)

9. Esto iniciará el proceso de instalación. No cierres la ventana hasta que el programa indique que el proceso ha sido completado con éxito.

![](data/R09.jpg)

10. Esto completa la instalación de R Studio. Presiona “Finalizar”; es posible que debas reiniciar el PC dependiendo de lo establecido en el paso 6.

![](data/R10.jpg)

11. Tras el posible reinicio o sin el reinicio, lanza R Studio como cuqlquier otra aplicación. este es su aspecto.

![](data/R11.jpg)

A partir de aquí continuamos. R Studio se encarga de gestionar R, no deberemos preocuparnos por éste salvo para actualizarlo cuando creamos necesario o tengamos alguna necesidad puntual. R y R Studio son como cualquier otra aplicación de Windows, harás lo mismo que con las demás.


## Uso básico de R Studio y de R

Si eres un lector / usuario que ya ha trabajado con R y R Studio, puedes saltar ya lo que resta de sección y pasar directamente a la sección 3. Si no lo eres, unas breves instrucciones para comenzar.

### ¿Qué es R Studio?: una interfaz para usar R

Cuando arrancamos R Studio, se pueden ver 4 ventanas, que según el gusto del usuario, pueden estar organizadas de diversa forma. En mi caso, me gusta disponer del editor de scripts o sintaxis ( _source_ ) en la parte superior izquierda, en la parte superior derecha la consola ( _console_ ) y abajo de izquierda a derecha el entorno ( _environment_ ) y a la derecha el resto de opciones ( _files_, _plots_, ...) en la parte superior el además de la barra de opciones en la parte superior.

Puedes adoptar esta configuración desde el menú **_Tools > Global Options > Pane Layout_**.

![](data/RS01.png)
Mi escritorio ...

![](data/RS03.png)

Ventana (1): es el editor de sintaxis: se trata del lugar donde editamos la sintaxis para posteriormente ejecutarla. Al escribir allí no sucederá nada, a no ser que se apriete algún botón para ejecutar los comandos o la tecla CTRL+ENTER.

Ventana (2): es la consola. Corresponde a lo que sería el software R en su versión básica. Allí el software ejecuta las operaciones realizadas desde el editor de sintaxis.

Ventana (4): es el “entorno de trabajo” del programa: en este lugar se muestra el conjunto de datos y los “objetos” (resultados, variables, gráficos, etc.) que se almacenan al ejecutar diferentes análisis.

Ventana (4) tiene varias sub pestañas: (i) la pestaña files permite ver el historial de archivos trabajados con el programa; (ii) la pestaña plots permite visualizar los gráficos que se generen; (iii) la pestaña packages permite ver los paquetes descargados y guardados en el disco duro así como gestionar su instalación o actualización; (iv) la ventana help permite acceder al CRAN - Comprehensive R Archive Network (siempre que se cuente con conexión a Internet), página oficial del software que ofrece diferentes recursos para el programa: manuales para el usuario, cursos on line, información general, descarga de paquetes, información de los paquetes instalados, etc. Esta última pestaña es bastante útil: empleando el motor de búsqueda se accede de manera rápida a manuales de uso de los diferentes paquetes (y sus funciones) instalados en el computador (esto no requiere conexión a Internet).7; (v) la ventana viewer muestra los resultados al construir reportes mediante funcionalidades tipo R Markdown que será nuestra herramienta de trabajo.

¿Dónde está nuestro trabajo? El software R funciona como un entorno temporal de trabajo, esto quiere decir que el usuario va agregando datos y objetos (conjuntos de datos con diferentes atributos) a una “hoja en blanco”. Hay que tener en cuenta que R trabaja con la memoria activa (RAM) del computador, por lo tanto cualquier análisis sólo mostrará la información resultante pero no permanecerá como archivo posible de utilizar de modo posterior. Es decir, si los análisis no son guardados como objetos (vectores, matrices, listas u otros tipos de objetos) se deberán repetir las instrucciones para obtener otra vez el resultado.

Todas las operaciones de R - sean indicadas vía sintaxis o botones - son ejecutadas según comando computacional que es visualizado en la consola. La ejecución de comandos entrega diferentes señales respecto a su funcionamiento. Por ejemplo, mientras se está ejecutando un comando, el programa muestra un signo “Stop” en la esquina superior derecha de la consola (como se ve en la imagen). Eso indica que el programa está ocupado ejecutando una acción. Si se presiona tal símbolo, se cancelará la operación en curso.

En la sección \@ref(tse02), comenzamos a trabar con sccripts que nos devuelvan resultados.

<!--chapter:end:01-intro.Rmd-->

# Primeros pasos y términos a conocer {#tse02}

```{r include = FALSE}
if(!knitr:::is_html_output())
{
  options("width"=56)
  knitr::opts_chunk$set(tidy.opts=list(width.cutoff=56, indent = 2), tidy = TRUE)
  knitr::opts_chunk$set(fig.pos = "H")
}
```

## ¿Desde dónde creo mis scripts?

Dos son las formas de trabajar con R desde R Studio. Te explicamos brevemente esas dos formas de trabajar.

### Scripts en consola

El scripting con consola está pensado para obtener tablas u otros objetos en la consola de la interfaz de trabajo de R Studio. Para ello usaremos archivos de texto con extensión .R que crearemos desde la entrada _File > New File > R Script_. Estos ficheros darán como resultado salidas a la denominada consola en formato de texto.

### Scripting con _markdown_

El scripting con _markdown_ está pensado para generar páginas completas o documentos completos con texto, tablas, gráficos, etc. Se pueden utilizar paquetes como `flexdashboard` o generar salidas de tipo diapositiva utilizando las opciones de configuración que ofrece el paquete `rmarkdown`. No aseguramos una compatibilidad al 100%, pues eso sería imposible, pero gran parte de las características estarían funcionales. La idea es generar un documento HTML, de forma totalmente transparente para el usuario, que se guarda en la base de datos y se presenta como resultado del análisis. Ese HTML puede contener texto, gráficos, tablas y cualquier elemento que se te ocurra. El código R se ubica en lo que se denomina `chunk` -que luego veremos- y se puede incluir también código R `inline` en el texto. Para esta segunda forma de trabajar usaremos también archivos de texto, pero con extensión .Rmd que crearemos desde la entrada _File > New File > R Markdown_. Estos ficheros darán como resultado archivos con extensiones .html, .docx, .pdf.

## Primeros pasos 

Si ya tienes experiencia con R Studio, da un vistazo, pero es posible que mucho de lo aquí indicado sea irrelevante para ti y todo ello ya sea habitual y conocido por ti. Pasa a la siguiente sección, donde comenzamos a trabajar los scripts.

### Carga de datos 

Vamos a trabajar con ello y verás que sencillo. Para comenzar, en [este enlace](https://drive.google.com/uc?export=download&id=1JjevbQjzGc1NMyR7qf7bbvtbMyK8Pvhr) tienes un archivo de datos con el que haremos todos nuestros ejemplos. Esta fuente de datos está en formato SPSS (*.sav) y se corresponde con la tercera oleada de un estudio del CIS (Centro de Investigaciones Sociológics de España) de 2017, el barómetro sanitario. 
La fuente de datos tiene 2557 registros y tiene 190 campos. Si deseas ver el cuestionario que originalmente se utilizó para recoger los datos, [lo puedes descargar aquí](https://drive.google.com/uc?export=download&id=1AUUI-1isOmKB1ovR4MRoqMj2Fp7Re2f2). En él puedes ver todo lo referente a como se ha realizado la entrevista.

Si has seguido las instrucciones de instalación, se habrá creado una carpeta denominada R dentro de Mis Documentos (que R Studio denomina Home como podás observar en el panel de la ventana 4, opción FILES)

A partir de ahí,impera tu orden, agrega carpetas en la forma en que esté habituado y organiza tu trabajo como si de cualquier aplicación Windows se tratara. Si te gusta ser ordenado en tu trabajo, lo harás también; si no te gusta, ...

Nuestro primer paso será iniciar una sintaxis o script. Para ello desde el menú de **_File > New File > R Script_** abriremos un espacio para escribir. En la ventana creada como _Untitled1_, puedes escribir.

![](data/RS04.png)

escribe 2+2 y haz clic en _Run_ teniendo el cursor sobre la línea en la que has escrito ...

![](data/RS05.png)

y obtendrás el resultado en la consola (ventana 2)

![](data/RS06.png)

Ahora podrías guardar tu script _File > Save as_ , y ya tendríamos cerrado el primer paso del camino. El archivo puede abrirse, ser editado y volver a ejecutarse tantas veces quieras.

### Instalación de paquetes

Uno de los elementos fundamentales que caracteriza a R, es que se trabaja con **paquetes** que la comunidad de desarrollo aporta para los análisis más variados. Los paquetes son la aportación de los desarrolladores que de alguna forma comparten su conocimiento con la comunidad global. Nosotros vamos a trabajar con algunos que no están en la instalación base, asi que procederemos a hacer el ciclo completo de instalación (sólo una vez) y carga (tantas veces como queramos usar el paquete en una sesión). Aunque existe opción de instalar paquetes por comandos `install.packages()`, ilustramos el camino para hacerlo desde el menú. **_Tools > Install packages_**.

![](data/install_packages.png)

Utiliza la opción arriba indicada y siguiendo las indicaciones descritas escribiríamos:

**expss, highcharter, kableExtra**

Cuando hagas clic en _Install_, comenzarán a instalarse esos paquetes (su descarga e instalación). R Studio te informa cuando ha finalizado. Puede verse en la consola.

## Crear un fichero R Markdown

Vamos a crear un nuevo script, pero ahora ya lo vamos a hacer del modo que seguiremos trabajando durante todo el manual. 

Desde el menú de R Studio **_Files > New File > R Markdown_**. Elige entre las opciones proporcionadas, la creación de un _documento HTML_. Dale nombre y ponte como autor. Verás lo que escribas reflejado en el archivo.

![](data/RS07.png)

Se creará un archivo como este ...

![](data/RS08.png)
Este es un fichero de ejemplo, borra desde donde pone ## R Markdown hasta abajo y que quede así. Mantenemos este primer _chunk_ y lo explicamos.

![](data/RS09.png)

Aquí escribimos el script de R, que como puedes ver en línea 1 y 3 comienza y acaba con una simbología determinada. Estos son los caracteres indicadores de que todo lo que queda entre ` ```{r echo=TRUE}` y ` ``` ` es scripting. A partir de ahora, nuestras instrucciones irán siempre entre estos símbolos de inicio y final. Nótese que se añade la instrucción `echo=TRUE`. Esta instrucción provocará que se imprima en el resultado los comandos del script, si en lugar de eso se escribe `echo=FALSE`, no se imprimiría ese código.

Nuestro código le dirá a R que secuencialmente haga...

* la carga del paquete expss;
* la lectura del archivo que está en esa URL (un archivo SAV - SPSS en Google Drive) y asignació a un objeto de R que lo contendrá llamado _data_;
* el cálculo de la media (mean)...;
* de una variable que está en el marco de datos denominado `data`;
* y que se llama PESO (`data$PESO`);
* no teniendo en cuenta los valores NA (nulos, no definidos, que no sean número: `na.rm=TRUE`)

```{r }
library(expss)
data <- read_spss("https://drive.google.com/uc?export=download&id=1JjevbQjzGc1NMyR7qf7bbvtbMyK8Pvhr")
mean(data$PESO, na.rm=TRUE)
```

Quedará así: 

![](data/RS10.png)

Para ver el resultado, haz clic en el botón _`knitr`_ (publicar). Como es la primera vez y no hemos guardado nuestro script, nos indica que le pongamos nombre, por ejemplo SCRIPT_001.

![](data/RS11.png)

Y el resultado, ya puedes verlo, 0,9999273; sale en una nueva ventana que es donde se muestra el resultado. Reconocerás también aquello que se ha escrito cuando creamos el archivo y que puede editar sobre el fichero. 

![](data/RS12.png)

Fíjate que se ha publicado el código R de programación eso lo podemos evitar si cambiamos el `echo = TRUE` por `echo = FALSE`. Prueba a hacer el cambio y haz de nuevo _`knitr`_.

![](data/RS13.png)

Terminamos con el primer script de análisis. Este script aparece ahora en el listado de fichero como SCRIPT_001.Rmd (Rmd es la extensión de los archivos R Markdown, mientras que R es la de los scripts de consola). Del mismo modo, podrás ver ahora un archivo denominado SCRIPT_001.html que contiene tu resultado y que podrías copiar o enviar a cualquiera porque contiene todo lo necesario para que se muestre como a ti. Una de las grandes ventajas.

### Conclusión

Así, hemos finalizado con nuestro primer _scripting_. No volveremos a ser tan explicativos en este documento acerca de como crear y editar los scripts. En la siguiente sección comenzamos con las tablas más básicas.

## Básicos de R y/o proceso de datos

En el presente epígrafe, mostramos un conjunto de términos que serán habitualmente utilizados en las sucesivas secciones que se presentan en este documento. Estos son los más relevantes y los hemos separado en dos grupos. Un grupo hace referencia a términos básicos de R y otro grupo a términos básicos del manejo de tablas o del proceso de tabulación. Cada término tiene une breve reseña, y posteriormente algunos de ellos serán más tratados en sus respectivas funcionalidades. 

1. **R** es un entorno y lenguaje de programación con un enfoque al análisis estadístico. Nació como una implementación de software libre del lenguaje S, adicionado con soporte para alcance estático. Se trata de uno de los lenguajes de programación más utilizados en investigación científica, siendo además muy popular en los campos de aprendizaje automático o _machine learning_, minería de datos, investigación biomédica, bioinformática y matemáticas financieras. A esto contribuye la posibilidad de cargar diferentes bibliotecas o paquetes con funcionalidades de cálculo y graficación. R es parte del sistema GNU y se distribuye bajo la licencia GNU GPL. Está disponible para los sistemas operativos Windows, Macintosh, Unix y GNU/Linux.

1. **objeto**, elemento creado desde comandos o scripts de R y que puede ser reutilizado dentro de la programación del script. En este manual se usará como sinónimo de tabla en muchos casos, pues la mayoría de los objetos que crearemos serán tablas.
1. **_dataframe_**, fichero de datos, banco de datos; término con el que se conoce en R a la estructura tabular (filas y columnas) de una matriz de datos, donde las columnas son variables y las filas son registros.
1. **variable**, elemento de tipo vector que contiene los valores de una determinada observación, un valor en cada fila; debe entenderse en el contexto de la estructura tabular o _dataframe_.
1. **valores**, cada una de las diferentes celdas que componen un _dataframe_. Una variable toma un valor en cada fila y se representa en la celda.
1. **medidas**, valores de los que se pretende calcular estadísticos como la media, la desviación típica o la mediana entre otras. Suelen responder a escalas de tipo numérico (ordinal o métrico).
1. **dimensiones**, valores de los que se pretende calcular frecuencias y/o porcentajes.
1. **factores**, niveles, códigos, etiquetas de variable.
1. **NA**, es como R representa los valores nulos o ausentes. 
1. **valores** perdidos, _missing values_, valores ausentes; tal como hemos indicado en el término NA, así es como R representa este tipo de valores.
1. **paquete**, conjunto de funciones de las que el usuario hace uso para obtener un resultado en R; en nuestro caso particular principalmente usaremos el paquete EXPSS de R; 1. comando, instrucciones que se integran dentro de un chunk
1. **chunk**, conjunto de comandos que se escriben entre los símbolos ````{r} y ```` y que se ejecutan mostrando los resultados.

## Básicos de tabulación

Antes de comenzar, el término más importante y objeto de nuestro trabajo. 

> Tabla

Una tabla es una matriz o cuadro que muestra la relación entre (una) dos o más variables. Cuando la tabla solo muestra la relación entre dos variables de tipo nominal u ordinal, y también se conoce como tabla de contingencia [@sanchez1989analisis].

En nuestro trabajo vamos a crear objetos de tipo tabla; una tabla es una estructura tabular, igual que un _dataframe_. De hecho, con nuestro trabajo utilizando el paquete EXPSS, vamos a generar tablas que serán _dataframe_ de tipo (clase) `etable`. Al ser un _dataframe_, podremos operar entre filas, columnas y celdas de forma lógica o aritmética utilizando funciones y comandos de R.

Además, dejamos este glosario de términos relacionados con las tablas en R, que utilizaremos en esta guía.

1. **título** o _caption_, texto que se publicará sobre la tabla;
1. **pie** o _footer_, texto que se publicará bajo la tabla;
1. **fila**, cada una de las líneas de información dentro de una tabla; se suele asimilar a un nivel (código) de una variable y/o a un resultados estadístico de una variable;
1. **columna**, cada una de las variables que conforman el _dataframe_ de una tabla (estructura tabular); en un cuadro o tabla de contingencia suele equivaler a un nivel de la variable que originalmente se diseñó para ser usada en columnas (si por ejemplo SEXO, una columna sería hombre y otra mujer);
1. **celda**, cada una de las unidades de información del cuadro o tabla;
1. **row_label**, primera columna donde se escriben los textos de las filas y que sirven para identificar el contenido de las mismas;
1. **etiqueta de variable**, texto extra identificativo de la variable usada en filas o columnas;
1. **etiqueta de valor**, texto del código identificativo de la variable usada;
1. **estadístico**, medida calculada;
1. **frecuencia**, tipo específico de medida calculada que significa número de veces en términos absolutos;
1. **porcentaje**, tipo específico de medida calculada que significa número de veces en términos relativos;
1. **`|`**, símbolo denominado `pipe` que en el paquete `expss` se utilizará para separar conjuntos de texto en una celda (o columna o fila);
1. **significación**, prueba estadística de contraste.

Hasta aquí esta introducción. En la sección \@ref(tse03) avanzaremos en la realización de las tablas básicas o también llamadas univariantes o marginales.

<!--chapter:end:02-terminos.Rmd-->

# Tablas marginales {#tse03}

## Una pequeña introducción

Vamos a comenzar explicando un poco qué es `expss`y su similitud nominal con `IBM SPSS`. `expss` es un paquete desarrollado por @expss que calcula y muestra tablas de todo tipo, con soporte para etiquetas con estilo `SPSS` y con gran facilidad y flexibilidad para obtener cabeceras múltiples y anidadas, pesos, variables de respuesta múltiple y pruebas de significación de tabla y celda. Ofrece facilidades para una salida formateada de tablas, e incluso, aunque no es objeto de este manual la posibilidad de exportación de esas tablas a `EXCEL` con el paquete `openxlsx`. Los métodos para variables etiquetadas agregan soporte de etiquetas de valor a las funciones de R base y a algunas funciones de otros paquetes. Es un paquete destinado a ayudar a los analistas a cambiar el proceso de datos desde `EXCEL` y `SPSS` hasta R.

Aquí dejo algunos enlaces para que puedas leer acerca de este paquete y las posibilidades que te ofrece de modo combinado con R Studio:

* [manual PDF de EXPSS](https://cran.r-project.org/web/packages/expss/expss.pdf)
* [material de ayuda, ejemplos](https://cran.r-project.org/web/packages/expss/vignettes/tables-with-labels.html)
* [uso de etiquetas en R](https://cran.r-project.org/web/packages/expss/vignettes/labels-support.html)

Vamos a crear nuestra primera tabla utilizando una instrucción muy básica de `expss`, que evolucionará en posteriores secciones. La que vas a ver seguidamente es la forma básica de pedir que se calcule la media de la variable PESO usando `expss`; le indicamos: 

* la instrucción de cálculo _calculate_; 
* el marco de datos a usar, _data_;
* y el cálculo a hacer _cro_mean_ (equivalente a calcula la media _mean_) en forma de tabla. 

Así pues, crea un fichero R MarkDown como vimos en la sección \@ref(tse02), y escribe este código (o mejor _copy&paste_) y obtén el resultado ...

```{r echo=TRUE}
library(expss) #cargamos el paquete
data <- read_spss("https://drive.google.com/uc?export=download&id=1JjevbQjzGc1NMyR7qf7bbvtbMyK8Pvhr") #cargamos los datos
calculate(data, cro_mean(PESO)) #hacemos el cálculo
```

Verás algunos cambios respecto a la salida anterior pues no hemos indicado cuántos decimales, ni que redondeo, ni le hemos dicho que no tenga en cuenta los valores especiales o nulos... y ha respondido de forma correcta. 

Ya vamos viendo que eso puede dar mucho juego, pero vamos a ir de forma ordenada y presentando poco a poco todos los tipos de tabla jugando con diferentes variables del banco de datos (¡¡¡ sí... _dataframe_!!!) que hemos cargado. Comenzaremos con la creación de tablas unidimensionales o conocidas como marginales, para luego continuar con las tablas cruzadas (sección \@fig(tse04)), y entre medio, iremos incorporando medidas estadísticas. 

Vamos a comenzar con un conjunto de tablas muy sencillas. En ellas representaremos los valores obtenidos del análisis de un campo extraído de nuestra fuente de datos de referencia, la tercera oleada del Barómetro Sanitario en España de 2017 del realizado y publicado por el CIS. Por ahora, trabajaremos sólo con la variable denominada P31 (sexo del entrevistado), variable medida en escala nominal, cuyas etiquetas (valores) son hombre (1) y mujer (2) y con la variable P3, escala de satisfacción (1-10) con el funcionamiento del sistema sanitario español, medida de 1 a 10. En nuestra fuente de datos tenemos 2557 casos (entrevistas realizadas). Puedes ver estas preguntas en el cuestionario PDF que puedes bajar en la sección \@fig(tse02).

Utilizaremos un script, es decir una pocas líneas de código que mostraremos en este mismo documento con un fondo gris y que lo hemos llamado _chunk_. Lo que quede fuera de ese trozo del documento (por arriba o por abajo), será como este texto que estoy escribiendo. Este texto que además, puede ser formateado como si de un HTML se tratará, es lo que llamamos un archivo `_markdown_`, y como es de R, pues lo llamamos `_R Markdown_`. Verás que también este documento tiene títulos, que se obtienen anteponiendo el símbolo # desde 1 vez hasta 6 veces y que se corresponde con las etiquetas de título de HTML. Inicialmente, comentaremos las líneas del script utilizando el también el mismo símbolo, pero no al inicio de la línea sino al final Lo que quede por detrás de él, se considera un comentario.

## Frecuencias

Este conjunto de tablas sólo trabajará con el estadístico de cálculo de frecuencias. Comenzaremos con variables de respuesta simple, para luego avanzar a las variables de respuesta múltiple y al uso de medidas estadísticas básicas (suma, media, mediana, máximo, mínimo, etc.).

### Variables de respuesta simple

#### Cálculo de frecuencias (estilo SPSS)

Utilizaremos en estos ejemplos de forma inicial un campo del marco de datos, `P31`, de respuesta simple. La primera tabla que haremos responde a un recuento de frecuencias, y es muy usada para el análisis univariante de una campo. Este comando muestra una tabla básica utilizando la función `fre()` que copia la salida del SPSS. Nótese que la columna de porcentaje válido y porcentaje es igual ante la inexistencia de NA (valores perdidos).

```{r fig.cap="Frecuencias marginales de P31, estilo SPSS", out.width="80%", fig.asp=.75, fig.align="center", echo=TRUE}
tab <- fre(data$P31)
as.datatable_widget(tab)
```

Alternativamente se puede presentar la forma que trabajaremos a lo largo de este curso, esta forma es la denominada script encadenado, donde definimos el marco de datos al inicio, y encadenamos instrucciones con el símbolo %>%  que irían línea a línea sucesivamente para una mejor lectura y comprensión del texto escrito; podrían perfectamente ir en una línea. Nótese que la tabla sale igual con las dos formas, pero mientras que en el primer caso se usa la nomenclatura estándar de R, y el campo se llama `data$P31`, es decir nombre del marco de datos en R (data) el símbolo del `$` que separa y nombre del campo en el marco de datos `P31` en la segunda al definir de inicio que se utilizará `data` ya se usa el nombre `P31` directamente, aunque debamos dar la orden de cálculo con el comando `calculate()`. 

```{r fig.cap="Frecuencias marginalesde P31 en tabla", out.width="80%", fig.asp=.75, fig.align="center", echo=TRUE}
as.datatable_widget(data %>%  
  calculate(fre(P31)))
```

Veamos ahora cómo solicitaremos tablas de frecuencias, porcentajes y estadísticos simples con R.

#### Tablas de frecuencias (absolutos)

La segunda tabla que vamos a hacer, ya responde a la típica presentación de una tabla de contingencia, sólo que en este casos vamos a mostrar sólo un campo y por tanto no va a haber cruce de variables. En el paquete `expss`, para construir un cuadro deberemos indicar al menos:

* un marco de datos (_dataframe_ en nomenclatura R)
* referenciar la variable sobre la que se deben calcular el estadístico seleccionado (frecuencia -casos-, media, mediana, máximo, mínimo...)
* una orden de impresión de tabla

Estos elementos básicos pueden completarse con campos de columnas, campos de filas, pruebas de significación, etc. Iremos desarrollando estos conceptos a lo largo de este documento. ¡Vamos a por el cuadro!

La que ahora entregamos, es la estructura básica de un script de R con el paquete `expss`. A lo largo del documento veremos cómo ir introduciendo mínimas variaciones a esta estructura que te permitirán descubrir un sinnúmero de posibilidades que ofrece este paquete de R. Por ejemplo, podemos modificar la etiqueta de TOTAL o indicar donde debe situarse la fila que contiene el cálculo TOTAL. Todas estas posibilidades las puedes conocer en la documentación original del _package_, aunque en este manual trataremos de ir desgranado las más relevantes para nuestro objetivo. Inicialmente iremos añadiendo tras el operador ` %>% ` comentarios precedidos por el símbolo `#`. Estos comentarios irán desapareciendo a medida que avancemos en el manual, y sólo se recurrirá a ellos cuando se aporte alguna nueva funcionalidad.

Para este primer script, indicaremos que usamos la fuente de datos (_dataframe_) ya cargado en el análisis. En R Studio, el _dataframe_ tendrá el nombre que le hayas indicado en la carga -en nuestro caso _data_-. Redactamos pues nuestro script, donde identificamos el _dataframe_, el campo `P31` del cual vamos a calcular el número de casos:

```{r fig.cap="Frecuencias de P31", out.width="80%", fig.asp=.75, fig.align="center", echo=TRUE}
as.datatable_widget(data %>%
  tab_cells(P31) %>%
  tab_stat_cases() %>%
  tab_pivot())
```

Realicemos ahora una pequeña pero importante variación en el cálculo del estadístico casos -frecuencias- y utilicemos la posibilidad de ubicar donde queramos el total de casos, así como su etiqueta. Ello lo hacemos con `total_row_position = "above", label = "Casos" ` aplicado a la función `tab_stat_cases()`.

```{r fig.cap="Frecuencias de P31, moviendo el Total", out.width="80%", fig.asp=.75, fig.align="center", echo=TRUE}
as.datatable_widget(data %>% 
  tab_cells(P31) %>% 
  tab_stat_cases(total_row_position = "above", label = "Casos") %>%
  tab_pivot())
```
 
#### Tablas de frecuencias relativas

Si en lugar de obtener casos (valores absolutos) queremos sacar valores porcentuales, el cambio es mínimo. Usaremos el comando `tab_stat_cpct()`para indicarlo. 

```{r fig.cap="Porcentajes de P31", out.width="80%", fig.asp=.75, fig.align="center", echo=TRUE}
as.datatable_widget(data %>% 
  tab_cells(P31) %>% 
  tab_stat_cpct(total_row_position = "above", label = "% casos") %>% 
  tab_pivot())
```

#### Tablas de absolutos y realativos (juntos)

Cuando deseamos hacer combinaciones de frecuencias y porcentajes, la filosofía de trabajo es muy parecida. En nuestro caso vamos a hacer algo muy típico. Aunque creo que resulta más sencillo leer cada estadístico en su tabla, hay ocasiones en las que la comparativa es muy necesaria y por tanto es necesario unir los estadísticos en la misma tabla.  Nótese la diferencia con el siguiente cuadro...

```{r fig.cap="Frecuencias y porcentajes de P31", out.width="80%", fig.asp=.75, fig.align="center", echo=TRUE}
as.datatable_widget(data %>% 
  tab_cells(P31) %>% 
  tab_stat_cases(total_row_position = "above", label = "Casos") %>%
  tab_stat_cpct(label = "% casos") %>%
  tab_pivot(stat_position = "inside_columns"))
```
 
Nótese el efecto introducido por el modificador de posición del cálculo. También ...

```{r fig.cap="Tablas con propiedades diferentes a estándar", out.width="80%", fig.asp=.75, fig.align="center", echo=TRUE}
as.datatable_widget(data %>% 
  tab_cells(P31) %>% 
  tab_stat_cases(total_row_position = "above", label = "Casos") %>% 
  tab_stat_cpct(label = "% casos") %>% 
  tab_pivot(stat_position = "outside_rows"))
```

O también ...

```{r fig.cap="Propiedades diferentes al estándar", out.width="80%", fig.asp=.75, fig.align="center", echo=TRUE}
as.datatable_widget(data %>% 
  tab_cells(P31) %>% 
  tab_stat_cases(total_row_position = "below", label = "Casos") %>% 
  tab_stat_cpct(label = "% casos") %>% 
  tab_pivot(stat_position = "inside_columns"))
```

### Variable de respuesta múltiple

Vamos a trabajar ahora con variables multi respuesta. Para trabajar con múltiples, debemos conocer en qué forma nos llegan en nuestro _input_. Por ejemplo, `SPSS` divide la variable múltiple en tantas variables simples (o dicotómicas binarias) como requiera para poder representar la multi respuesta. Por ejemplo, si tenemos una variable múltiple denominada P01, y el máximo número de respuestas (menciones) en el banco de datos es 3, al crear el `_dataframe_` se crean las variables P01_1, P01_2 y P01_3; es con estas variables con las que trabajamos. Cada una de estas variables puede tomar cualquiera de los valores codificados.

Para `expss`, la forma de indicar que un conjunto de campos forman una multi respuesta es muy simple anteponer `mrset_f()` al nombre del campo que vamos a usar. Debemos tener la precaución de que no haya variables en el banco de datos que comiencen por la misma raíz. Así, el campo de ejemplo sería `mrset_f(P01_)` y con eso procesaría las tres variables de forma conjunta. Alternativamente, podríamos usar también:

* mrset(P01_1 %to% P01_3) o también,
* mrset(P01_1,P01_2,P01_3)

Cualquiera de ellas sería también válida, pero nótese que en estas últimas listadas, es necesario saber donde empieza y acaba la múltiple y esto puede variar sobretodo si creamos los script antes de acabar el campo. Al acabar el campo, pudiera haber algún nuevo caso que tuviera más menciones que 3 y por tanto existirían también _4, _5 o, _n.

Como hemos indicado, no olvides que existe otra forma de trabajar las múltiples, utilizando variables dicotómicas o binarias (así es como están en nuestro banco de datos del CIS). En este caso, serviría todo lo afirmado anteriormente, pero en lugar de `mrset_f()`, usaríamos `mdset_f()`.

#### Tablas de frecuencias absolutas

Usaremos el campo P18C para procesar su información, que se localiza en el banco de datos desde P18C01 hasta P18C08.

```{r fig.cap="Frecuencias de P18", out.width="80%", fig.asp=.75, fig.align="center", echo=TRUE}
as.datatable_widget(data %>% 
  tab_cells(mdset_f(P18C)) %>% 
  tab_stat_cases(total_row_position="above", label="Casos") %>% 
  tab_pivot(stat_position="inside_columns"))
```

#### Tablas de frecuencias relativas

También se pueden, como es obvio, obtener porcentajes en las tablas marginales múltiples. A diferencia de cuando la variables es simple que todos los porcentajes suman 100, en las variables múltiples cada alternativa tiene un rango de 0 a 100, desde no ser elegida una opción en ningún registro del `_dataframe_`, hasta ser elegida por todos los registros. Usaremos nuevamente el campo P18C para procesar su información, que se localiza en el banco de datos desde P18C01 hasta P18C08.

```{r fig.cap="Frecuencias de P18", out.width="80%", fig.asp=.75, fig.align="center", echo=TRUE}
as.datatable_widget(data %>% 
  tab_cells(mdset_f(P18C)) %>%
  tab_stat_cpct(total_row_position="above", label="% casos") %>% 
  tab_pivot(stat_position="inside_columns"))
```

Pero vamos a introducir una nueva variación. En una múltiple, también pueden calcularse los resultados en lo que se llama `base respuestas`, donde sí suman 100% los porcentajes nuevamente, pero recuerda que el porcentaje hace referencia a las respuestas, no a los individuos. En este caso el script modifica el estadístico solicitado.

```{r fig.cap="Frecuencias de P18", out.width="80%", fig.asp=.75, fig.align="center", echo=TRUE}
as.datatable_widget(data %>% 
  tab_cells(mdset_f(P18C)) %>%
  tab_stat_cpct_responses(total_row_position="above", label="% casos") %>% 
  tab_pivot(stat_position="inside_columns"))
```

### Tablas combinadas

Con las múltiples también funciona el posicionamiento del estadístico casos -frecuencias- cuando combinamos los mismos (frecuencia y porcentaje) y podemos realizar las mismas variantes que antes.

Ubicar los cálculos dentro de las columnas ...

```{r fig.cap="Frecuencias y porcentajes de P18 (1)", out.width="80%", fig.asp=.75, fig.align="center", echo=TRUE}
as.datatable_widget(data %>% 
  tab_cells(mdset_f(P18C)) %>%  # o tab_cells(mdset(P18C01 %to% P18C08))
  tab_stat_cases(label ="Casos") %>% 
  tab_stat_cpct(label="% casos") %>% 
  tab_stat_cpct_responses(label="% respuestas") %>% 
  tab_pivot(stat_position="inside_columns"))
```

Préstese atención a las dos líneas de #Total, dado que las bases son diferentes (número de individuos y número de respuestas).

Podemos ubicar los cálculos dentro de las filas ...

```{r fig.cap="Frecuencias y porcentajes de P18 (2)", out.width="80%", fig.asp=.75, fig.align="center", echo=TRUE}
as.datatable_widget(data %>% 
  tab_cells(mdset_f(P18C)) %>%  # o tab_cells(mdset(P18C01 %to% P18C08))
  tab_stat_cases(label ="Casos") %>% 
  tab_stat_cpct(label="% casos") %>% 
  tab_stat_cpct_responses(label="% respuestas") %>% 
  tab_pivot(stat_position="inside_rows"))
```

Podemos ubicar los cálculos fuera de las columnas (igual a la anterior `inside...` porque no hay campo de columna) ...

```{r fig.cap="Frecuencias y porcentajes de P18 (3)", out.width="80%", fig.asp=.75, fig.align="center", echo=TRUE}
as.datatable_widget(data %>% 
  tab_cells(mdset_f(P18C)) %>%  # o tab_cells(mdset(P18C01 %to% P18C08))
  tab_stat_cases(label ="Casos") %>% 
  tab_stat_cpct(label="% casos") %>% 
  tab_stat_cpct_responses(label="% respuestas") %>% 
  tab_pivot(stat_position="outside_columns"))
```

Podemos ubicar los cálculos fuera de las filas ... nótese que la agrupación es diferente a la anterior con `inside_rows`

```{r fig.cap="Frecuencias y porcentajes de P18 (4)", out.width="80%", fig.asp=.75, fig.align="center", echo=TRUE}
as.datatable_widget(data %>% 
  tab_cells(mdset_f(P18C)) %>%  # o tab_cells(mdset(P18C01 %to% P18C08))
  tab_stat_cases(label ="Casos") %>% 
  tab_stat_cpct(label="% casos") %>% 
  tab_stat_cpct_responses(label="% respuestas") %>% 
  tab_pivot(stat_position="outside_rows"))
```
 
## Estadísticos

Hasta ahora hemos trabajado sólo con casos, pero ya hemos anticipado que al igual que con los recuentos de casos o frecuencias se puede trabajar con otros estadísticos como la suma, máximo, mínimo, media, mediana, error estándar y desviación típica. Vamos a ir viendo cómo se desarrollan estos cuadros.

### Estadísticos básicos

Recordemos que hasta ahora no hemos cruzado la información, solo estamos trabajando con lo que se denomina medidas marginales.Nuestro primer ejemplo es un caso típico, donde queremos obtener la media (`tab_stat_mean`), la desviación típica (`tab_stat_sd()`) y la base de cálculo, es decir el número de casos con valor (`tab_stat_valid_n()`) para el cálculo. 

Así, siguiendo la misma estructra de las tablas anteriores, redactamos el siguiente script:

```{r fig.cap="Estadísticos marginales de P3 (1)", out.width="80%", fig.asp=.75, fig.align="center", echo=TRUE}
as.datatable_widget(data %>% 
  tab_cells(P3) %>% 
  tab_stat_mean() %>% 
  tab_stat_sd() %>% 
  tab_stat_valid_n() %>% 
  tab_pivot())
```
 
No, no tienes por qué ver los nombres de los estadísticos en lengua inglesa. También aquí podemos jugar con la etiqueta (label).

```{r fig.cap="Estadísticos marginales de P3 (2)", out.width="80%", fig.asp=.75, fig.align="center", echo=TRUE}
as.datatable_widget(data %>% 
  tab_cells(P3) %>% 
  tab_stat_mean(label = "media") %>% 
  tab_stat_sd(label = "desviación") %>% 
  tab_stat_valid_n(label = "casos") %>% 
  tab_pivot())
```
 
Hagamos una nueva tabla con una pequeña variación, ahora vamos a poner los estadísticos en columnas.

```{r fig.cap="Estadísticos marginales de P3 (3)", out.width="80%", fig.asp=.75, fig.align="center", echo=TRUE}
as.datatable_widget(data%>%
  tab_cells(P3) %>% 
  tab_stat_mean(label = "media") %>% 
  tab_stat_sd(label = "desviación") %>% 
  tab_stat_valid_n(label = "casos") %>% 
  tab_pivot(stat_position = "inside_columns"))
```

`expss` tiene además la posibilidad de obtener estos tres cálculos, bastante habituales por cierto, con un solo comando: `tab_stat_mean_sd_n()` pudiendo añadir además etiquetas separadas.

```{r fig.cap="Estadísticos marginales de P3 (4)", out.width="80%", fig.asp=.75, fig.align="center", echo=TRUE}
as.datatable_widget(data %>% 
  tab_cells(P3) %>% 
  tab_stat_mean_sd_n(labels = c("media", "desviación", "casos")) %>% 
  tab_pivot())
```

### Otros estadísticos

Además de los estadísticos más básicos, otros que podemos añadir son el máximo, el mínimo, la mediana, el error estándar y la suma. Los unimos todos.

```{r fig.cap="Estadísticos marginales de P3 (5)", out.width="80%", fig.asp=.75, fig.align="center", echo=TRUE}
as.datatable_widget(data %>% 
  tab_cells(P3) %>% 
  tab_stat_mean(label = "Media") %>% 
  tab_stat_sd(label =  "Desviación") %>%  
  tab_stat_max(label = "Máximo") %>%  
  tab_stat_min(label = "Mínimo") %>%  
  tab_stat_median(label = "Mediana") %>%  
  tab_stat_se(label = "Error estándar") %>%  
  tab_stat_sum(label = "Suma") %>% 
  tab_pivot())
```

Nótese que no se han definido ni filas, ni columnas. Es el modificador de la posición de los estadísticos (stat_position) el que habilita la posición en una fila.

Del mismo modo, estos estadísticos pueden ubicarse en las columnas.

```{r fig.cap="Estadísticos marginales de P3 (6)", out.width="80%", fig.asp=.75, fig.align="center", echo=TRUE}
as.datatable_widget(data %>% 
  tab_cells(P3) %>% 
  tab_stat_mean(label = "Media") %>% 
  tab_stat_sd(label =  "Desviación") %>%  
  tab_stat_max(label = "Máximo") %>%  
  tab_stat_min(label = "Mínimo") %>%  
  tab_stat_median(label = "Mediana") %>%  
  tab_stat_se(label = "Error estándar") %>%  
  tab_stat_sum(label = "Suma") %>% 
  tab_stat_cases(label = "casos") %>%  
  tab_pivot(stat_position = "inside_rows"))
```

Hagamos finalmente una leve variación. Nótese que al utilizar `"|"` en la etiqueta del estadístico casos, hemos eliminado la columna intermedia y aparace todo como más compacto. Este será un recurso que utilizaremos en muchas ocasiones.

```{r fig.cap="Estadísticos marginales de P3 (7)", out.width="80%", fig.asp=.75, fig.align="center", echo=TRUE}
as.datatable_widget(data %>% 
  tab_cells(P3) %>% 
  tab_stat_mean(label = "Media") %>% 
  tab_stat_sd(label =  "Desviación") %>%  
  tab_stat_max(label = "Máximo") %>%  
  tab_stat_min(label = "Mínimo") %>%  
  tab_stat_median(label = "Mediana") %>%  
  tab_stat_se(label = "Error estándar") %>%  
  tab_stat_sum(label = "Suma") %>% 
  tab_stat_cases(label = "|") %>%  
  tab_pivot(stat_position = "inside_rows"))
```

## Conclusión

Creo que esta primera muestra de cómo procesar nuestra tabla de una única variable, es más que suficiente para colmar las expectativas más exigentes. Para aquellos que conozcan un poco más el funcionamiento de R, indicar que cada una de estas tablas, se puede almacenar como objeto sobre el que se puede trabajar. Este objeto es del tipo `etable` pero en el fondo es un objeto de tipo `_dataframe_` que por tanto puedes ser trabajado con comandos R estándar. Es de esta posibilidad de ser un _dataframe_ de donde deriva su capacidad de integración con otros paquetes como por ejemplo `highcharter` @highcharter que será uno de nuestros paquetes de referencia para gráficos. Para una presentación completa, véase la sección \@ref(tse08) para una presentación de gráficos a partir de `_dataframe_` o de tablas cruzadas - `_crosstab_` -. 

Hasta llegar ese momento, ahora en la siguiente sección \@ref(tse04) analizamos las tablas cruzadas.

<!--chapter:end:03-tablas.marginales.Rmd-->

# Tablas cruzadas {#tse04}

A diferencia de lo visto en la sección \@ref(tse03), en este epígrafe analizaremos como obtener cuadros resumen en los que existen variables en la cabecera, que determinan grupos o perfiles de análisis y existen variables en las filas, de las cuáles queremos conocer cómo se distribuyen sus alternativas de respuesta entre los diferentes perfiles o grupos que determinan las variables de columna. Al igual que sucedió con las tablas marginales, mostraremos poco a poco como trabajar con variables de respuesta simple, múltiple o con medidas estadísticas. Vamos a utilizar otros campos que se localizan en la base de datos del CIS (P3, P21A01, P21A02, P21A03, P31, P33). Aquí su resumen... -nótese que se ha incluido la función `suppressMessages()` para no publicar los mensajes de carga del paquete y datos-.

```{r fig.cap="Campos con los que trabajar", out.width="80%", fig.asp=.75, fig.align="center", echo=TRUE}
suppressMessages(library(expss)) #cargamos el paquete
suppressMessages(data <- read_spss("https://drive.google.com/uc?export=download&id=1JjevbQjzGc1NMyR7qf7bbvtbMyK8Pvhr")) #cargamos los datos
data$P3
data$P21A01
data$P21A02
data$P21A03
data$P31
data$P33
``` 

## Básica con variables simples

Las tablas que vamos a hacer a continuación, siempre son tablas en las que intervienen al menos dos variables. Una de las variables irá a columnas y la otra variable irá a filas. De ellas se calcularán las frecuencias absolutas o relativas y/o los estadísticos. Vamos a empezar sólo con el estadístico frecuencias, y posteriormente ya pasaremos a estadísticos como la media, suma, etc...

### De frecuencias, variable simple y sólo absolutos

Usaremos la variable P31 para las columnas, P33 en las celdas (de la que se hará el cálculo)y el estadístico a usar será el nº de casos.

```{r fig.cap="Cruce de estado civil por sexo", out.width="80%", fig.asp=.75, fig.align="center", echo=TRUE}
as.datatable_widget(data %>%
    tab_cells(P33) %>%
    tab_cols(total(), P31) %>%
    tab_stat_cases(total_row_position = "above", total_label = "Total") %>%
    tab_pivot())
```

### De frecuencias, variable simple, con porcentajes de columna

Al igual que hicimos con las tablas marginales vamos a repetir esta tabla, pero en porcentaje de columna (vertical).

```{r fig.cap="Cruce de estado civil por sexo, porcentaje de columna", out.width="80%", fig.asp=.75, fig.align="center", echo=TRUE}
as.datatable_widget(data %>%
    tab_cells(P33) %>%
    tab_cols(total(), P31) %>%
    tab_stat_cpct(total_row_position = "above", total_label = "Total") %>% # aquí señalo los porcentajes de columna
    tab_pivot())
```

### De frecuencias, variable simple, con porcentajes de fila

Al igual que hicimos con las tablas marginales vamos a repetir esta tabla, pero en porcentaje de fila (horizontal).

```{r fig.cap="Cruce de estado civil por sexo, porcentaje de fila", out.width="80%", fig.asp=.75, fig.align="center", echo=TRUE}
as.datatable_widget(data %>%
    tab_cells(P33) %>%
    tab_cols(total(), P31) %>%
    tab_stat_rpct(total_row_position = "above", total_label = "Total") %>% # aquí señalo los porcentajes de fila
    tab_pivot())
```

### De frecuencias, variable simple, con porcentajes total muestra

Al igual que hicimos con las tablas marginales vamos a repetir esta tabla, pero en porcentaje sobre el total de la muestra.

```{r fig.cap="Cruce de estado civil por sexo, porcentaje sobre el total de la muestra", out.width="80%", fig.asp=.75, fig.align="center", echo=TRUE}
as.datatable_widget(data %>%
    tab_cells(P33) %>%
    tab_cols(total(), P31) %>%
    tab_stat_tpct(total_row_position = "above", total_label = "Total") %>% # aquí señalo los porcentajes total muestra
    tab_pivot())
```

### Combinaciones de los anteriores

Vamos ahora a hacer combinaciones entre ellos. Advierto que cada vez se dificulta más la tabla en su lectura. Como dije inicialmente, me decanto más por tablas sencillas y con un sólo dato.

```{r fig.cap="Combinación de casos y porcentajes dentro de las columnas", out.width="80%", fig.asp=.75, fig.align="center", echo=TRUE}
as.datatable_widget(data %>%
    tab_cells(P33) %>%
    tab_cols(total(), P31) %>%
    tab_stat_cases(label = "Casos") %>%
    tab_stat_cpct(label = "% casos") %>%
    tab_pivot(stat_position = "inside_columns"))
```

Y la misma tabla pero con los estadísticos en las filas combinando frecuencia y porcentaje...

```{r fig.cap="Combinación de casos y porcentajes por tipo de estadístico en columnas", out.width="80%", fig.asp=.75, fig.align="center", echo=TRUE}
as.datatable_widget(data %>%
    tab_cells(P33) %>%
    tab_cols(total(), P31) %>%
    tab_stat_cases(label = "Casos") %>%
    tab_stat_cpct(label = "% casos") %>%
    tab_pivot(stat_position = "outside_columns"))
```

Y la misma tabla pero con los estadísticos en las filas combinando frecuencia y porcentaje...

```{r fig.cap="Combinación de casos y porcentajes dentro de las filas", out.width="80%", fig.asp=.75, fig.align="center", echo=TRUE}
as.datatable_widget(data %>%
    tab_cells(P33) %>%
    tab_cols(total(), P31) %>%
    tab_stat_cases(label = "Casos") %>%
    tab_stat_cpct(label = "% casos") %>%
    tab_pivot(stat_position = "inside_rows"))
```

Y la misma tabla pero con los estadísticos en las filas por bloque de tipo de estadístico...

```{r fig.cap="Combinación de casos y porcentajes, por tipo de estadístico en filas", out.width="80%", fig.asp=.75, fig.align="center", echo=TRUE}
as.datatable_widget(data %>%
    tab_cells(P33) %>%
    tab_cols(total(), P31) %>%
    tab_stat_cases(label = "Casos") %>%
    tab_stat_cpct(label = "% casos") %>%
    tab_pivot(stat_position = "outside_rows"))
```

## Básica con múltiples

Vamos a realizar ahora el mismo conjunto de tablas, pero en las filas, en lugar de una variable de tipo simple, vamos a utilizar una variable de tipo múltiple. Repetimos los cruces pero cambiamos las celdas donde ahora usaremos la variable P21A con la instrucción `tab_cells(mdset(P21A01 %to% P21A03))`.

### De frecuencias, variable múltiple y sólo absolutos

```{r fig.cap="Cruce de motivos guardar envases enteros por sexo", out.width="80%", fig.asp=.75, fig.align="center", echo=TRUE}
as.datatable_widget(data %>%
    tab_cells(mdset(P21A01 %to% P21A03)) %>%
    tab_cols(total(), P31) %>%
    tab_stat_cases(total_row_position = "above", total_label = "Total") %>%
    tab_pivot())
```

### De frecuencias, variable múltiple, con porcentajes de columna

Al igual que hicimos con las tablas marginales vamos a repetir esta tabla, pero en porcentaje de columna (vertical).

```{r fig.cap="Cruce de motivos guardar envases enteros por sexo, porcentaje de columna", out.width="80%", fig.asp=.75, fig.align="center", echo=TRUE}
as.datatable_widget(data %>%
    tab_cells(mdset(P21A01 %to% P21A03)) %>%
    tab_cols(total(), P31) %>%
    tab_stat_cpct(total_row_position = "above", total_label = "Total") %>% # aquí señalo los porcentajes de columna
    tab_pivot())
```

### De frecuencias, variable múltiple, con porcentajes de fila

Al igual que hicimos con las tablas marginales vamos a repetir esta tabla, pero en porcentaje de fila (horizontal).

```{r fig.cap="Cruce de motivos guardar envases enteros por sexo, porcentaje de fila", out.width="80%", fig.asp=.75, fig.align="center", echo=TRUE}
as.datatable_widget(data %>%
    tab_cells(mdset(P21A01 %to% P21A03)) %>%
    tab_cols(total(), P31) %>%
    tab_stat_rpct(total_row_position = "above", total_label = "Total") %>% # aquí señalo los porcentajes de fila
    tab_pivot())
```

### De frecuencias, variable múltiple, con porcentajes total muestra

Al igual que hicimos con las tablas marginales vamos a repetir esta tabla, pero en porcentaje sobre el total de la muestra.

```{r fig.cap="Cruce de motivos guardar envases enteros por sexo, porcentaje sobre el total de la muestra", out.width="80%", fig.asp=.75, fig.align="center", echo=TRUE}
as.datatable_widget(data %>%
    tab_cells(mdset(P21A01 %to% P21A03)) %>%
    tab_cols(total(), P31) %>%
    tab_stat_tpct(total_row_position = "above", total_label = "Total") %>% # aquí señalo los porcentajes total muestra
    tab_pivot())
```

### Combinaciones de los anteriores

Vamos ahora a hacer combinaciones entre ellos. Advierto que cada vez se dificulta más la tabla en su lectura. Como dije inicialmente, me decanto más por tablas sencillas y con un sólo dato.

```{r fig.cap="Combinación de casos y porcentajes dentro de las columnas", out.width="80%", fig.asp=.75, fig.align="center", echo=TRUE}
as.datatable_widget(data %>%
    tab_cells(mdset(P21A01 %to% P21A03)) %>%
    tab_cols(total(), P31) %>%
    tab_stat_cases(label = "Casos") %>%
    tab_stat_cpct(label = "% casos") %>%
    tab_pivot(stat_position = "inside_columns"))
```

Y la misma tabla pero con los estadísticos en las filas combinando frecuencia y porcentaje...

```{r fig.cap="Combinación de casos y porcentajes por tipo de estadístico en columnas", out.width="80%", fig.asp=.75, fig.align="center", echo=TRUE}
as.datatable_widget(data %>%
    tab_cells(mdset(P21A01 %to% P21A03)) %>%
    tab_cols(total(), P31) %>%
    tab_stat_cases(label = "Casos") %>%
    tab_stat_cpct(label = "% casos") %>%
    tab_pivot(stat_position = "outside_columns"))
```

Y la misma tabla pero con los estadísticos en las filas combinando frecuencia y porcentaje...

```{r fig.cap="Combinación de casos y porcentajes dentro de las filas", out.width="80%", fig.asp=.75, fig.align="center", echo=TRUE}
as.datatable_widget(data %>%
    tab_cells(mdset(P21A01 %to% P21A03)) %>%
    tab_cols(total(), P31) %>%
    tab_stat_cases(label = "Casos") %>%
    tab_stat_cpct(label = "% casos") %>%
    tab_pivot(stat_position = "inside_rows"))
```

Y la misma tabla pero con los estadísticos en las filas por bloque de tipo de estadístico...

```{r fig.cap="Combinación de casos y porcentajes, por tipo de estadístico en filas", out.width="80%", fig.asp=.75, fig.align="center", echo=TRUE}
as.datatable_widget(data %>%
    tab_cells(mdset(P21A01 %to% P21A03)) %>%
    tab_cols(total(), P31) %>%
    tab_stat_cases(label = "Casos") %>%
    tab_stat_cpct(label = "% casos") %>%
    tab_pivot(stat_position = "outside_rows"))
```

Recordamos que siempre con las múltiples existe la posibilidad de calcular los porcentajes con base respuesta en lugar de con base cuestionario (individuos). Para ello debes utilizar `tab_stat_cpct_responses()`.

## Básica con estadísticos

Del mismo modo que antes utilizábamos la tabla cruzada para obtener los casos de intersección entre las categorías de columna y las categorías de fila, ahora procederemos a hacer lo mismo pero con categorías en columnas y cálculo de estadísticos básicos en otro. En definitiva, calcular las medidas estadísticas para cada grupo creado por la variable que general las categorías.

### Cruce entre variable simple y dos estadísticos

Vamos a comenzar con las más simples, dos estadísticos (media y desviación) de una variable métrica (P3) calculados para una variable (P31) que genera dos categorías (hombre y mujer). Nótese el juego a realizar con más de 2 estadísticos con la ubicación de los mismos.

```{r fig.cap="Cruce entre variable y estadísticos", out.width="80%", fig.asp=.75, fig.align="center", echo=TRUE}
as.datatable_widget(data %>%
    tab_cells(P3) %>%
    tab_cols(total(), P31) %>%
    tab_stat_mean(label = "Media") %>%
    tab_stat_sd(label = "Desviación") %>% 
    tab_pivot())
```

Hagamos ahora su traspuesta, es decir ubiquemos en filas P31 y en columnas 

```{r fig.cap="Transposición de tabla", out.width="80%", fig.asp=.75, fig.align="center", echo=TRUE}
var_lab(data$P3)="Satisfacción"
as.datatable_widget(data %>%
    tab_cells(P3) %>%
    tab_rows(total(),P31) %>%
    tab_stat_mean(label = "Media") %>%
    tab_stat_sd(label = "Desviación") %>% 
    tab_pivot())
```

Recordemos que los estadísticos los podemos ir moviendo a nuestra necesidad para que se organicen de una forma u otra...

Dentro de las columnas ...

```{r fig.cap="Estadísticos dentro de columnas", out.width="80%", fig.asp=.75, fig.align="center", echo=TRUE}
as.datatable_widget(data %>%
    tab_cells(P3) %>%
    tab_cols(total(), P31) %>%
    tab_stat_mean(label = "Media") %>%
    tab_stat_sd(label = "Desviación") %>% 
    tab_pivot(stat_position = "inside_columns"))
```

Dentro de las filas ...

```{r fig.cap="Estadísticos dentro de las filas", out.width="80%", fig.asp=.75, fig.align="center", echo=TRUE}
as.datatable_widget(data %>%
    tab_cells(P3) %>%
    tab_cols(total(), P31) %>%
    tab_stat_mean(label = "Media") %>%
    tab_stat_sd(label = "Desviación") %>% 
    tab_pivot(stat_position = "inside_rows"))
```

Como columnas separadas o fuera de columnas ...

```{r fig.cap="Estadísticos separados en columnas", out.width="80%", fig.asp=.75, fig.align="center", echo=TRUE}
as.datatable_widget(data %>%
    tab_cells(P3) %>%
    tab_cols(total(), P31) %>%
    tab_stat_mean(label = "Media") %>%
    tab_stat_sd(label = "Desviación") %>% 
    tab_pivot(stat_position = "outside_columns"))
```

Como filas separadas o fuera de filas...

```{r fig.cap="Estadísticos separados en filas", out.width="80%", fig.asp=.75, fig.align="center", echo=TRUE}
as.datatable_widget(data %>%
    tab_cells(P3) %>%
    tab_cols(total(), P31) %>%
    tab_stat_mean(label = "Media") %>%
    tab_stat_sd(label = "Desviación") %>% 
    tab_pivot(stat_position = "outside_rows"))
```

Repitamos ahora estas cuatro últimas tablas, pero en lugar de con una variable que genera grupos y de ellos se calcula la medida estadística, vamos a hacerlo con un cruce de categorías (un campo en columnas y otro en filas) y que en esos cruces, se calcule la medida estadística. Por ejemplo esta tabla me permitiría saber la media de P3 en los hombres de 18 a 25 años.

```{r fig.cap="Uso de variable base (anidación)", out.width="80%", fig.asp=.75, fig.align="center", echo=TRUE}
as.datatable_widget(data %>%
    tab_cells(P3) %>%
    tab_cols(total(), P31) %>%
    tab_rows(P33) %>%
    tab_stat_mean(label = "Media") %>%
    tab_stat_sd(label = "Desviación") %>% 
    tab_pivot())
```

y juguemos con la posición del cálculo estadística que ahora sí arrojará cuatro configuraciones diferentes.

La primera con los estadísticos fuera de las filas...

```{r fig.cap="Filas con estadístico fuera de filas", out.width="80%", fig.asp=.75, fig.align="center", echo=TRUE}
as.datatable_widget(data %>%
    tab_cells(P3) %>%
    tab_cols(total(), P31) %>%
    tab_rows(P33) %>%
    tab_stat_mean(label = "Media") %>%
    tab_stat_sd(label = "Desviación") %>% 
    tab_pivot(stat_position = "outside_rows")) # por defecto, sin lo ponemos muestra esta opción
```

Los estadísticos dentro de las filas ...

```{r fig.cap="Filas con estadístico dentro de las filas", out.width="80%", fig.asp=.75, fig.align="center", echo=TRUE}
as.datatable_widget(data %>%
    tab_cells(P3) %>%
    tab_cols(total(), P31) %>%
    tab_rows(P33) %>%
    tab_stat_mean(label = "Media") %>%
    tab_stat_sd(label = "Desviación") %>% 
    tab_pivot(stat_position = "inside_rows"))
```

Los estadísticos dentro de las columnas ...
 
```{r fig.cap="Filas con estadísticos dentro de las columnas", out.width="80%", fig.asp=.75, fig.align="center", echo=TRUE}
as.datatable_widget(data %>%
    tab_cells(P3) %>%
    tab_cols(total(), P31) %>%
    tab_rows(P33) %>%
    tab_stat_mean(label = "Media") %>%
    tab_stat_sd(label = "Desviación") %>% 
    tab_pivot(stat_position = "inside_columns"))
```

Los estadísticos fuera de las columnas ...

```{r fig.cap="Filas con estadísticos fuera de las columnas", out.width="80%", fig.asp=.75, fig.align="center", echo=TRUE}
as.datatable_widget(data %>%
    tab_cells(P3) %>%
    tab_cols(total(), P31) %>%
    tab_rows(P33) %>%
    tab_stat_mean(label = "Media") %>%
    tab_stat_sd(label = "Desviación") %>% 
    tab_pivot(stat_position = "outside_columns"))
```

¿Hacemos lo mismo para una variable múltiple?

#### Tabulación cruzada (con cálculo estadístico) y múltiples

Vamos a comenzar con las más simples, dos estadísticos (media y desviación) de una variable métrica (P3) calculados para una variable múltiple (P4_1 a P4_3) que genera categorías. Nótese el juego a realizar con más de 2 estadísticos con la ubicación de los mismos.

```{r fig.cap="Cruce con múltiple y estadístico (1)", out.width="80%", fig.asp=.75, fig.align="center", echo=TRUE}
as.datatable_widget(data %>%
    tab_cells(P3) %>%
    tab_cols(total(), mdset(P21A01 %to% P21A03)) %>%
    tab_stat_mean(label = "Media") %>%
    tab_stat_sd(label = "Desviación") %>% 
    tab_pivot())
```

Hagamos ahora su traspuesta, es decir ubiquemos en filas P21A y en columnas P3.

```{r fig.cap="Cruce con múltiple y estadístico (2)", out.width="80%", fig.asp=.75, fig.align="center", echo=TRUE}
as.datatable_widget(data %>%
    tab_cells(P3) %>%
    tab_rows(total(),mdset(P21A01 %to% P21A03)) %>%
    tab_stat_mean(label = "Media") %>%
    tab_stat_sd(label = "Desviación") %>% 
    tab_pivot())
```

Recordemos que los estadísticos los podemos ir moviendo a nuestra necesidad para que se organicen de una forma u otra...

Dentro de columnas ...

```{r fig.cap="Cruce con múltiple y estadístico (3)", out.width="80%", fig.asp=.75, fig.align="center", echo=TRUE}
as.datatable_widget(data %>%
    tab_cells(P3) %>%
    tab_cols(total(), mdset(P21A01 %to% P21A03)) %>%
    tab_stat_mean(label = "Media") %>%
    tab_stat_sd(label = "Desviación") %>% 
    tab_pivot(stat_position = "inside_columns"))
```

Dentro de filas ...

```{r fig.cap="Cruce con múltiple y estadístico (4)", out.width="80%", fig.asp=.75, fig.align="center", echo=TRUE}
as.datatable_widget(data %>%
    tab_cells(P3) %>%
    tab_cols(total(), mdset(P21A01 %to% P21A03)) %>%
    tab_stat_mean(label = "Media") %>%
    tab_stat_sd(label = "Desviación") %>% 
    tab_pivot(stat_position = "inside_rows"))
```

Fuera de columnas ...

```{r fig.cap="Cruce con múltiple y estadístico (5)", out.width="80%", fig.asp=.75, fig.align="center", echo=TRUE}
as.datatable_widget(data %>%
    tab_cells(P3) %>%
    tab_cols(total(), mdset(P21A01 %to% P21A03)) %>%
    tab_stat_mean(label = "Media") %>%
    tab_stat_sd(label = "Desviación") %>% 
    tab_pivot(stat_position = "outside_columns"))
```

Fuera de filas ...

```{r fig.cap="Cruce con múltiple y estadístico (6)", out.width="80%", fig.asp=.75, fig.align="center", echo=TRUE}
as.datatable_widget(data %>%
    tab_cells(P3) %>%
    tab_cols(total(), mdset(P21A01 %to% P21A03)) %>%
    tab_stat_mean(label = "Media") %>%
    tab_stat_sd(label = "Desviación") %>% 
    tab_pivot(stat_position = "outside_rows"))
```

Repitamos ahora estas cuatro últimas tablas, pero en lugar de con una variable que genera grupos y de ellos se calcula la medida estadística, vamos a hacerlo con un cruce de categorías (un campo en columnas y otro en filas) y que en esos cruces, se calcule la medida estadística. Por ejemplo esta tabla me permitiría saber la media de P3 en los hombres de 18 a 25 años.

```{r fig.cap="Cruce con múltiple y estadístico (7)", out.width="80%", fig.asp=.75, fig.align="center", echo=TRUE}
as.datatable_widget(data %>%
    tab_cells(P3) %>%
    tab_cols(total(), mdset(P21A01 %to% P21A03)) %>%
    tab_rows(P33) %>%
    tab_stat_mean(label = "Media") %>%
    tab_stat_sd(label = "Desviación") %>% 
    tab_pivot())
```

y juguemos con la posición del cálculo estadística que ahora sí arrojará cuatro configuraciones diferentes. La primera con los estadísticos dentro de las filas es idéntica a la anterior (por defecto).

```{r fig.cap="Cruce con múltiple y estadístico (8)", out.width="80%", fig.asp=.75, fig.align="center", echo=TRUE}
as.datatable_widget(data %>%
    tab_cells(P3) %>%
    tab_cols(total(), mdset(P21A01 %to% P21A03)) %>%
    tab_rows(P33) %>%
    tab_stat_mean(label = "Media") %>%
    tab_stat_sd(label = "Desviación") %>% 
    tab_pivot(stat_position = "outside_rows")) # por defecto, sin lo ponemos muestra esta opción
```

Los estadísticos fuera de las filas ...

```{r fig.cap="Cruce con múltiple y estadístico (9)", out.width="80%", fig.asp=.75, fig.align="center", echo=TRUE}
as.datatable_widget(data %>%
    tab_cells(P3) %>%
    tab_cols(total(), mdset(P21A01 %to% P21A03)) %>%
    tab_rows(P33) %>%
    tab_stat_mean(label = "Media") %>%
    tab_stat_sd(label = "Desviación") %>% 
    tab_pivot(stat_position = "inside_rows"))
```

Los estadísticos dentro de las columnas ...

```{r fig.cap="Cruce con múltiple y estadístico (10)", out.width="80%", fig.asp=.75, fig.align="center", echo=TRUE}
as.datatable_widget(data %>%
    tab_cells(P3) %>%
    tab_cols(total(), mdset(P21A01 %to% P21A03)) %>%
    tab_rows(P33) %>%
    tab_stat_mean(label = "Media") %>%
    tab_stat_sd(label = "Desviación") %>% 
    tab_pivot(stat_position = "inside_columns"))
```

Los estadísticos fuera de las columnas ...

```{r fig.cap="Cruce con múltiple y estadístico (11)", out.width="80%", fig.asp=.75, fig.align="center", echo=TRUE}
as.datatable_widget(data %>%
    tab_cells(P3) %>%
    tab_cols(total(), mdset(P21A01 %to% P21A03)) %>%
    tab_rows(P33) %>%
    tab_stat_mean(label = "Media") %>%
    tab_stat_sd(label = "Desviación") %>% 
    tab_pivot(stat_position = "outside_columns"))
```

Bien, como has podido observar, el resultado no difiere cuando es múltiple a cuando es simple. Igual que hemos calculado la media y la desviación lo podemos hacer con otros estadísticos:

* media;
* desviación;
* máximo;
* mínimo;
* mediana;
* suma;
* error estándar;
* un caso especial que calcula media, desviación y el número de casos;
* y algunos otros que iremos mostrando para temas muy específicos.

<!--chapter:end:04-tablas.cruzadas.Rmd-->

# Tablas especiales {#tse05}

```{r include = FALSE}
if(!knitr:::is_html_output())
{
  options("width"=56)
  knitr::opts_chunk$set(tidy.opts=list(width.cutoff=56, indent = 2), tidy = TRUE)
  knitr::opts_chunk$set(fig.pos = "H")
}
```

En esta sección nos introducimos ya en la reproducción de las tablas y en algunas de las características que hacen muy especial a este paquete `expss`. Iremos introduciendo cada uno de los conceptos en el punto donde corresponda, dando la explicación de caso de uso, más que su explicación técnica. El usuario que quiera conocer más sobre ello, puede acudir a la guía de referencia de [todas las opciones de este paquete](https://rdrr.io/cran/expss/man/).

Aprenderemos a usar:

* `tab_subgroup()`, que permite hacer la tabla con una parte de los datos;
* `%nest%`, que permite anidar variables;
* `total_row_label()`, escribir textos libres en filas en la secuencia que se indique;
* `recode()`, recodificar en línea una variable (ver \@ref(recode) );
* `var_lab()`, modificar o asignar el texto de la variable;
* `val_lab()`, modificar o asignar los textos de los códigos;
* `drop_rc()`, borrar columnas o filas [drop_empty_rows() y drop_empty_cols()];
* `tab_sort_asc()`, para ordenar ascendente o descendente `tab_sort_desc()`;
* uso de `na_if`, para eliminar valores de niveles que no se desean computar en el cálculo de estadísticos;
* uso de criterios, para establecer sencillos mecanismos de filtro como complemento a otras funciones.


## Subgrupos (filtros en la tabla)

Una de las primeras cuestiones que nos surge en muchas ocasiones es trabajar con subgrupos de la información original, bien porque deseamos una tabla de sólo un parte de la muestra o bien porque buscamos comparar determinados elementos en una misma tabla. Veamos las posibilidades y las situaciones de uso.

En la siguiente tabla, filtramos la tabla para aquellos entrevistados que han declarado tener hijos `(P34  == 1)` por un lado y los que no popr otro `(P34 == 2)`. Para ello usamos la instrucción [`tab_subgroup()`](https://rdrr.io/cran/expss/man/tables.html) e introducimos también la instrucción [`tab_row_label()`](https://rdrr.io/cran/expss/man/tables.html) donde escribimos una fila con texto libre. Puedes consultar en la sección \@ref(tse08) como se escriben las condiciones y cuáles son los operadores que puede utilizar `expss` que además tiene algunos operadores propios que en esta misma sección incluiremos.

```{r fig.cap="Tabla con subgrupos", out.width="80%", fig.asp=.75, fig.align="center", echo=TRUE}
as.datatable_widget(data %>%
    tab_subgroup(P34 == 1) %>%
    tab_row_label("Entrevistado con hijos") %>%
    tab_cols(total(), P31) %>%
    tab_cells(P36) %>%
    tab_stat_cases() %>%
    tab_subgroup(P34 == 2) %>%
    tab_row_label("Entrevistado sin hijos") %>%
    tab_cols(total(), P31) %>%
    tab_cells(P36) %>%
    tab_stat_cases() %>%
    tab_pivot())
```
 
## Bases y/o con anidación

El concepto de base, no está contemplado como tal en `expss`, pero podemos utilizar las diferentes combinaciones de instrucciones para poder obtener el resultado deseado. Por ejemplo, si queremos trabajar con bases de la variable `P34` (entrevistado tiene hijos o no tiene hijos), y obtener réplica de la tabla para mabas categorías, lo podíamos hacer de la forma anterior, pero hay otra posibilidad y es utilizar la opción de añadir variables anidadas en filas o utilizar de forma simultánea las instrucciones `tab_rows()` y `tab_cells()`.

En esta tabla hay algunas cosas a reseñar. 

* En primer lugar `P34 == 1 | P34 == 2` es la condición de los casos con los que deseamos trabajar. No queremos contemplar los NC. Sí, se podría hacer también con el `na_if()`, pero creemos más clara esta opción. 
* Por otro lado, usamos `tab_cols()`, `tab_rows()` y `tab_cells()` lo que nos va a dar una publicación curiosa.
* Por último, los códigos de `P34`, redefinidos al principio del script, se muestran como en una primera columna, diferenciados claramente del resto. La variable en `tab_cells()`  de la que se calcula el estadístico (número de casos) se muestra como en una segunda columna. Hemos dejado fuera la opción de No contesta aunque ya anticipamos que no tenía ningún caso.

La función [`var_lab()`](https://rdrr.io/cran/expss/man/var_lab.html) permite asignar a una variable (data$P34) una lista (expresa con la función base de R denminada vector `c()`vector) de etiquetas donde el texto de la etiqueta va entrecomillado y el valor va igualado a la etiqueta. Es una forma muy simple a la par que práctica de etiquetar los valores de una variable.

```{r fig.cap="Tabla con bases 1", out.width="80%", fig.asp=.75, fig.align="center", echo=TRUE}
val_lab(data$P34) <- c("Sí" = 1, "No" = 2) 
as.datatable_widget(data %>%
    tab_subgroup(P34 == 1 | P34 == 2) %>%
    tab_cols(total(), P31) %>%
    tab_rows(P34) %>%
    tab_cells(P36) %>%
    tab_stat_cases() %>%
    tab_pivot())
```

Si nos gusta esta opción, se le puede añadir un modificador llamado `%nest%` que nos va a permitir anidar esas bases de cálculo. El modificador `%nest%` nos permite anidar los niveles o categorías de las variables. Cualquiera de las tablas anteriores puede ser anidada en tantos niveles como se desee con la opción `%nest%`. Para que la tabla no se alargue horizontalmente, reasignamos el texto extra de la variable denominada `P3bis`.

```{r fig.cap="Tabla con bases 2", out.width="80%", fig.asp=.75, fig.align="center", echo=TRUE}
data$P3bis <- recode(data$P3, 0:5 ~1, 6:10 ~2)
var_lab(data$P3bis) <- "Satisfacción"
val_lab(data$P3bis) <- c("1.Negativa" = 1, "2.Positiva" = 2)
val_lab(data$P34) <- c("1.Sí" = 1, "2.No" = 2)
as.datatable_widget(data %>%
    tab_subgroup(P34 == 1 | P34 == 2) %>%
    tab_cols(total(), P31) %>%
    tab_rows(P3bis %nest% P34) %>%
    tab_cells(P36) %>%
    tab_stat_cases(total_row_position = "none") %>%
    tab_pivot()) 
```

Si añadimos la instrucción `drop_rc()`, nótese la diferencia, pues desaparecen las filas y columnas sin información.

```{r fig.cap="Borrando filas y columnas vacías", out.width="80%", fig.asp=.75, fig.align="center", echo=TRUE}
data$P3bis <- recode(data$P3, 0:5 ~1, 6:10 ~2)
var_lab(data$P3bis) <- "Satisfacción"
val_lab(data$P3bis) <- c("1.Negativa" = 1, "2.Positiva" = 2)
val_lab(data$P34) <- c("1.Sí" = 1, "2.No" = 2)
as.datatable_widget(data %>%
    tab_subgroup(P34 == 1 | P34 == 2) %>%
    tab_cols(total(), P31) %>%
    tab_rows(P3bis %nest% P34) %>%
    tab_cells(P36) %>%
    tab_stat_cases(total_row_position = "none") %>%
    tab_pivot() %>% 
    drop_rc())
```

## Características avanzadas

Hagamos ahora lo mismo, pero combinando con un cálculo estadístico, por ejemplo nuevamente la media de P6C (atención recibida en consultas). Fíjemonos en la nueva aportación realizada. En el `tab_cells()`, se le está indicando que se trabaje con la variable P6C, pero que considere NA (valores nulos) todos aquello que sean mayores que 5. ¿Por qué? porque los códigos 8, no sabe y 9, no contesta, no queremos que entren en la media. Esto lo hacemos usando la función `na_if()`.

Los criterios más básicos son:

* igual -> `equals`, `eq`
* no igual -> `not_equals`, `neq`, `ne`
* mayor que -> `greater`, `gt`
* mayor o igual que -> `greater_or_equal`, `gte`, `ge`
* menor que -> `less`, `lt`
* menor o igual que -> `less_or_equal`, `lte`, `le`

Puede usarse la expresión larga o también cualquiera de las cortas. Por tanto, `na_if(P6C, gt(5))` significa trabaja con la variable `P6C` considerando `NA` los valores mayores que 5.
 
```{r fig.cap="Usando criterios", out.width="80%", fig.asp=.75, fig.align="center", echo=TRUE}
var_lab(data$P6C) <- "Valoración de la atención recibida"
data$P3bis <- recode(data$P3, 0:5 ~1, 6:10 ~2)
val_lab(data$P3bis) <- c("1.Negativa" = 1, "2.Positiva" = 2)
val_lab(data$P34) <- c("1.Sí" = 1, "2.No" = 2)
as.datatable_widget(data %>%
    tab_subgroup(P34 == 1 | P34 == 2) %>%
    tab_cols(total(), P31) %>%
    tab_rows(P3bis %nest% P34) %>%
    tab_cells(P6C= na_if(P6C, gt(5))) %>%
    tab_stat_mean() %>%
    tab_pivot())
```

Se puede anidar también en filas y columnas. Vamos a reducir a dos el nivel de anidación para que se lea bien la tabla.

```{r fig.cap="Anidando filas y columnas", out.width="80%", fig.asp=.75, fig.align="center", echo=TRUE}
data$P3bis <- recode(data$P3, 0:5 ~1, 6:10 ~2)
var_lab(data$P3bis) <- "Satisfacción"
val_lab(data$P3bis) <- c("1.Negativa" = 1, "2.Positiva" = 2)
val_lab(data$P34) <- c("1.Sí" = 1, "2.No" = 2)
as.datatable_widget(data %>%
    tab_cols(P31 %nest% P34) %>% 
    tab_rows(P3bis %nest% P33) %>%
    tab_stat_cases(total_row_position="none") %>%
    tab_pivot())
```

Como caso particular en muchos casos se requieren los subtotales de los niveles de anidación. Fíjate esta tabla y trata de ver las diferencias con la anterior.

```{r fig.cap="Anidando con subtotales", out.width="80%", fig.asp=.75, fig.align="center", echo=TRUE}
as.datatable_widget(data %>%
    tab_cols(P31 %nest%  list(total(),P34)) %>% 
    tab_rows(P36 %nest% P33) %>%
    tab_stat_cases() %>%
	tab_sort_desc() %>%
    tab_pivot())
```
 
Efectivamente, han aparecido más columnas porque hemos anidado la columna de totales a la primera variable en lugar de usar el campo, hemos usado una lista de campos y además hemos ordenado de forma descendente respecto de la columna de total.

Pues hasta aquí una nueva sección completada. Continuamos en la siguiente sección.

<!--chapter:end:05-tablas.especiales.Rmd-->

---
output: html_document
editor_options: 
  chunk_output_type: console
---
# Otras utilidades y tablas especiales {#tse06}

```{r include = FALSE}
if(!knitr:::is_html_output())
{
  options("width"=56)
  knitr::opts_chunk$set(tidy.opts=list(width.cutoff=56, indent = 2), tidy = TRUE)
  knitr::opts_chunk$set(fig.pos = 'H')
}
```

## Plan de códigos {#plan}

De forma muy sencilla, podemos obtener de nuestro fichero de datos lo que se dnemina el _codeplan_ [@mohler2008survey] o libro de códigos. `expss` tiene una orden directa para ello. Este libro de códigos nos permitirá de forma muy sencilla conocer de primera mano, con mayor o menor precisión, de forma exploratoria el contenido de nuestro banco de datos o en definitva la codificación que se ha utilizado.

Cuatro elementos de información son los más importantes en la creación de un plan de códigos [@mohler2008survey]:

* Conocer los textos de etiquetado de las variables en el cuestionario (ítem, escala de respuesta,instrucción del entrevistador, etc.) y conocer su caracterización en el archivo de datos a partir de su posición, longitud, nombre de campo,etc.;
* Propiedades del campo de datos numéricos (ancho, decimales, alfa (carácter),o numérico);
* Definición de los valores de escala de respuesta, filtros, rechazos, no sabe, no contesta...;
* Conocimiento de las variables de clasificación

La siguiente sintaxis nos permite alcanzar este objetivo con poco esfuerzo y como punto de partida para el siguiente punto de recodificación. 

```{r codeplan1}
as.datatable_widget(info(data))
```
Los modificadores de la función `info`, permiten ir desde el listado más completo (el mostrado) hasta la supresión de elementos como las frecuencias o los descriptivos básicos, al tiempo que agilizan su cálculo.

```{r codeplan2}
as.datatable_widget(info(data, stats = FALSE, frequencies = FALSE))
```

Conociendo el libro de códigos, accedamos al apartado de recodificación. Si quieres más información sobre el comendo `info`usa la función `help(topic = info)` o también `?expss:info`.

## Recodificar {#recode}

Aunque ya en la sección anterior anterior hicimos una breve incursión en el uso de la recodificación, el paquete `expss` dispone de una serie de opciones muy interesantes acerca de este funcionalidad que usamos mucho en nuestro trabajo diario.

La función `recode` cambia la codificación de una variable en el contexto que se utiliza. Puede ser usada también para reorganizar o consolidar los valores de una variable existente en función de las condiciones. El diseño de esta función está inspirada en la utilidad `RECODE` de SPSS. El usuario facilita una secuencia de recodificaciones proporcionadas en forma de fórmulas. 

Por ejemplo, `1:2 ~ 1` significa que todos los valores 1 y 2 se reemplazarán con 1. Cada valor se recodificará solo una vez, es decir, sea realiza una única 'pasada' por el registro empezando por el 1 y acabando por el N. 

Dos formas de uso:

* Si `recode()` se usa como funcionalidad diferenciada, en este proceso de asignación aquellos valores que no cumplan ninguna condición permanecen sin cambios. * Si `recode()`se usa dentro de una tabla, los valores de recodificación (...) que no cumplen ninguna condición serán reemplazados por NA. 

Se pueden usar valores o condiciones lógicas más sofisticadas y funciones como condición. Hay varias funciones especiales para su uso como criterios; para más detalles, consulte los criterios \@ref(criteria) en su sección \@ref(tse08). 

El uso común se parece a este: `recode(x, 1:2 ~ -1, 3 ~ 0, 4:5 ~ 1, 99 ~ NA)`. Se puede observar que a los valores originales 1 y 2 se les imputa un -1, al 3 un 0, y a los valores 4 y 5 se les imputa un 1, el 99 se convierte en NA (valor perdido).

Para más información, ver detalles y ejemplos a continuación. Te dejamos los ejemplos del autor que ilustran muy bien las posibilidades de esta funcionalidad. Se reproducen los ejemplos de recodificación extraídos del manual de SPSS. Se utilizan datos ficticios generados en línea.

```{r fig.cap='Ejemplos de recodificación 1', out.width='80%', fig.asp=.75, fig.align='center', echo=TRUE}
# RECODE V1 TO V3 (0=1) (1=0) (2, 3=-1) (9=9) (ELSE=SYSMIS)
v1  = c(0, 1, 2, 3, 9, 10) # se crea la variable
v1
recode(v1) = c(0 ~ 1, 1 ~ 0, 2:3 ~ -1, 9 ~ 9, TRUE ~ NA)
v1

# RECODE QVAR(1 THRU 5=1)(6 THRU 10=2)(11 THRU HI=3)(ELSE=0).
qvar = c(1:20, 97, NA, NA)
recode(qvar, 1 %thru% 5 ~ 1, 6 %thru% 10 ~ 2, 11 %thru% hi ~ 3, TRUE ~ 0)

# the same result
recode(qvar, 1 %thru% 5 ~ 1, 6 %thru% 10 ~ 2, ge(11) ~ 3, TRUE ~ 0)

# RECODE STRNGVAR ("A", "B", "C"="A")("D", "E", "F"="B")(ELSE=" "). 
strngvar = LETTERS
recode(strngvar, c("A", "B", "C") ~ "A", c("D", "E", "F") ~ "B", TRUE ~ " ")

# recode in place. Note that we recode only first six letters
recode(strngvar) = c(c("A", "B", "C") ~ "A", c("D", "E", "F") ~ "B")
strngvar

# RECODE AGE (MISSING=9) (18 THRU HI=1) (0 THRU 18=0) INTO VOTER. 
age = c(NA, 2:40, NA)
voter = recode(age, NA ~ 9, 18 %thru% hi ~ 1, 0 %thru% 18 ~ 0)
voter

# the same result with "%into%"
recode(age, NA ~ 9, 18 %thru% hi ~ 1, 0 %thru% 18 ~ 0) %into% voter2
voter2

# recode with adding labels
voter = recode(age, "Refuse to answer" = NA ~ 9,"Vote" = 18 %thru% hi ~ 1, "Don"t vote" = 0 %thru% 18 ~ 0)
voter

# recoding with labels
ol = c(1:7, 99)
var_lab(ol) = "Liking" #texto extra
val_lab(ol)  = c("Disgusting" =1, "Very Poor"=2, "Poor"=3, "So-so"=4, "Good"=5, "Very good"=6, "Excellent"=7, "Hard to say"=99) #etiquetas códigos
recode(ol, 1:3 ~ 1, 5:7 ~ 7, TRUE ~ copy, with_labels = TRUE)

# "rec" is a shortcut for recoding with labels. Same result: 
rec(ol, 1:3 ~ 1, 5:7 ~ 7, TRUE ~ copy)

# another method of combining labels
recode(ol, 1:3 ~ 1, 5:7 ~ 7, TRUE ~ copy, with_labels = TRUE, new_label = "range")

# example with from/to notation

# RECODE QVAR(1 THRU 5=1)(6 THRU 10=2)(11 THRU HI=3)(ELSE=0).
list_from = list(1 %thru% 5, 6 %thru% 10, ge(11), TRUE)
list_to = list(1, 2, 3, 0)
recode(qvar, from_to(list_from, list_to))


list_from = list(NA, 18 %thru% hi, 0 %thru% 18)
list_to = list("Refuse to answer" = 9, "Vote" = 1, "Don"t vote" = 0)
voter = recode(age, from_to(list_from, list_to))
voter

# "ifs" examples
a = 1:5
b = 5:1
a
b
ifs(b>3 ~ 1)                       # c(1, 1, NA, NA, NA)
ifs(b>3 ~ 1, TRUE ~ 3)             # c(1, 1, 3, 3, 3)
ifs(b>3 ~ 1, a>4 ~ 7, TRUE ~ 3)    # c(1, 1, 3, 3, 7)
ifs(b>3 ~ a, TRUE ~ 42)            # c(1, 2, 42, 42, 42)

```

El `recode()`puede ser utilizado como funcionalidad separada y con asignación o dentro de la definición de una variable. Por ejemplo:

```{r fig.cap="Ejemplos de recodificación 2", out.width="80%", fig.asp=.75, fig.align="center", echo=TRUE}
v1 <- c(1,2,3,2,1,2,3,4,5,6,5,4,3,2,1)
v2 <- v1
v1
v2
v1 <- recode(v1, 1:5 ~ 1, 6:10 ~ 2)
mean(v1,na.rm=TRUE)
mean(recode(v2, 1:5 ~ 1, 6:10 ~ 2), na.rm=TRUE)
v1
v2
```
Nótese que la diferencia estriba en que mientras que al finalizar el proceso `v1` tiene solo valores 1 y 2 recodificados, `v2` (copia de v1) mantiene los valores originales.

## Cuadros

En ocasiones es interesante reproducir algún tipo de cuadro que se ha presentado al entrevistado (baterías de ítems, cuadros, rejillas o grids, grillas o tablas de ítems, son sinónimos). Por ejemplo la pregunta `P9` del cuestionario nos presenta un cuadro en el que hay hasta 7 ítems valorados de 1 a 10, con los valores 98 y 99 como `NS` y `NC` respectivamente. Así que vamos a procesar esas tablas como cuadros.

Nuestro script es el siguiente ...

```{r fig.cap="Cuadros de baterías", out.width="80%", fig.asp=.75, fig.align="center", echo=TRUE}
as.datatable_widget(data %>% 
    tab_cells(P901 %to% P907) %>% 
    tab_stat_cpct() %>%
    tab_pivot())
```

Esta sería la salida lógica que damos a la tabla. Sin embargo utilizando algunos pequeños trucos, podemos presentarlo así.

```{r fig.cap="Cuadros de baterías modificado", out.width="80%", fig.asp=.75, fig.align="center", echo=TRUE}
val_lab(data$P901) <- c("1"=1, "2"=2, "3"=3, "4"=4, "5"=5, "6"=6, "7"=7, "8"=8, "9"=9, "10"=10, "N.S."=98, "N.C."=99)
val_lab(data$P902) <- c("1"=1, "2"=2, "3"=3, "4"=4, "5"=5, "6"=6, "7"=7, "8"=8, "9"=9, "10"=10, "N.S."=98, "N.C."=99)
val_lab(data$P903) <- c("1"=1, "2"=2, "3"=3, "4"=4, "5"=5, "6"=6, "7"=7, "8"=8, "9"=9, "10"=10, "N.S."=98, "N.C."=99)
val_lab(data$P904) <- c("1"=1, "2"=2, "3"=3, "4"=4, "5"=5, "6"=6, "7"=7, "8"=8, "9"=9, "10"=10, "N.S."=98, "N.C."=99)
val_lab(data$P905) <- c("1"=1, "2"=2, "3"=3, "4"=4, "5"=5, "6"=6, "7"=7, "8"=8, "9"=9, "10"=10, "N.S."=98, "N.C."=99)
val_lab(data$P906) <- c("1"=1, "2"=2, "3"=3, "4"=4, "5"=5, "6"=6, "7"=7, "8"=8, "9"=9, "10"=10, "N.S."=98, "N.C."=99)
val_lab(data$P907) <- c("1"=1, "2"=2, "3"=3, "4"=4, "5"=5, "6"=6, "7"=7, "8"=8, "9"=9, "10"=10, "N.S."=98, "N.C."=99)

as.datatable_widget(data %>% 
    tab_cells("|"=unvr(P901)) %>% 
    tab_stat_cpct(label=var_lab(P901), total_row_position="none") %>%
    tab_stat_mean_sd_n(label="P901") %>%
    tab_cells("|"=unvr(P902)) %>% 
    tab_stat_cpct(label=var_lab(P902), total_row_position="none") %>%
    tab_stat_mean_sd_n(label="P901") %>%
    tab_cells("|"=unvr(P903)) %>% 
    tab_stat_cpct(label=var_lab(P903), total_row_position="none") %>%
    tab_stat_mean_sd_n(label="P901") %>%
    tab_cells("|"=unvr(P904)) %>% 
    tab_stat_cpct(label=var_lab(P904), total_row_position="none") %>%
    tab_stat_mean_sd_n(label="P901") %>%
    tab_cells("|"=unvr(P905)) %>% 
    tab_stat_cpct(label=var_lab(P905), total_row_position="none") %>%
    tab_stat_mean_sd_n() %>%
    tab_cells("|"=unvr(P906)) %>% 
    tab_stat_cpct(label=var_lab(P906), total_row_position="none") %>%
    tab_stat_mean_sd_n() %>%
    tab_cells("|"=unvr(P907)) %>% 
    tab_stat_cpct(label=var_lab(P907), total_row_position="none") %>%
    tab_stat_mean_sd_n() %>%
    tab_pivot(stat_position="inside_columns") %>% 
    t())
```

¿Qué hemos hecho?, hemos limpiado el texto de la variable utilizando la función `"|"=unvr()` y ese mismo texto extra de la variable `var_lab()` se lo hemos asignado al estadístico con `label`. De esta forma el resultado es el que ves. Desafortunadamente, hay un pequeño bug del que está informado el autor, de no poder situar la media y/o la desviación típica en la misma fila. Para hacerlo hay que unir dos tablas. Como esperamos esté resuelto en breve, no damos la solución por no complicar más la salida.

## Ponderación

Otro de los aspectos fundamentales en la investigación de mercados es la ponderación. Lo primero que debemos entender es el propio concepto de ponderación. En definitiva, es hacer que cada registro (% de casos o casos o estadísticos) en lugar de contar como un caso (frecuencia 1), cuente como n casos, siendo n el valor de otro campo (indicado en `weight()` -peso-) del marco de datos. Este peso ha sido obtenido por un procedimiento llamado equilibraje o _raking_ @biemer2008weighting.

Aquí muestro la tabla, sin ponderar ...

```{r fig.cap="Uso de ponderación", out.width="80%", fig.asp=.75, fig.align="center", echo=TRUE}
as.datatable_widget(data %>% 
    tab_cols(total(),P3 ) %>%
    tab_cells(mdset(P21A01 %to% P21A03)) %>% 
    tab_stat_cpct() %>% 
    tab_pivot())
```

El estudio del CIS que estamos trabajando tiene una variable denominada PESO que contiene el coeficiente de ponderación para adaptarse a la población real española. Aquí dejamos la anterior tabla, pero ponderada. Véase las diferencias entre todos los valores.

```{r fig.cap="Uso de ponderación con multi respuesta", out.width="80%", fig.asp=.75, fig.align="center", echo=TRUE}
as.datatable_widget(data %>% 
    tab_cols(total(),P3 ) %>%
    tab_weight(PESO) %>%
    tab_cells(mdset(P21A01 %to% P21A03)) %>% 
    tab_stat_cpct() %>% 
    tab_pivot())
```

Aunque este manual se refiere únicamente a tablas, es bastante habitual obtener en toda ponderación la denominada eficiencia de la misma. Este análisis lo realizamos utilizando R como calculadora. Podemos hacer una análisis de la variable PESO y de su eficiencia.

```{r fig.cap="Cálculo de la eficiencia del peso", out.width="80%", fig.asp=.75, fig.align="center", echo=TRUE}
mean.peso <- mean(data$PESO, na.rm=TRUE)
sd.peso <- sd(data$PESO, na.rm=TRUE)
ratio <- sd.peso/mean.peso
eficiencia <- (1/(1+(ratio^2)))*100
eficiencia <- round(eficiencia,2)
```

Puede observarse como la eficiencia de la ponderación es del `r eficiencia` %. 

## Subtotales y NETS

Otra de las funcionalidades básicas en nuestro trabajo de análisis es el uso de subtotales y/o netos. El objetivo de ambas funciones es reagrupar los códigos de una determinada variable, permitiendo observar acumulados de frecuencia. El paquete `expss` hace una diferenciación entre ambos que mostraremos seguidamente. 

### Subtotales

El uso de **`tab_subtotal_rows`** o **`tab_subtotal_cols`** o **`tab_subtotal_cells`** añade subtotales a un conjunto de categorías de la variable sobre la que se aplique. Si se introduce un texto se utilizará el mismo, pero si no se añade la palabra TOTAL. Debes tener en cuenta que si las agrupaciones de categorías que realizas se solapan, también se solaparán los recuentos en el cálculo de subtotales. Estos subtotales pueden ser aplicados a las variables del banco de datos.

```{r fig.cap="Uso de subtotales 1", out.width="80%", fig.asp=.75, fig.align="center", echo=TRUE}
val_lab(data$P901) <- c("1"=1, "2"=2, "3"=3, "4"=4, "5"=5, "6"=6, "7"=7, "8"=8, "9"=9, "10"=10, "N.S."=98, "N.C."=99)
as.datatable_widget(data %>% 
    tab_cols(total(), P31) %>% 
    tab_cells(P901) %>% 
    tab_subtotal_cells("NO SATISFACTORIO"= 1:5, 6:8,  "SATISFACTORIO"=9:10) %>% 
    tab_stat_cpct() %>% 
    tab_pivot())
```

Nótese que en el ejemplo han sido utilizados textos en solo dos de los tres subtotales que se han calculado. Si no se introduce texto, es cuando se usa la palabra TOTAL. Nótese también que por defecto los subtotales aparecen detrás del último valor del grupo, detrás del 5, detrás del 8 y detrás del 10. Existe la posibilidad de determinar mediante una instrucción como deben aparecer. El modificador o parámetro `position` con posibles valores `"below"`, `"above"`, `"top"` o `"bottom"` indicarán el lugar donde se deben imprimir. Del mismo modo, se puede forzar a que sea el propio sistema quien determine las etiquetas del subtotal generado. Así el modificador `prefix` puede determinar un prefijo para todas las etiquetas siendo `TOTAL` el valor por defecto, y también el modificador `new_label`que permite indicar si la etiqueta se construye usando las etiquetas originales respondiendo a `all`que la usa todas, `range` la primera y la última, `first` la primera del grupo y `last` la última del grupo. 

Con todo ello, podríamos modificar nuestro ejemplo a:

```{r fig.cap="Uso de subtotales 2", out.width="80%", fig.asp=.75, fig.align="center", echo=TRUE}
val_lab(data$P901) <- c("1"=1, "2"=2, "3"=3, "4"=4, "5"=5, "6"=6, "7"=7, "8"=8, "9"=9, "10"=10, "N.S."=98, "N.C."=99)
as.datatable_widget(data %>% 
    tab_cols(total(), P31) %>% 
    tab_cells(P901) %>% 
    tab_subtotal_cells(1:5, 6:8, 9:10, position = "bottom", prefix ="SUBT", new_label="range") %>% 
    tab_stat_cpct() %>% 
    tab_pivot())
```

### NETS

El uso de **`tab_net_rows()`** o **`tab_net_cols()`** o **`tab_net_cells()`** sustituye por netos (subtotales) a un conjunto de categorías de la variable sobre la que se aplique. Si se introduce un texto se utilizará el mismo, pero si no es así, se añade la palabra TOTAL. 

Debes tener en cuenta que si las agrupaciones de categorías que realizas se solapan, también se solaparán los recuentos en el cálculo de netos. Estos netos pueden ser aplicados a las variables del banco de datos. La terminología de NET suele ser muy aplicada en las variables de tipo múltiple, para agrupar conceptos similares. En nuestro ejemplo por mantener la coherencia con el uso de `subtotal` lo aplicaremos sin embargo con una variable numérica de valoración.

```{r fig.cap="Uso de nets 1", out.width="80%", fig.asp=.75, fig.align="center", echo=TRUE}
val_lab(data$P901) <- c("1"=1, "2"=2, "3"=3, "4"=4, "5"=5, "6"=6, "7"=7, "8"=8, "9"=9, "10"=10, "N.S."=98, "N.C."=99)
as.datatable_widget(data %>% 
    tab_cols(total(), P31) %>% 
    tab_cells(P901) %>% 
    tab_net_cells("NO SATISFACTORIO"= 1:5, 6:8,  "SATISFACTORIO"=9:10) %>% 
    tab_stat_cpct() %>% 
    tab_pivot())
```

Nótese que en el ejemplo han sido utilizados textos en solo dos de los tres `nets` que se han calculado. Si no se introduce texto, es cuando se usa la palabra TOTAL. Nótese también que por defecto los subtotales aparecen detrás del último valor del grupo, detrás del 5, detrás del 8 y detrás del 10. Existe la posibilidad de determinar mediante una instrucción como deben aparecer. El modificador o parámetro `position` con posibles valores `"below", "above", "top" o "bottom"` indicarán el lugar donde se deben imprimir. 

Del mismo modo, se puede forzar a que sea el propio sistema quien determine las etiquetas del subtotal generado. Así el modificador `prefix` puede determinar un prefijo para todas las etiquetas siendo `TOTAL` el valor por defecto, y también el modificador `new_label`que permite indicar si la etiqueta se construye usando las etiquetas originales respondiendo a `all`que la usa todas, `range` la primera y la última, `first` la primera del grupo y `last` la última del grupo. Podríamos modificar nuestro ejemplo a:

```{r fig.cap="Uso de nets 2", out.width="80%", fig.asp=.75, fig.align="center", echo=TRUE}
val_lab(data$P901) <- c("1"=1, "2"=2, "3"=3, "4"=4, "5"=5, "6"=6, "7"=7, "8"=8, "9"=9, "10"=10, "N.S."=98, "N.C."=99)
as.datatable_widget(data %>% 
    tab_cols(total(), P31) %>% 
    tab_cells(P901) %>% 
    tab_net_cells(1:5, 6:8, 9:10, position = "top", prefix ="NET", new_label="range") %>% 
    tab_stat_cpct() %>% 
    tab_pivot())
```

Puedes preguntarte el porqué del `position` si en un NET realmente se eliminan los códigos originales, pero esto no tiene por qué ser así. Tanto el `subtotal` como el `net` tienen la posibilidad de variar este hecho utilizando el modificar `add` con valores TRUE o FALSE que mantendría o no los códigos originales. No obstante, en nuestro ejmplo como hay valores no agrupados (NS y NC) aquí la posición sí es relevante.

## _Top_ y _Bottom_

Por último otra utilidad no menos importante que las anterior y no menos utilizada. El cálculo del _top_ y el _bottom_ de una escala. Para ello, vamos a basarnos en  algo que ya hemos visto en las tablas anteriores, la recodificación y el cómo reutilizamos la posibilidad de las variables múltiples.

Planteemos una situación en la que deseamos que la variable P901 se muestre de forma segmentada y conjuntamente cada uno de sus valores. Llamamos TOP a la agrupación en una columna o fila de tabla de aquellas categorías con las valoraciones más altas (por ejemplo 9 y 10) y BOTTOM a las más bajas (por ejemplo 1,2,3,4,5 y 6 o 1:6 como sabemos). Queremos que en la tabla se muestre ambas categorías. ¿Como la hacemos? Este es script.

```{r fig.cap="Uso de top y bottom", out.width="80%", fig.asp=.75, fig.align="center", echo=TRUE}
val_lab(data$P901) <- c("1"=1, "2"=2, "3"=3, "4"=4, "5"=5, "6"=6, "7"=7, "8"=8, "9"=9, "10"=10, "N.S."=98, "N.C."=99)
as.datatable_widget(data %>% 
    tab_cols(total(), P31) %>% 
    tab_cells(P901) %>% 
    tab_subtotal_cells("Bottom"= 1:6, "Top"=9:10) %>% 
    tab_stat_cpct() %>% 
    tab_pivot())
```

Controlando más algunos aspectos de la publicación de la tabla ...

```{r fig.cap="Uso de top y bottom arriba", out.width="80%", fig.asp=.75, fig.align="center", echo=TRUE}
val_lab(data$P901) <- c("1"=1, "2"=2, "3"=3, "4"=4, "5"=5, "6"=6, "7"=7, "8"=8, "9"=9, "10"=10, "N.S."=98, "N.C."=99)
as.datatable_widget(data %>% 
    tab_cols(total(), P31) %>% 
    tab_cells(P901) %>% 
    tab_subtotal_cells("Bottom"= 1:6, "Top"=9:10, position ="bottom") %>% 
    tab_stat_cpct(total_row_position="below") %>% 
    tab_cells(na_if(P901, gt(10))) %>% 
    tab_stat_mean() %>%
    tab_pivot())
```

Con subtotales abajo...

```{r fig.cap="Uso de top y bottom abajo", out.width="80%", fig.asp=.75, fig.align="center", echo=TRUE}
val_lab(data$P901) <- c("1"=1, "2"=2, "3"=3, "4"=4, "5"=5, "6"=6, "7"=7, "8"=8, "9"=9, "10"=10, "N.S."=98, "N.C."=99)
as.datatable_widget(data %>% 
    tab_cols(total(), P31) %>% 
    tab_cells(P901) %>% 
    tab_subtotal_cells("Bottom"= 1:6, "Top"=9:10, position ="below") %>% 
    tab_stat_cpct(total_row_position="below") %>% 
    tab_cells(na_if(P901, gt(10))) %>% 
    tab_stat_mean() %>%
    tab_pivot())
```

O también ...

```{r fig.cap="Uso de top y bottom sin los valores agrupados", out.width="80%", fig.asp=.75, fig.align="center", echo=TRUE}
val_lab(data$P901) <- c("1"=1, "2"=2, "3"=3, "4"=4, "5"=5, "6"=6, "7"=7, "8"=8, "9"=9, "10"=10, "N.S."=98, "N.C."=99)
as.datatable_widget(data %>% 
    tab_cols(total(), P31) %>% 
    tab_cells(P901) %>% 
    tab_net_cells("Top"=9:10, "Bottom" = 1:6) %>% 
    tab_stat_cpct(total_row_position="below") %>% 
    tab_cells(na_if(P901, gt(10))) %>% 
    tab_stat_mean() %>%
    tab_pivot())
```

Así pues en esta última tabla, hemos combinado algunas de las funcionalidades especiales y avanzadas de `expss` de forma conjunta y trabajando en la misma dirección.

### Gráficos base

Dejamos además aquí esta `pildora adictiva`. ¿Un gráfico? Repetimos la tabla pero la guardamos en una objeto llamada `tab`. Limpiamos además aquello que no nos interesa.

```{r fig.cap="Uso de gráfico highcharter 1", out.width="80%", fig.asp=.75, fig.align="center", echo=TRUE}
tab <- data %>% 
    tab_cols("|"=unvr(P31)) %>% 
    tab_cells("|"=unvr(P901)) %>% 
    tab_net_cells("Detractores" = 1:6, "Neutrales" = 7:8, "Promotores" = 9:10) %>% 
    tab_stat_cpct(total_row_position="none") %>% 
    tab_pivot()
tab <- as.data.frame(tab)
tab
```

Fíjate como hemos limpiado la tabla. Hemos usado un recurso que para gráficos será muy válido, el uso de `unvr()` que elimina del uso de la variable los textos extra. Del mismo modo con el `"|"=` hemos anulado cualquier tipo de texto suplementario que se pudiera añadir. Cuando hacemos una tabla y la guardamos, es un objeto `etable` que ya describimos anteriormente. Como la mayoría de los paquetes gráficos usan `_dataframe_`, lo transformamos a eso.

Una vez hecho esto, hacemos el gráfico. Podemos elegir diferentes sistemas de gráficos, pero los más habituales e interactivos son `highcharter`(paquete escrito sobre Highcharts) y/o `plotly`. Como paquete estático, `ggplot` sería la mejor solución.

```{r fig.cap="Uso de gráfico highcharter 2", out.width="80%", fig.asp=.75, fig.align="center", echo=TRUE}
suppressMessages(library(highcharter, quietly=TRUE))
highchart() %>%
    hc_xAxis(categories=tab$row_labels) %>% 
    hc_add_series(data=tab, type="column", hcaes(x=row_labels, y= Hombre), name="hombre") %>% 
    hc_add_series(data=tab, type="column", hcaes(x=row_labels, y= Mujer), name="mujer")
```

Alternativamente, si queremos utilizar el paquete `plotly` ...

```{r fig.cap="Uso de gráfico con plotly", out.width="80%", fig.asp=.75, fig.align="center", echo=TRUE}
Grupo <- factor(tab$row_labels, levels=tab$row_labels)
plot_ly(tab, x = ~Grupo, y = ~Hombre, type = "bar", name = "Hombre") %>% 
    add_trace(y = ~Mujer, name = "Mujer") %>% 
    layout(yaxis = list(title = "Count"))
```

<!--chapter:end:06-otras.Rmd-->

# Pruebas inferenciales {#tse07}

```{r include = FALSE}
if(!knitr:::is_html_output())
{
  options("width"=56)
  knitr::opts_chunk$set(tidy.opts=list(width.cutoff=56, indent = 2), tidy = TRUE)
  knitr::opts_chunk$set(fig.pos = "H")
}
```

Cuando trabajamos con tablas de contingencia es muy frecuente que sintamos la necesidad de tener que inferir acerca de la dependencia de las categorías analizadas o de las diferencias entre los grupos analizados. Siempre que nuestras variables cumplan con los requisitos que para ellas cada prueba establece (normalidad, homoscedasticidad, linealidad y en algunos casos independencia), podremos aplicar las pruebas inferenciales típicas con tablas de contingencia en la investigación básica:

* Chi<sup>2</sup> en su variantes de tabla y celda [@art001; @amon2009estadistica];
* Pruebas z de contraste proporciones [@amon2009estadistica; @glass1986metodos];
* Prueba t de contraste de medias [@amon2009estadistica; @glass1986metodos].

Para todas ellas`expss` nos da la oportunidad de hacer los cálculos desde el propio script de realización de la tabla y/o desde una instrucción posterior a la realización de la tabla. Pasemos por ello a explicar, no tanto el cometido de estas pruebas, sino el como llevarlas adelante.

## Prueba de dependencia

El contraste Chi<sup>2</sup> de Pearson es una prueba estadística no paramétrica, que compara las frecuencias realmente obtenidas con las frecuencias esperadas que son las que corresponderían a cada celda o casilla de la tabla si su valor se ajustase a cualquier norma teórica previamente adoptada; en nuestro caso, una distribución proporcional de frecuencias normales @siegel1995estadistica. En definitiva, “se está calculando un índice acerca de la distancia entre lo real y lo esperado” @manzano1995.

El valor numérico de esta prueba se obtiene como:

<div style="text-align: center">![](data/embim12.png)</div>

* f<sub>o</sub>, serán las frecuencias observadas en el experimento o muestra
* f<sub>e</sub>, serán las frecuencias esperadas teóricamente

Las frecuencias esperadas se calculan con ...

<div style="text-align: center">![](data/embim13.png)</div>

* f<sub>o</sub>, serán las frecuencias observadas en el experimento o muestra
* f<sub>e</sub>, serán las frecuencias esperadas teóricamente
* N, es el número de efectivos muestrales

Esta prueba se suele utilizar (entre muchas otras posibilidades) para contrastar la hipótesis nula que los resultados obtenidos de una muestra no son significativos con relación a la población total, o bien como prueba de dependencia para comprobar la existencia o no de asociación entre las variables. En este caso, la prueba indica la existencia de asociación pero no la cuantifica @manzano1995.

### De una tabla

La prueba Chi<sup>2</sup> puede hacerse a nivel de tabla, lo que muestra la relación de dependencia entre las categorías @siegel1995estadistica. Hagamos una primera aproximación con dos tablas de contingencia muy sencillas, pero que nos mostrarán como se indica que la relación de dependencia existe o no existe. La función [`tab_last_sig_cases`](https://www.rdocumentation.org/packages/expss/versions/0.10.5/topics/tab_significance_options) realiza la prueba base de R denominada [`chisq.test`](https://www.rdocumentation.org/packages/stats/versions/3.6.2/topics/chisq.test).

Nótese el uso de "|"=unvr() para utilizar la variable sin que se publiquen los texto extra de la misma.

```{r fig.cap="Prueba Chi<sup>2</sup> en tabla", out.width="80%", fig.asp=.75, fig.align="center", echo=TRUE, warning=FALSE}
as.datatable_widget(data %>% 
    tab_cols(total(), "|"=unvr(P31)) %>% 
    tab_cells("|"=unvr(P2)) %>% 
    tab_stat_cases() %>% 
    tab_last_sig_cases() %>%
    tab_pivot())

as.datatable_widget(data %>% 
    tab_cols(total(), "|"=unvr(P31)) %>% 
    tab_cells("|"=unvr(P33)) %>% 
    tab_stat_cases() %>% 
    tab_last_sig_cases() %>%
    tab_pivot())
```

En la primera tabla se muestra la relación entre la variable  P31 (sexo) y la P2 (valoración del sistema sanitario). Nótese que en la tabla se ha usado una línea tras el cálculo de los casos con la función `tab_last_sig_cases()` que indica que se debe realizar la prueba Chi<sup>2</sup> a la relación. Esta línea provoca que en la tabla surja una nueva fila sobre el `#Total` con el texto `#Chi-squared p-value` que indica que se realiza la prueba al 5% (0,05). Si el resultado es el rechazo de la hipótesis nula de independencia se muestra un `<0,05 (warn.)`, pero si no se puede rechazar la hipótesis nula de independencia sale sólo `(warn.)` En la tabla no se publica el resultado de la prueba, pero podemos hacerlo siguiendo el formato estándar.

```{r fig.cap="Prueba Chi<sup>2</sup>", out.width="80%", fig.asp=.75, fig.align="center", echo=TRUE, warning=FALSE}
table(data$P2, data$P31)
chisq.test(table(data$P2, data$P31))
table(data$P33, data$P31)
chisq.test(table(data$P33, data$P31))
```

Donde se puede observar que para la primera relación, no se puede rechazar la hipótesis de independencia pues el valor de significación es p-value > 0,05 (0.2015); para la segunda relación, sí podemos rechazar la hipótesis nula de independencia, puesto que p-value < 0,05 (por tanto, existe dependencia).

### De una celda de una tabla

Particularmente de interés es la prueba Chi<sup>2</sup> de celda. A diferencia de la anterior, en este caso se realiza la prueba para cada celda de la tabla en particular. La lógica de la misma sería comparar un valor de la tabla (una celda), con el resto de su fila, el resto de su columna, y el resto de la muestra. De este forma, indicamos que valores son significativos en la tabla, aquellos que cabría contemplar con un interés especial.

Para obtener la tabla y la subsiguiente prueba se utilizará una nueva función denominada `tab_last_sig_cell_chisq()` sobre la misma estructura ya conocida de tabla. Nótese que en este caso, para la prueba se requiere utilizar los porcentajes en lugar de los casos, para que el cálculo sea el oportuno. Chi<sup>2</sup> es una prueba muy sensible al tamaño de la muestra.


```{r fig.cap="Prueba Chi<sup>2</sup> de celda", out.width="80%", fig.asp=.75, fig.align="center", echo=TRUE, warning=FALSE}
as.datatable_widget(data %>% 
    tab_cols(total(), "|"=unvr(P31)) %>% 
    tab_cells("|"=unvr(P2)) %>% 
    tab_stat_cpct() %>% 
    tab_last_sig_cell_chisq() %>%
    tab_pivot())

as.datatable_widget(data %>% 
    tab_cols(total(), "|"=unvr(P31)) %>% 
    tab_cells("|"=unvr(P33)) %>% 
    tab_stat_cpct() %>% 
    tab_last_sig_cell_chisq() %>%
    tab_pivot())
```
La salida es muy clara. Con los símbolos mayor y menor, se marcan aquellas celdas que son significativamente mayores (>) o menores (<) que lo esperado y por tanto son las que direccionan las relaciones de dependencia que en la tabla se producen. 

## Pruebas de diferencias

Un conjunto diferentes de pruebas son aquellas cuya hipótesis de partida se basa en determinar si existen diferencias entre los porcentajes (prueba z) o las medias (prueba t) de dos grupos independientes en la muestra extraídos de la misma población. Desarrollamos ambas pruebas en las líneas siguientes.

### Porcentajes (prueba z)

Asumiendo las hipótesis necesarias para poder trabajar con estadística paramétrica (normalidad, homoscedasticidad, linealidad y en algunos casos independencia), la función `tab_last_sig_cpct` realiza z-test entre columnas de porcentajes derivadas de la aplicación de `tab_stat_cpct`. Los resultados son calculados con la misma fórmula que con la función base de R [`prop.test`](https://www.rdocumentation.org/packages/stats/versions/3.6.2/topics/prop.test) y sin la corrección de continuidad.

Obsérvese la diferencia de concepto; mientras que la prueba Chi<sup>2</sup> de celda realiza la prueba comparando con el marginal total, la `prueba z` realiza esa comparación entre los grupos formados por las columnas, a los que se suele llamar perfiles. De esta forma considera la independencia de los grupos muestrales entre sí. 

Para utilizar esta funcionalidad el script sería el siguiente:

```{r  fig.cap="Prueba Z en tabla", out.width="80%", fig.asp=.75, fig.align="center", echo=TRUE, warning=FALSE}
as.datatable_widget(data %>% 
    tab_cols(total(), "SEXO"=unvr(P31)) %>% 
    tab_cells("|"=unvr(P2)) %>% 
    tab_stat_cpct() %>% 
    tab_last_sig_cpct() %>%
    tab_pivot())

as.datatable_widget(data %>% 
    tab_cols(total(), "SEXO"=unvr(P31)) %>% 
    tab_cells("|"=unvr(P33)) %>% 
    tab_stat_cpct() %>% 
    tab_last_sig_cpct() %>%
    tab_pivot())
```
En nuestro caso, los resultados son muy semejantes a los vistos con Chi<sup>2</sup> de celda, porque la variable elegida para las columnas es dicotómica, es decir, con sólo dos opciones de respuesta, exhaustivas y mutuamente excluyentes. No sería así si la variable de columnas presentara más de 2 perfiles.

La lectura de esta prueba es la siguiente. El porcentaje de casos en en el grupo B (mujeres) de la tabla 1, es significativamente más elevado que el de hombres, determinándose esta diferencia con una significación del 5%. En el caso de la tabla 2, el porcentaje de hombres solteros es significativamente diferente del porcentaje de mujeres solteras. Del mismo modo y a la inversa el porcentaje de mujeres viudas entrevistadas en la muestra es significativamente mayor que el de hombres.

Por tanto, creemos que queda claro el funcionamiento de la prueba. Se etiquetan las columnas y se muestra la letra de la columna con la que se presentan diferencias positivas junto al valor porcentual. La prueba se realiza para cada celda, pero siempre comparando con las celdas que tiene a su derecha o izquierda en la misma fila (no con el total).

### Medias (prueba t)

Al igual que en el apartado anterior el objetivo es determinar si existen o no diferencias entre los grupos que se están testando, teniendo como hipótesis nula que las medias de los grupos son iguales. En nuestro ejemplo, hemos tomado la de auto clasificación ideológica (recodificando las posiciones de 1 a 10, izquierda a derecha respectivamente) creando grupos de izquierda, centro y derecha. Sobre esta tabla que calcula las medias, se aplica el estadístico `tab_stat_mean_sd_n()`que contiene todos los datos requeridos para el cálculo del valor t y se le indica que requerimos el test con `tab_last_sig_means()`. Se asume que los grupos son independientes, que existe normalidad y que las varianzas de los grupos son iguales.

```{r fig.cap="Prueba t en tabla", out.width="80%", fig.asp=.75, fig.align="center", echo=TRUE, warning=FALSE}
as.datatable_widget(data %>% 
    tab_cols(total(), P29=recode(P29, "Izquierda" = 1:4 ~1, "Centro" = 5:6 ~2, "Derecha" = 7:10 ~ 3, TRUE ~ NA)) %>% 
    tab_cells(P3=na_if(P3, gt(10))) %>% 
    tab_stat_mean_sd_n() %>% 
    tab_last_sig_means() %>%
    tab_pivot())
```

Se puede observar que la salida es igual a la de la prueba Z. Se rotulan las columnas con las letras A, B ... y las que sean necesarias, y posteriormente se muestra (por defecto) la letra de la columna con la que la media de la columna en la que se ubica la media presenta diferencias positivas (es mayor). Podemos por tanto observar, que en la población de la que se ha extraído la muestra, se puede afirmar que la media de satisfacción con el funcionamiento del sistema sanitario español es más alta en los individuos cuya auto clasificación ideológica es del grupo de derecha (C), que en la izquierda (A) y en el centro (B). No entramos a valorar si la distribución de grupos es la correcta o no, en cuanto al significado general. Se ha hecho una distribución acorde al significado de los números en sí mismos.

Existen ocasiones en las que esta prueba, se requiere publicar para un conjunto de ítems que forman parte de una misma batería. En estos casos, no es tan interesante publicar las desviaciones y las bases, por lo que podemos formular de esta forma el script.

```{r fig.cap="Prueba t con sólo medias", out.width="80%", fig.asp=.75, fig.align="center", echo=TRUE, warning=FALSE}
as.datatable_widget(data %>% 
    tab_cols(total(), P29=recode(P29, "Izquierda" = 1:4 ~1, "Centro" = 5:6 ~2, "Derecha" = 7:10 ~ 3, TRUE ~ NA)) %>% 
    tab_cells(P901=na_if(P901, gt(10))) %>% 
    tab_stat_mean_sd_n() %>% 
    tab_last_sig_means(keep="means") %>%
    tab_cells(P902=na_if(P902, gt(10))) %>% 
    tab_stat_mean_sd_n() %>% 
    tab_last_sig_means(keep="means") %>%
    tab_cells(P903=na_if(P903, gt(10))) %>% 
    tab_stat_mean_sd_n() %>% 
    tab_last_sig_means(keep="means") %>%
    tab_cells(P904=na_if(P904, gt(10))) %>% 
    tab_stat_mean_sd_n() %>% 
    tab_last_sig_means(keep="means") %>%
    tab_cells(P905=na_if(P905, gt(10))) %>% 
    tab_stat_mean_sd_n() %>% 
    tab_last_sig_means(keep="means") %>%
    tab_cells(P906=na_if(P906, gt(10))) %>% 
    tab_stat_mean_sd_n() %>% 
    tab_last_sig_means(keep="means") %>%
    tab_cells(P907=na_if(P907, gt(10))) %>% 
    tab_stat_mean_sd_n() %>% 
    tab_last_sig_means(keep="means") %>%
    tab_pivot())
```
Se puede observar que la instrucción `keep="means"` lo que ha conseguido es eliminar la publicación de la desviación y la media del cuadro presentado. De este modo el resultado es más compacto y da una visión general de la batería de ítems

## Parámetros posibles en las pruebas de significación

De manera conjunta exponemos aquí diferentes parámetros que modifican el comportamiento por defecto de las cuatro pruebas anteriormente vistas. Algunos son de uso en todas ellas y otros específicos de alguna de las pruebas.

* `sig_level`, numérico; nivel de significación, por defecto es igual a 0.05.
* `min_base`, numérico; el test de significación se realizará si ambas columnas tienes bases mayores o iguales al valor determinado que por defecto es 2.
* `delta_cpct`, numérico; delta mínimo entre el porcentaje para el que marcamos diferencias significativas (en puntos porcentuales); de forma predeterminada, es igual a cero. Tenga en cuenta que, por ejemplo, para una diferencia mínima de 5 por ciento de puntos, delta_cpct debe ser igual a 5, no 0.05.
* `delta_means`, numérico; delta mínimo entre medias para las que marcamos diferencias significativas: por defecto es igual a cero.
* `correct`, lógico (TRUE o FALSE), indica si aplicar corrección de continuidad al calcular el estadístico Chi<sup>2</sup> de prueba para tablas de 2 por 2. Solo para `significance_cases` y `significance_cell_chisq`. Para más detalles ver [chisq.test](https://www.rdocumentation.org/packages/stats/versions/3.6.2/topics/chisq.test). TRUE por defecto.
* `compare_type`  tipo de comparación por columnas. Por defecto, es subtabla (variable por variable). otras posibilidades son `"first_column"`, `"adjusted_first_column"` y `"previous_column"`; podemos realizar varios test simultáneamente.
* `bonferroni`  lógico; FALSE por defecto; uso del ajuste de Bonferroni por cada fila.
* `subtable_marks`, carácter; una de las siguientes opciones: `"greater"`, `"both"` or `"less"`; por defecto se marcan sólo valores cuya significación sea mayor (`"greater"`) que alguna otra columna. Para `significance_cell_chisq` por defecto es `"both"`. podemos modificar este comportamiento usando las otras alternativas.
* `inequality_sign`  logical. FALSE if subtable_marks is "less" or "greater". Should we show > or < before significance marks of subtable comparisons.
* `sig_labels` character vector labels for marking differences between columns of subtable.
* `sig_labels_previous_column`  a character vector with two elements. Labels for marking a difference with the previous column. First mark means ’lower’ (by default it is v) and the second means greater (^).
* `sig_labels_first_column`  a character vector with two elements. Labels for marking a difference with the first column of the table. First mark means ’lower’ (by default it is -) and the second means ’greater’ (+).
* `sig_labels_chisq`  a character vector with two labels for marking a difference with row margin of the table. First mark means ’lower’ (by default it is <) and the second means ’greater’ (>). Only for significance_cell_chisq.
* `keep`, carácter. Una o más de las siguientes `"percent"`, `"cases"`, `"means"`, `"bases"`, `"sd"` o `"none"`. Este argumento determina qué estadísticos permanecerán en la tabla después del marcado de significación.
* `row_margin`, carácter. Uno de los valores `"auto"` (predeterminado), `"sum_row"` o `"first_column"`. Si es `"auto"`, tratamos de encontrar la columna total en la subtabla por `total_column_marker`. Si la búsqueda falla, usamos la suma de cada fila como total de filas. Con la opción `"sum_row"` siempre sumamos cada fila para obtener margen. Tenga en cuenta que en este caso el resultado de las variables de respuesta múltiple en la cabecera puede ser incorrecta. Con la opción `"first_column"` usamos la tabla primera columna como margen de fila para todas las subtablas. En este caso, el resultado de las subtablas con bases incompletas puede ser incorrecto. Solo para `significance_cell_chisq`.
* `total_marker`, carácter. Total de fila marcado en la tabla. `" # "` por defecto.
* `total_row`, entero/carácter. En el caso de varios totales por subtabla, es un número o nombre de fila total para el cálculo de significación.
* `digits`, un número entero que indica cuántos dígitos después del separador decimal se mostrarán en la tabla final.
* `na_as_zero`, lógico; FALSE por defecto. ¿Deberíamos tratar a NA como cero casos?
* `var_equal`,  lógico; variable que indica si se deben tratar las dos varianzas como iguales. Para más detalles ver [t.test](https://www.rdocumentation.org/packages/stats/versions/3.6.2/topics/t.test).
* `mode`, carácter; `"replace" (default)` o `"append"`. En el primer caso, el resultado anterior en la secuencia del cálculo de la tabla se reemplazará con el resultado de la prueba de significación. En el segundo caso, el resultado de la prueba de significación se agregará a la secuencia del cálculo de la tabla.
* `label`, carácter;  etiqueta para la estadística en tab_*. Ignorado si el modo es igual a `replace`.
* `total_column_marker`, carácter; marca para la columna de totales en las subtablas. "#" por defecto.
* `x`  table (class etable): result of cro_cpct with proportions and bases for significance_cpct, result of cro_mean_sd_n with means, standard deviations and valid N for significance_means, and result of cro_cases with counts and bases for significance_cases.
* `cases_matrix`, matriz numérica con recuentos de tamaño filas*columnas.
* `row_base`, vector de números con las bases de fila.
* `col_base`, vector de números con las bases de columna.
* `total_base`, número con la base total.

### Algunos ejemplos de uso de los parámetros

Cambio del nivel de significación de la prueba y eliminación de las filas con las frecuencias, entre otros...

```{r fig.cap="Prueba Chi<sup>2</sup> con significación al 99%", out.width="80%", fig.asp=.75, fig.align="center", echo=TRUE, warning=FALSE}
as.datatable_widget(data %>% 
    tab_cols(total(), "|"=unvr(P31)) %>% 
    tab_cells("|"=unvr(P33)) %>% 
    tab_stat_cases() %>% 
    tab_last_sig_cases(sig_level = 0.01, correct = TRUE, keep="bases", mode="replace", label="***") %>%
    tab_pivot())
```

## Conclusión

Hasta aquí llegamos. Hemos presentado de forma muy breve y simplificada como podemos aprovechar toda la potencia de `expss` en nuestros scripts. Lo importante es practicar y practicar. No dejes de acudir a las viñetas de ayuda de [Gregory Demin](http://gdemin.github.io/expss/) acerca de como usar el paquete y como generar nuevas tablas. Nosotros tan sólo hemos sentado las bases. Combinando las tablas con lenguaje R se puede llegar a conseguir casi todo.

* [manual PDF de EXPSS](https://cran.r-project.org/web/packages/expss/expss.pdf)
* [material de ayuda, ejemplos](https://cran.r-project.org/web/packages/expss/vignettes/tables-with-labels.html)
* [uso de etiquetas en R](https://cran.r-project.org/web/packages/expss/vignettes/labels-support.html)

<!--chapter:end:07-pruebas.Rmd-->

# Visualización gráfica {#tse08}

```{r include = FALSE}
if(!knitr:::is_html_output())
{
  options("width"=56)
  knitr::opts_chunk$set(tidy.opts=list(width.cutoff=56, indent = 2), tidy = TRUE)
  knitr::opts_chunk$set(fig.pos = 'H')
}
```

Los gráficos son hoy en día uno de los elementos más potentes sobre los que descansa la analítica de datos [@kuan2015learning] . En muchos casos es el *único* instrumento utilizado para comunicar los resultados de una investigación. Nuestra elección para ilustrar esta parte del documento es `highcharter`. Este paquete es un _wrapper_ del software `highcharts` y ha sido desarrollado para ser utilizado en R. `highcharts`es un librería de JavaScript muy conocida y una de las más utilizadas en el desarrollo de páginas web.

En esta sección vamos a enseñarte como aprovechar toda la potencia visual de los gráficos, utilizando como vehículo de propulsión el paquete `highcharter` desarrollado por [@highcharter]. 

## `highcharter`, introducción

El paquete `highcharter` es un contenedor - _wrapper_ - para la biblioteca [Highcharts](https://www.highcharts.com/) que incluye funciones de acceso directo para trazar objetos gráficos de R. Es una biblioteca de gráficos que ofrece numerosos tipos de gráficos con una sintaxis de configuración muy simple y repetitiva. Suponemos que ya estás acostumbrado a trabajar con R, por lo que no te resultará complicado seguir los pasos aquí indicados.

Este documento fundamentalmente se ha dedicado a trabajar con tablas cruzadas, ese elemento que tanta productividad produce y que tan claras deja las visualizaciones; sin embargo la mayoría de librerías de gráficos trabajan con _dataframe_, por lo que deberemos hacer una simplificación de la tabla para trabajar con ella de forma adecuada. No sería necesario, pero como digo te ayudará a ver con otros ojos la simplicidad de `highcharter`. Comenzaremos trabajando con la base de la librería y en el desarrollo de la sección indicaremos como trabajar con tablas cruzadas.

Lo primero que debemos saber, es que hay unos nombres de campo (por defecto) que pueden existir en el _dataframe_, y cuya presencia facilita enormemente el trabajo con los gráficos. Mira esta tabla de datos. En esta tabla son muy importantes los nombres de los campos, porque su existencia hace que, sin apenas código, el gráfico ya visualiza de acuerdo a nuestra necesidad.

```{r echo=FALSE, message=FALSE, warning=FALSE}
knitr::kable(df)
```

A saber ...

* `x`, que contiene la secuencia de datos
* `y`, que contiene el dato que habitualmente representaremos en el eje de las Y (ordenadas)
* `z`, dimensiona el valor de y cuando se quieren usar tres dimensiones de representación (por ejemplo cuando queremos que en un _scatter_ la burbuja sea tan grande como una tercera variable)
* `low`, valor más bajo para la categoría
* `high`, valor más alto para la categoría
* `value`, valor de la categoría
* `name`, que contiene lo nombres o textos de las categorías; suele ser lo que queremos que aparezca en el eje de las X (abscisas)
* `color`, código del color en hexadecimal que modificará el color por defecto de la serie (puede ser también el nombre del color)
* `from`, importante en gráficos especiales de tipo organización o donde hay una relación "desde"
* `to`, igual al anterior, importante en gráficos especiales de tipo organización o donde hay una relación "hasta"
* `weight`, utilizado en algunos gráficos a los que nos referiremos después.

Debemos saber que `highcharteR`nos permite utilizar dos tipos diferentes de funciones que a continuación explicamos, auqnue nos centramos en la primera de ellas. La segunda es una forma de acortar la primera.

* `highchart()`
* `hchart()`

### highchart()

Esta función crea un gráfico _highchart_ usando un _widget_. El _widget_ creado se puede representar en páginas HTML generadas a partir de _R Markdown_ y con características de interactividad. Si estás familiarizado con el paquete `ggplot2`, es una función similar a `ggplot()` del paquete donde se define un objeto ggplot base sobre el cual se pueden agregar más capas geométricas. De manera similar, una vez que se define la función `highchart()`, se pueden agregar más elementos _highchart_ encima de ella, como si fueran capas superpuestas.

### hchart()

Por otro lado, hchart () es una función genérica para dibujar diferentes gráficos sobre la marcha. El gráfico resultante es un objeto highchart, por lo que puede seguir modificando con la API implícita. Si estás familiarizado con `ggplot2`, esta función es similar a `qplot()`. Comencemos nuestro viaje de visualización interactiva con los diseño más sencillos.

## Mi primer gráfico

Para trabajar con los gráficos, utilizaremos la siguiente tabla de datos, muy sencilla, propuesta por el autor del paquete, que además contiene los nombres de campo estandarizados que nos van a ayudar a de forma muy sencilla a generar nuestras visualizaciones.


## Gráfico de barras 

Un diagrama de barras (o columnas) muestra la relación entre una variable numérica (y) y una categórica (name). Cada entidad de la variable categórica se representa como una barra. El tamaño de la barra representa su valor numérico. A veces se describe como una forma aburrida de visualizar información. Sin embargo, probablemente sea la forma más eficaz de mostrar este tipo de datos.

Vamos a mostrar las dos formas de hacer este gráfico y entenderás la información que te aportábamos en la descripción anterior de las funciones posibles para hacer un gráfico.

```{r fig.cap='Gráfico inicial de barras', out.width='80%', fig.asp=.75, fig.align='center', echo=TRUE, warning=FALSE, message=FALSE, comment = NA}
require(highcharter) # solicitamos la carga de highcharter si no lo está ya

df1 <- select(df, name, y, color) # seleccionamos las columnas name e y, por un motivo que más adelante explicamos

highchart() %>% 
    hc_chart(type = 'bar') %>% 
    hc_xAxis(categories = df1$name) %>%
    hc_add_series(df1)
```

¿Por qué hemos seleccionado estos tres campos? Ya hemos hablado de la importancia del nombre de los campos en highcharter. El gráfico de barras que es un estándar, es transformado a un gráfico de barras low-high si se localizan estos nombres de campo, low y high en el _dataframe_ de trabajo, y el _dataframe_ original `df` los tenía. Por tanto si repetimos este gráfico, pero con el _dataframe_ original con esos dos campos, veremos que variación se produce.

```{r fig.cap='Gráfico de barras de tabla original', out.width='80%', fig.asp=.75, fig.align='center', echo=TRUE, warning=FALSE, message=FALSE, comment = NA}
highchart() %>% 
    hc_chart(type = 'bar') %>% 
    hc_xAxis(categories = df$name) %>% 
    hc_add_series(df)
```

La barra no se traza completa sino que se traza con origen en el valor más bajo (`low`), y con final en el valor más alto (`high`). Sin embargo si acercas el ratón a una barra, verás que el valor listado se corresponde con el campo `y` del _dataframe_.

Vamos a realizar unas pequeñas variaciones muy habituales en los gráficos.

### Cambiar el nombre de la serie de datos

La primera modificación sería añadir el nombre de la serie al gráfico ...

```{r fig.cap='Gráfico de barras, adición nombre serie', out.width='80%', fig.asp=.75, fig.align='center', echo=TRUE, warning=FALSE, message=FALSE, comment = NA}
highchart() %>% 
    hc_chart(type = 'bar') %>% 
    hc_xAxis(categories = df1$name) %>% 
    hc_add_series(df1, name='Fruits')
```

Podemos observar, como en ángulo inferior derecho de la ventana del gráfico aparece la palabra _fruits_ que hemos escrito como nombre del conjunto de datos, que en realidad es una única serie.

### Añadir créditos al gráfico

Añadir un pie de gráfico con créditos del creador del mismo.

```{r fig.cap='Gráfico de barras, adición de créditos', out.width='80%', fig.asp=.75, fig.align='center', echo=TRUE, warning=FALSE, message=FALSE, comment = NA}
highchart() %>% 
    hc_chart(type = 'bar') %>% 
    hc_xAxis(categories = df1$name) %>% 
    hc_add_series(df1, name='Fruits') %>%
    hc_credits(enabled=TRUE, text='InvestigaOnline.com', href ='https://www.investigaonline.com')
```

Ver ángulo inferior derecho, justo debajo del nombre de la serie. Posibilidad de hacer clic y llegar hasta la URL indicada.

### Añadir el valor del dato al elemento (datalabels)

```{r fig.cap='Gráfico de barras, adición de valores', out.width='80%', fig.asp=.75, fig.align='center', echo=TRUE, warning=FALSE, message=FALSE, comment = NA}
highchart() %>% 
    hc_chart(type = 'bar') %>% 
    hc_xAxis(categories = df1$name) %>% 
    hc_add_series(df1, name='Fruits', dataLabels=list(enabled=TRUE)) %>%
    hc_credits(enabled=TRUE, text='InvestigaOnline.com', href ='https://www.investigaonline.com')
```

### Guardar y exportar el gráfico

En ocasiones es necesario dar la oportunidad al usuario del gráfico de poder guardarlo como imagen o guardarlo como tabla de EXCEL o fichero de texto separado por ',' (CSV).

```{r fig.cap='Gráfico de barras, adición de exportación', out.width='80%', fig.asp=.75, fig.align='center', echo=TRUE, warning=FALSE, message=FALSE, comment = NA}
highchart() %>% 
    hc_chart(type = 'bar') %>% 
    hc_xAxis(categories = df1$name) %>% 
    hc_add_series(df1, name='Fruits', dataLabels=list(enabled=TRUE)) %>%
    hc_credits(enabled=TRUE, text='InvestigaOnline.com', href ='https://www.investigaonline.com') %>%
    hc_exporting(enabled=TRUE)
```

### API de Highcharts, toda la potencia de los gráficos

La pregunta que ahora nos deberíamos estar haciendo es... ¿como puedo yo saber que debo usar `hc_credits()`, o `hc_exporting()` o `dataLabels(list=())`?

Para eso tenemos lo que se llama la API de la librería de gráficos. Ahora entenderemos mejor el apartado de presentación cuando decíamos que `highcharter`es un _wrapper_ de la librería `Highcharts`. Si visitamos el sitio web de la [api de highcharts](https://api.highcharts.com) podemos ver que todas las opciones que se pueden usar en los gráficos están documentadas. Si a ello añadimos el [sitio demo](https://highcharts.com/demo) de esta marca podemos ver todo lo que se puede hacer. Te recomiendo la lectura del [post de Danton Noriega](https://dantonnoriega.github.io/ultinomics.org/posts/2017-04-05-highcharter-explainer.html) acerca de como usar la API para saber construir nuestros gráficos en de highchart en R, en especial la parte en la que refiere a este punto que estamos hablando (Highcharts API and highcharter functions). Tras la lectura de ese post te darás cuenta de que en tus manos de analista de datos, tienes un auténtico cañón de magníficas visualizaciones. Pero vayamos poco a poco y continuemos con nuestros ejemplos de gráficos.

## Gráfico de columna

Es un gráfico idéntico al anterior, pero con la barra vertical en lugar de horizontal. Mantenemos la última vista básica con los elementos añadidos de exportación, créditos y mostrado de valores de aquí en adelante.

```{r fig.cap='gráfico de columnas', out.width='80%', fig.asp=.75, fig.align='center', echo=TRUE, warning=FALSE, message=FALSE, comment = NA}
highchart() %>% 
    hc_chart(type = 'column') %>% 
    hc_xAxis(categories = df1$name) %>% 
    hc_add_series(df1, name='Fruits', dataLabels=list(enabled=TRUE)) %>%
    hc_credits(enabled=TRUE, text='InvestigaOnline.com', href ='https://www.investigaonline.com') %>%
    hc_exporting(enabled=TRUE)
```

Obsérvese que en el gráfico lo único que hemos hecho ha sido modificar el tipo de gráfico de `bar`a `column`. Añadamos ahora perspectiva al gráfico, incluyendo la lista de opciones de 3D.

```{r fig.cap='Gráfico de columnas 3D', out.width='80%', fig.asp=.75, fig.align='center', echo=TRUE, warning=FALSE, message=FALSE, comment = NA}
highchart() %>% 
    hc_chart(type = 'column', options3d = list(enabled = TRUE, beta = 45, alpha = 15)) %>% 
    hc_xAxis(categories = df1$name) %>% 
    hc_add_series(df1, name='Fruits', dataLabels=list(enabled=TRUE)) %>%
    hc_credits(enabled=TRUE, text='InvestigaOnline.com', href ='https://www.investigaonline.com') %>%
    hc_exporting(enabled=TRUE)
```
### Variación de columna a pirámide

Y si lo presentamos en forma de pirámide ...

```{r fig.cap='Gráfico de columnas con pirámides', out.width='80%', fig.asp=.75, fig.align='center', echo=TRUE, warning=FALSE, message=FALSE, comment = NA}
highchart() %>% 
    hc_chart(type = 'columnpyramid') %>% 
    hc_xAxis(categories = df1$name) %>% 
    hc_add_series(df1, name='Fruits',showInLegend = FALSE, dataLabels = list(enabled=TRUE)) %>%
    hc_credits(enabled=TRUE, text='InvestigaOnline.com', href ='https://www.investigaonline.com') %>%
    hc_exporting(enabled=TRUE)
```
### Variación de columna a _lollipop_

Y si lo presentamos en forma de _lollipop_, debemos variar al _dataframe_ al completo, porque este gráfico muy parecido a la variación de rango, requiere del _low-high_.

```{r fig.cap='Gráfico _lollipop_ o _dumbbell_', out.width='80%', fig.asp=.75, fig.align='center', echo=TRUE, warning=FALSE, message=FALSE, comment = NA}
highchart() %>% 
    hc_chart(type = 'dumbbell') %>% 
    hc_xAxis(categories = df$name) %>% 
    hc_add_series(df, name='Fruits',showInLegend = FALSE, dataLabels = list(enabled=TRUE)) %>%
    hc_credits(enabled=TRUE, text='InvestigaOnline.com', href ='https://www.investigaonline.com') %>%
    hc_exporting(enabled=TRUE)
```

```{r fig.cap='Gráfico _lollipop_ invertido', out.width='80%', fig.asp=.75, fig.align='center', echo=TRUE, warning=FALSE, message=FALSE, comment = NA}
highchart() %>% 
    hc_chart(type = 'dumbbell', inverted=TRUE) %>% 
    hc_xAxis(categories = df$name) %>% 
    hc_add_series(df, name='Fruits',showInLegend = FALSE, dataLabels = list(enabled=TRUE)) %>%
    hc_credits(enabled=TRUE, text='InvestigaOnline.com', href ='https://www.investigaonline.com') %>%
    hc_exporting(enabled=TRUE)
```

### Gráficos polares

Existe otra forma de visualizar el gráfico que nos va a gustar mucho, porque se ve en pocas ocasiones.

```{r fig.cap='Gráfico de barras, circular -polar-', out.width='80%', fig.asp=.75, fig.align='center', echo=TRUE, warning=FALSE, message=FALSE, comment = NA}
highchart() %>% 
    hc_chart(type = 'bar', polar=TRUE) %>% 
    hc_xAxis(categories = df1$name) %>% 
    hc_add_series(df1, name='Fruits', dataLabels=list(enabled=TRUE)) %>%
    hc_credits(enabled=TRUE, text='InvestigaOnline.com', href ='https://www.investigaonline.com') %>%
    hc_exporting(enabled=TRUE)
```

Nótese que se ha añadido el modificador `polar=TRUE` Una buena vista, espectacular pero poco efectiva. Desde el propio script, sin embargo se puede añadir una mínima opción que mejoraría esta salida.

```{r fig.cap='Gráfico de barras circular con fijación de ángulo de parada', out.width='80%', fig.asp=.75, fig.align='center', echo=TRUE, warning=FALSE, message=FALSE, comment = NA}
highchart() %>% 
    hc_chart(type = 'bar', polar=TRUE) %>% 
    hc_xAxis(categories = df1$name) %>% 
    hc_add_series(df1, name='Fruits', dataLabels=list(enabled=TRUE)) %>%
    hc_credits(enabled=TRUE, text='InvestigaOnline.com', href ='https://www.investigaonline.com') %>%
    hc_exporting(enabled=TRUE) %>%
    hc_pane(endAngle=270)
```

Esta nueva función `hc_pane()` hace que el círculo termine en el ángulo 270 (de 360), de forma que las etiquetas se leen mejor. Pero no es una visualización fácil, visualmente atractiva, pero difícil de leer e intepretar.

## Diagramas de secciones

### Tarta / _pie chart_

Si hay algún gráfico tan o más famoso que el de barras o el de columnas, ese es el gráfico de tarta.

```{r fig.cap='Gráfico de tarta y adición de secciones separadas', out.width='80%', fig.asp=.75, fig.align='center', echo=TRUE, warning=FALSE, message=FALSE, comment = NA}
df$sliced <- c(0,1,0,0,1,0) 
#añadimos el campo sliced
highchart() %>%
    hc_title(text = 'Fruits pie') %>% 
    hc_subtitle(text = 'My favourite fruits') %>% 
    hc_chart(type = 'pie', polar = FALSE, inverted = FALSE) %>% 
    hc_xAxis(categories = df$name) %>%
    hc_add_series(df,name = "Fruits", showInLegend = TRUE)
df <- select(df, -sliced) 
#eliminamos el campo sliced
```

Además de haberle añadido un título y un subtítulo este gráfico presenta un nuevo elemento fundamental: el modificador `showInLegend=TRUE` que nos permite mostrar una leyenda con las diferentes frutas y sus colores. Además, en el script hemos comenzado por añadir un nuevo campo a la tabla df, denominado `sliced`que ya puedes ver su efecto, separa del centro (desgaja) una sección de la tarta. En este caso ha sucedido para la fruta en segundo lugar (nut) y para la que está en quinto lugar (fig).

### Anillo / _doughnut_

Y si queremos convertir este gráfico en un anillo o *doughnut* utilizaremos el modificador `innerSize='75%'` en la función `hc_add_series()`. Este modificador traza un círculo desde el baricentro del diagrama hasta el porcentaje indicado dejando espacio central en blanco. El gráfico puede tomar diferente aspecto según ese porcentaje indicado.

```{r fig.cap='Gráfico de _doughnut_', out.width='80%', fig.asp=.75, fig.align='center', echo=TRUE, warning=FALSE, message=FALSE, comment = NA}
highchart() %>%
    hc_title(text = 'Fruits pie') %>% 
    hc_subtitle(text = 'My favourite fruits') %>% 
    hc_chart(type = 'pie', polar = FALSE, inverted = FALSE) %>% 
    hc_xAxis(categories = df$name) %>%
    hc_add_series(df,name = "Fruits", showInLegend = TRUE, innerSize='75%' )
```

o también, cambiando el radio inferior de vaciado ...

```{r fig.cap='Gráfico de _doughnut_, adelgazado', out.width='80%', fig.asp=.75, fig.align='center', echo=TRUE, warning=FALSE, message=FALSE, comment = NA}
highchart() %>%
    hc_title(text = 'Fruits pie') %>% 
    hc_subtitle(text = 'My favourite fruits') %>% 
    hc_chart(type = 'pie', polar = FALSE, inverted = FALSE) %>%  
    hc_xAxis(categories = df$name) %>%
    hc_add_series(df,name = "Fruits", showInLegend = TRUE, innerSize='33%')
```

### _Funnel_

Una variante para gráficos de un único campo es el _funnel_.

```{r fig.cap='Gráfico de _funnel_', out.width='80%', fig.asp=.75, fig.align='center', echo=TRUE, warning=FALSE, message=FALSE, comment = NA}
highchart() %>%
    hc_chart(type = 'funnel', polar = FALSE, inverted = FALSE) %>% 
    hc_xAxis(categories = df$name) %>% 
    hc_yAxis(visible = TRUE) %>% 
    hc_tooltip(outside = TRUE, enabled=TRUE) %>% 
    hc_add_series(df,name = "Frutas",showInLegend = FALSE, dataLabels = list(enabled=TRUE), colorByPoint=TRUE)
```

### Pirámide

Una nueva variante para un gráfico de una sola variable. el tipo _pyramid_.

```{r fig.cap='Gráfico de pirámide', out.width='80%', fig.asp=.75, fig.align='center', echo=TRUE, warning=FALSE, message=FALSE, comment = NA}
highchart() %>%
    hc_chart(type = 'pyramid', polar = FALSE, inverted = FALSE) %>% 
    hc_xAxis(categories = df$name) %>% 
    hc_yAxis(visible = TRUE) %>% 
    hc_tooltip(outside = TRUE, enabled=TRUE) %>% 
    hc_add_series(df,name = "Frutas",showInLegend = FALSE, dataLabels = list(enabled=TRUE), colorByPoint=TRUE)
```

## Gráfico de línea

Un nuevo pero tradicional modelo, el gráfico de línea. Vamos a aprovechar para no ser demasiado repetitivos para añadir una nueva serie de valores; recordemos la tabla de datos inicial.

```{r fig.cap='Gráfico de línea', out.width='80%', fig.asp=.75, fig.align='center', echo=TRUE, warning=FALSE, message=FALSE, comment = NA}
knitr::kable(df)
```
Vamos a utilizar z, como si fuera una nueva serie de valores. Es decir como si quisiéramos representar en el diagrama dos conjuntos de valores. Primero lo mostramos como hasta ahora, con una sola serie...

```{r echo=TRUE, warning=FALSE, message=FALSE}
df1 <- select(df, name, y, z, color) # seleccionamos las columnas name, y y z
highchart() %>% 
    hc_chart(type = 'line') %>% 
    hc_xAxis(categories = df1$name) %>% 
    hc_add_series(df1, name='Fruits', dataLabels=list(enabled=TRUE)) %>%
    hc_credits(enabled=TRUE, text='InvestigaOnline.com', href ='https://www.investigaonline.com') %>%
    hc_exporting(enabled=TRUE)
```

Para ahora añadir la nueva serie. Nótese la variación en el modificador `hc_add_series()`donde ahora hay dos líneas, como si de dos capas se tratara.

```{r fig.cap='Gráfico de línea multi serie (1)', out.width='80%', fig.asp=.75, fig.align='center', echo=TRUE, warning=FALSE, message=FALSE, comment = NA}
highchart() %>% 
    hc_chart(type = 'line') %>% 
    hc_xAxis(categories = df1$name) %>% 
    hc_add_series(df1, name='Fruits - serie 1', dataLabels=list(enabled=TRUE)) %>%
    hc_add_series(df1$z, name='Fruits - serie 2', dataLabels=list(enabled=TRUE)) %>%
    hc_credits(enabled=TRUE, text='InvestigaOnline.com', href ='https://www.investigaonline.com') %>%
    hc_exporting(enabled=TRUE)
```

Quisiera hacer notar que simplemente hemos añadido una nueva serie que se contiene en la columna denominada z de df1 (df1$z) y no hemos modificado la anterior serie que por defecto era el campo `y`. Creo que sería mucho más limpio y ordenado el escribir este mismo gráfico así.

```{r fig.cap='Gráfico de línea multi serie (2)', out.width='80%', fig.asp=.75, fig.align='center', echo=TRUE, warning=FALSE, message=FALSE, comment = NA}
highchart() %>% 
    hc_chart(type = 'line') %>% 
    hc_xAxis(categories = df1$name) %>% 
    hc_add_series(df1$y, name='Fruits - serie 1', dataLabels=list(enabled=TRUE)) %>% # minimo cambio identificador
    hc_add_series(df1$z, name='Fruits - serie 2', dataLabels=list(enabled=TRUE)) %>%
    hc_credits(enabled=TRUE, text='InvestigaOnline.com', href ='https://www.investigaonline.com') %>%
    hc_exporting(enabled=TRUE)
```

De este modo, identificamos que es cada una de las series `y`y `z`, obteniendo idéntico resultado pero quedando más clara la sintaxis de cada una de las series introducidas.

#### Suavizado de la línea

En muchas ocasiones es interesante suavizar la línea. Para ello `highcharts` tiene un modificador del tipo de gráfico denominado `spline`.

```{r fig.cap='Gráfico de línea suavizado', out.width='80%', fig.asp=.75, fig.align='center', echo=TRUE, warning=FALSE, message=FALSE, comment = NA}
highchart() %>% 
    hc_chart(type = 'spline') %>% 
    hc_xAxis(categories = df1$name) %>% 
    hc_add_series(df1$y, name='Fruits - serie 1', dataLabels=list(enabled=TRUE)) %>%
    hc_add_series(df1$z, name='Fruits - serie 2', dataLabels=list(enabled=TRUE)) %>%
    hc_credits(enabled=TRUE, text='InvestigaOnline.com', href ='https://www.investigaonline.com') %>%
    hc_exporting(enabled=TRUE)
```

Nótese el suavizado de la curva. 

Y ha llegado un momento de hacer algo no habitual, pero que sí puede darte ideas de futuro.

```{r fig.cap='Gráfico combinado línea y columna', out.width='80%', fig.asp=.75, fig.align='center', echo=TRUE, warning=FALSE, message=FALSE, comment = NA}
highchart() %>% 
    hc_chart(type = 'line') %>% 
    hc_xAxis(categories = df1$name) %>% 
    hc_add_series(df1$y, name='Fruits - serie 1', dataLabels=list(enabled=TRUE)) %>%
    hc_add_series(df1$z, type='column', name='Fruits - serie 2', dataLabels=list(enabled=TRUE)) %>%
    hc_credits(enabled=TRUE, text='InvestigaOnline.com', href ='https://www.investigaonline.com') %>%
    hc_exporting(enabled=TRUE)
```

Vaya sorpresón y qué sencillo, ¿verdad? Hemos combinado línea con columna (no todas las combinaciones son posibles). Además como `z` tenía valores negativos, las barras negativas se muestran muy claramente. ¿Y si polarizamos este gráfico?


```{r fig.cap='Gráfico combinado polarizado', out.width='80%', fig.asp=.75, fig.align='center', echo=TRUE, warning=FALSE, message=FALSE, comment = NA}
highchart() %>% 
    hc_chart(type = 'line', polar=TRUE) %>% 
    hc_xAxis(categories = df1$name) %>% 
    hc_add_series(df1$y, name='Fruits - serie 1', dataLabels=list(enabled=TRUE)) %>%
    hc_add_series(df1$z, type='column', name='Fruits - serie 2', dataLabels=list(enabled=TRUE)) %>%
    hc_credits(enabled=TRUE, text='InvestigaOnline.com', href ='https://www.investigaonline.com') %>%
    hc_exporting(enabled=TRUE)
```

¡Nada mal! aunque es posible que no combinando el tipo de representación en las series, la visualización sea más clara, en lo que se denomina gráfico *spider* que es muy utilizado para las baterías o tablas de ítems en nuestras encuestas. Y ya puestos, añadimos un toque de color a nuestro gráfico. Analiza tú mismo los modificadores que cambian.

```{r fig.cap='Gráfico de tela de araña', out.width='80%', fig.asp=.75, fig.align='center', echo=TRUE, warning=FALSE, message=FALSE, comment = NA}
highchart() %>% 
    hc_chart(type = 'line', polar=TRUE, backgroundColor='#E2E2E2') %>%
    hc_xAxis(categories = df1$name) %>% 
    hc_add_series(df1$y, name='Fruits - serie 1', dataLabels=list(enabled=TRUE), color='#eb6909') %>%
    hc_add_series(df1$z, name='Fruits - serie 2', dataLabels=list(enabled=TRUE), color='teal') %>%
    hc_credits(enabled=TRUE, text='InvestigaOnline.com', href ='https://www.investigaonline.com') %>%
    hc_exporting(enabled=TRUE)
```

## Gráficos de columnas / barras con apilamiento

Volvamos la vista un poco atrás, y ahora que tenemos dos series, vamos a jugar un poco más el gráfico o más específicamente
con las columnas (o barras). Vamos a realizar los apilamientos (no se pueden hacer lógicamente con los gráficos de tarta).

Recuperamos nuestro gráfico de columnas, pero lo hacemos ahora con las dos series, pero ahora, para que los dos valores (y,z) sean positivos, vamos a trabajar con el campo denominado `y`y el campo denominado `value`.

```{r fig.cap='Gráfico de columnas apiladas', out.width='80%', fig.asp=.75, fig.align='center', echo=TRUE, warning=FALSE, message=FALSE, comment = NA}
df1 <- select(df, name, y, z, value, color) # seleccionamos las columnas name, y y value
highchart() %>% 
    hc_chart(type = 'column') %>% 
    hc_xAxis(categories = df1$name) %>% 
    hc_add_series(df1$y, name='Año 1900', dataLabels=list(enabled=TRUE), color='#EB6909') %>%
    hc_add_series(df1$value, name='Año 2000', dataLabels=list(enabled=TRUE), color='#C2C2C2') %>%
    hc_credits(enabled=TRUE, text='InvestigaOnline.com', href ='https://www.investigaonline.com') %>%
    hc_exporting(enabled=TRUE)
```

Nótese que hemos añadido una novedad y es la asignación a la serie del color que nos gusta para ella, mediante el modificador `color` en la opción `hc_add_series()`. Procedamos con el apilamiento.

```{r fig.cap='Gráfico de columnas apiladas, adición de color', out.width='80%', fig.asp=.75, fig.align='center', echo=TRUE, warning=FALSE, message=FALSE, comment = NA}
highchart() %>% 
    hc_chart(type = 'column') %>% 
    hc_xAxis(categories = df1$name) %>% 
    hc_add_series(df1$y, name="Año 1900", dataLabels=list(enabled=TRUE), color="#EB6909", stacking="normal") %>% 
    hc_add_series(df1$value, name="Año 2000", dataLabels=list(enabled=TRUE), color="#C2C2C2", stacking="normal") %>%
    hc_credits(enabled=TRUE, text="InvestigaOnline.com", href ="https://www.investigaonline.com") %>%
    hc_exporting(enabled=TRUE)
```

Nótese que en ambas series, se ha introducido el modificador `stacking="normal"`que ocasiona ese ajuste en las series. Podemos combinar series con apilamiento y series sin apilamiento (agrupaciones de categorías para verlas conjuntamente).

```{r fig.cap="Gráfico columnas combinando apilamiento y normal", out.width="80%", fig.asp=.75, fig.align="center", echo=TRUE, warning=FALSE, message=FALSE, comment = NA}
highchart() %>% 
    hc_chart(type = "column") %>% 
    hc_xAxis(categories = df1$name) %>% 
    hc_add_series(df1$y, name="Año 1900", dataLabels=list(enabled=TRUE), color="#EB6909", stacking="normal") %>% 
    hc_add_series(df1$value, name="Año 2000", dataLabels=list(enabled=TRUE), color="#C2C2C2", stacking="normal") %>%
    hc_add_series(df1$z, name="Año 2020", dataLabels=list(enabled=TRUE), color="#020202") %>%
    hc_credits(enabled=TRUE, text="InvestigaOnline.com", href ="https://www.investigaonline.com") %>%
    hc_exporting(enabled=TRUE)
```

Y por último, el apilamiento puede ser `normal` o puede ser `percent` donde la representación (que no el valor mostrado) se calcula en base 100. Nótese que todas las columnas son igual de altas y nótese que nuevamente `z` se mantiene sin apilamiento.

```{r fig.cap="Gráfico de columnas combinando apilamiento porcentual", out.width="80%", fig.asp=.75, fig.align="center", echo=TRUE, warning=FALSE, message=FALSE, comment = NA}
highchart() %>% 
    hc_chart(type = "column") %>% 
    hc_xAxis(categories = df1$name) %>% 
    hc_add_series(df1$y, name="Año 1900", dataLabels=list(enabled=TRUE), color="#EB6909", stacking="percent") %>% 
    hc_add_series(df1$value, name="Año 2000", dataLabels=list(enabled=TRUE), color="#C2C2C2", stacking="percent") %>%
    hc_add_series(df1$z, name="Año 2020", dataLabels=list(enabled=TRUE), color="#020202") %>%
    hc_credits(enabled=TRUE, text="InvestigaOnline.com", href ="https://www.investigaonline.com") %>%
    hc_exporting(enabled=TRUE)
```

Por último, apilemos todas, cambiando a barras ...

```{r fig.cap="Gráfico de barras con apilamiento porcentual", out.width="80%", fig.asp=.75, fig.align="center", echo=TRUE, warning=FALSE, message=FALSE, comment = NA}
highchart() %>% 
    hc_chart(type = "bar") %>% 
    hc_xAxis(categories = df1$name) %>% 
    hc_add_series(df1$y, name="Año 1900", dataLabels=list(enabled=TRUE), color="#EB6909", stacking="percent") %>% 
    hc_add_series(df1$value, name="Año 2000", dataLabels=list(enabled=TRUE), color="#C2C2C2", stacking="percent") %>%
    hc_add_series(df1$z, name="Año 2020", dataLabels=list(enabled=TRUE), color="#020202", stacking="percent") %>%
    hc_credits(enabled=TRUE, text="InvestigaOnline.com", href ="https://www.investigaonline.com") %>%
    hc_exporting(enabled=TRUE)
```

Y pongamos el gráfico en estilo `polar`.

```{r fig.cap="Gráfico de columnas apiladas porcentual", out.width="80%", fig.asp=.75, fig.align="center", echo=TRUE, warning=FALSE, message=FALSE, comment = NA}
highchart() %>% 
    hc_chart(type = "column", polar="TRUE") %>% 
    hc_xAxis(categories = df1$name) %>% 
    hc_add_series(df1$y, name="Año 1900", dataLabels=list(enabled=TRUE), color="#EB6909", stacking="percent") %>% 
    hc_add_series(df1$value, name="Año 2000", dataLabels=list(enabled=TRUE), color="#C2C2C2", stacking="percent") %>%
    hc_add_series(df1$z, name="Año 2020", dataLabels=list(enabled=TRUE), color="#020202", stacking="percent") %>%
    hc_credits(enabled=TRUE, text="InvestigaOnline.com", href ="https://www.investigaonline.com") %>%
    hc_exporting(enabled=TRUE)
```

## Gráfico de área

Volvamos a nuestras dos series (`y`, `value`) para presentar ahora una nueva visualización, el gráfico de `área`. Esta es una variación del gráfico de línea donde se dibujan éstas pero con la superficie bajo las líneas con el color indicado, mostrándose de esta forma.

```{r fig.cap="Gráfico de área", out.width="80%", fig.asp=.75, fig.align="center", echo=TRUE, warning=FALSE, message=FALSE, comment = NA}
highchart() %>% 
    hc_chart(type = "area") %>% 
    hc_xAxis(categories = df1$name) %>% 
    hc_add_series(df1$y, name="Año 1900", dataLabels=list(enabled=TRUE), color="#EB6909") %>% 
    hc_add_series(df1$value, name="Año 2000", dataLabels=list(enabled=TRUE), color="#C2C2C2") %>%
    hc_credits(enabled=TRUE, text="InvestigaOnline.com", href ="https://www.investigaonline.com") %>%
    hc_exporting(enabled=TRUE)
```

Nótese la superposición de una y otra. Normalmente ese gráfico se usa para representar mediciones en las que una siempre está por encima de la otra (como aquí sucede), pero siempre pensando que las áreas de intersección van a combinar el color.

Podemos también apilar los valores directos.

```{r fig.cap="Gráfico de área apilado", out.width="80%", fig.asp=.75, fig.align="center", echo=TRUE, warning=FALSE, message=FALSE, comment = NA}
highchart() %>% 
    hc_chart(type = "area") %>% 
    hc_xAxis(categories = df1$name) %>% 
    hc_add_series(df1$y, name="Año 1900", dataLabels=list(enabled=TRUE), color="#EB6909", stacking="normal") %>% 
    hc_add_series(df1$value, name="Año 2000", dataLabels=list(enabled=TRUE), color="#C2C2C2", stacking="normal") %>%
    hc_credits(enabled=TRUE, text="InvestigaOnline.com", href ="https://www.investigaonline.com") %>%
    hc_exporting(enabled=TRUE)
```

O mostrar las áreas con base 100.

```{r fig.cap="Gráfico de área apilado porcentual", out.width="80%", fig.asp=.75, fig.align="center", echo=TRUE, warning=FALSE, message=FALSE, comment = NA}
highchart() %>% 
    hc_chart(type = "area") %>% 
    hc_xAxis(categories = df1$name) %>% 
    hc_add_series(df1$y, name="Año 1900", dataLabels=list(enabled=TRUE), color="#EB6909", stacking="percent") %>% 
    hc_add_series(df1$value, name="Año 2000", dataLabels=list(enabled=TRUE), color="#C2C2C2", stacking="percent") %>%
    hc_credits(enabled=TRUE, text="InvestigaOnline.com", href ="https://www.investigaonline.com") %>%
    hc_exporting(enabled=TRUE)
```

## Gráfico de puntos / _scatterplot_

Variación de los anteriores vamos a presentar sus dos versiones. La versión llamemos natural sería representar los puntos (igual que en el gráfico de línea) pero sin dibujar el trazo que los une. 

```{r fig.cap="Gráfico de puntos, _scatter_", out.width="80%", fig.asp=.75, fig.align="center", echo=TRUE, warning=FALSE, message=FALSE, comment = NA}
highchart() %>% 
    hc_chart(type = "scatter") %>% 
    hc_xAxis(categories = df1$name) %>% 
    hc_add_series(df1$y, name="Año 1900", dataLabels=list(enabled=TRUE)) %>% 
    hc_add_series(df1$value, name="Año 2000", dataLabels=list(enabled=TRUE)) %>%
    hc_credits(enabled=TRUE, text="InvestigaOnline.com", href ="https://www.investigaonline.com") %>%
    hc_exporting(enabled=TRUE)
```

Sin embargo, cuando uno piensa en un _scatterplot_, lo que piensa es en un diagrama de dispersión o mapa cartesiano donde se presentan los puntos con sus coordenadas en `x` y también en `y`. Un diagrama de dispersión muestra la relación entre 2 variables numéricas. Para cada punto de datos, el valor de su primera variable se representa en el eje X, el segundo en el eje Y. Como no disponemos datos para un buen scatterplot, vamos a construirnos un banco de datos (aleatorio) y trabajamos con él.

```{r fig.cap="_Scatterplot_, preparación", out.width="80%", fig.asp=.75, fig.align="center", echo=TRUE, warning=FALSE, message=FALSE, comment = NA}
#==================== construcción del _dataframe_
set.seed(311265) # para que la aleatoriedad sea siempre la misma, fijamos su semilla de aleatorización
dfextra <- data.frame(mat=sample(1:100, 400, replace=TRUE), # un valor de un campo X, por ejemplo puntuación en habilidad en matemáticas
                      bio=sample(1:100, 400, replace=TRUE), # un valor de un campo y, por ejemplo puntuación en habilidad en biología
                      glob=sample(50:100, 400, replace=TRUE), # un valor z de peso global de adecuación al puesto
                      grp=sample(1:3, 400, replace=TRUE) # grupo de pertenencia (tres grupos, 1, 2 y 3)
                      ) 
#================== mostramos extracto del data frame
knitr::kable(head(dfextra)) # mostramos breve extracto de la tabla creada
```

Y vamos con el gráfico ...

```{r fig.cap="_Scatterplot_", out.width="80%", fig.asp=.75, fig.align="center", echo=TRUE, warning=FALSE, message=FALSE, comment = NA}
hchart(dfextra, "scatter", hcaes(x=mat, y=bio, group=grp))
```

Puedes observar que para este tipo de gráfico hemos optado por la forma acotada; esto es debido a que la forma de ofrecerle los datos es más simple, sin embargo podemos seguir añadiendo elementos al mismo del mismo modo que lo hacíamos con el uso de la función `highchart()`. La agrupación por colores es debida al modificador de grupo `group=grp`en la función `hcaes()`. Si no lo ponemos, simplemente el color sería único.

```{r fig.cap="_Scatterplot_", out.width="80%", fig.asp=.75, fig.align="center", echo=TRUE, warning=FALSE, message=FALSE, comment = NA}
hchart(dfextra, "scatter", hcaes(x=mat, y=bio)) %>% 
    hc_credits(enabled=TRUE, text="InvestigaOnline.com", href ="https://www.investigaonline.com") %>%
    hc_exporting(enabled=TRUE)
```

Una última variación al _scatterplot_ sería convertirlo en un _bubble scatterplot_*_. Un diagrama de burbujas es un diagrama de dispersión donde se agrega una tercera dimensión: el valor de una variable numérica adicional se representa mediante el tamaño de los puntos. Necesita 3 variables numéricas como entrada: una está representada por el eje X, una por el eje Y y otra por el tamaño del punto. Más vale un imagen que mil palabras.

```{r fig.cap="_Bubble scatterplot_", out.width="80%", fig.asp=.75, fig.align="center", echo=TRUE, warning=FALSE, message=FALSE, comment = NA}
hchart(dfextra, "scatter", hcaes(x=mat, y=bio, z=glob, group = grp)) %>% 
    hc_credits(enabled=TRUE, text="InvestigaOnline.com", href ="https://www.investigaonline.com") %>%
    hc_exporting(enabled=TRUE)
```

## Histograma o gráfico de densidad

También en este caso vamos a recurrir a la forma simple. Un histograma solo toma como entrada una variable numérica. La variable se divide en varios cortes y el número de observaciones por corte se representa mediante la altura de la barra. Es posible representar la distribución de varias variables en el mismo eje utilizando esta técnica. Sigamos utilizando nuestro nuevo _dataframe_ `dfextra`.

```{r fig.cap="Histograma", out.width="80%", fig.asp=.75, fig.align="center", echo=TRUE, warning=FALSE, message=FALSE, comment = NA}
hchart(dfextra$mat, color="teal", name="Matemáticas") %>% 
    hc_credits(enabled=TRUE, text="InvestigaOnline.com", href ="https://www.investigaonline.com") %>%
    hc_exporting(enabled=TRUE)
```

Este gráfico puede fácilmente reconvertirse a la función de densidad. Una gráfica de densidad muestra la distribución de una variable numérica. Solo toma variables numéricas como entrada y está muy cerca de un histograma. Puede usarse exactamente en las mismas condiciones.

```{r fig.cap="Gráfico de densidad", out.width="80%", fig.asp=.75, fig.align="center", echo=TRUE, warning=FALSE, message=FALSE, comment = NA}
hchart(density(dfextra$mat), color="teal", name="Matemáticas") %>% 
    hc_credits(enabled=TRUE, text="InvestigaOnline.com", href ="https://www.investigaonline.com") %>%
    hc_exporting(enabled=TRUE)
```

## Gráficos indicadores

Estos gráfico están caracterizados en su mayor parte por presentar un único valor numérico en una imagen muy simplificada. Su mayor exponente es el denominado `gauge` que estamos acostumbrados a ver en multitud de páginas web de tipo _dashboard_. Se caracterizan por tener datos que se proporcionan de forma externa al _dataframe_ de donde se representa la información. Veamos algunos ejemplos.

### Gauge

Un gráfico de indicador (o gráfico de velocímetro) combina un gráfico de anillo y un gráfico circular en un solo gráfico. Muestra el valor deseado al que se le presupone un valor mínimo y un máximo. Es muy típico para representar por ejmplo el NPS y presentarlo con secciones tipo semáforo. En nuestro script y con afán de ir probando nuevas cosas, crearemos primero lo que se denominan las secciones del semáforo (3 o n) y luego haremos el gráfico. Representemos el campo `value` de nuestras frutas, comenzando por la oliva (fila 3) . Presentamos el script de forma más extendida para ir apreciando y comentando alguno de sus detalles

```{r fig.cap="_Gauge_ o indicador", out.width="80%", fig.asp=.75, fig.align="center", echo=TRUE, warning=FALSE, message=FALSE, comment = NA}
col_stops <-
  data.frame(
    q = c(0.25, 0.50, 0.75), # se establecen las secciones de valor en término porcentual
    c = c("#CD5C5C", "#F0E68C", "#3CB371"), # se establecen los colores que tomará cada sección
    stringsAsFactors = FALSE
  )
stops <- list_parse2(col_stops) # se crea una lista con este _dataframe_ que hemos creado, pues highcharts lo necesita así.

highchart() %>%
  hc_chart(type = "solidgauge") %>%
  hc_pane(
    startAngle = -90, # determina el ángulo donde comienza
    endAngle = 90, # determina el ángulo donde acaba
    background = list(
      outerRadius = "100%", # "vaciamos" el hueco del círculo que hemos dibujado
      innerRadius = "60%", # "vaciamos" el hueco del círculo que hemos dibujado
      shape = "arc" 
    )
  ) %>%
  hc_tooltip(enabled = FALSE) %>%
  hc_yAxis(
    stops = stops, # le aplicamos la lista de secciones colo (semáforo)
    lineWidth = 0,
    minorTickWidth = 0,
    tickAmount = 2,
    min = 0,
    max = 100,
    labels = list(y = 25) # baja las etiquetas 0 y 100 de límites para que no sitúen sobre el gráfico
  ) %>%
  hc_add_series(
    data = df$high[3],  # le indicamos que capturamos el valor desde _dataframe_ "df", del campo "high", y la fila "3"
    dataLabels = list(
      borderWidth = 0,
      useHTML = TRUE,
      style = list(fontSize = "60px")
    )
  ) %>%
  hc_credits(enabled=TRUE, text="InvestigaOnline.com", href ="https://www.investigaonline.com") %>%
  hc_exporting(enabled=TRUE)
``` 

Prueba si lo deseas a ir cambiando el valor de `df$high[3]`  a cualquier valor entre 0 y 10 y observarás el cambio de color.

```{r fig.cap="_Gauge_", out.width="80%", fig.asp=.75, fig.align="center", echo=TRUE, warning=FALSE, message=FALSE, comment = NA}
col_stops <-data.frame(q = c(0.25, 0.50, 0.75),c = c("#CD5C5C", "#F0E68C", "#3CB371"),stringsAsFactors = FALSE)
stops <- list_parse2(col_stops)
highchart() %>%
  hc_chart(type = "solidgauge") %>%
  hc_pane(startAngle = -90,endAngle = 90,background = list(outerRadius = "100%",innerRadius = "60%",shape = "arc" )) %>%
  hc_tooltip(enabled = FALSE) %>%
  hc_yAxis(stops = stops,lineWidth = 0,minorTickWidth = 0,tickAmount = 2,min = 0,max = 100,labels = list(y = 25)) %>%
  hc_add_series(data = 65,dataLabels = list(borderWidth = 0,useHTML = TRUE,style = list(fontSize = "60px"))) %>%
  hc_credits(enabled=TRUE, text="InvestigaOnline.com", href ="https://www.investigaonline.com") %>%
  hc_exporting(enabled=TRUE)
``` 

### Bullet

Otra forma de representar valores unitario pero que tienen un objetivo definido y que pueden haber superado ese objetivo es el gráfico denominado bullet. vamos a imaginar que en nuestro _dataframe_, `y` es el valor alcanzado, y `value`es el objetivo.

```{r fig.cap="_Bullet_ o indicador lineal", out.width="80%", fig.asp=.75, fig.align="center", echo=TRUE, warning=FALSE, message=FALSE, comment = NA}
bandas <- list(list(from = 0, to = 10, color = "#ddd"),list(from = 10, to = 20, color = "#bbb"),list(from = 20, to = 25, color ="#888"))
hchart(df1, "bullet", hcaes(x = name, y = y, target = value), color = "teal", targetOptions=list(color="black")) %>%
  hc_chart(inverted = TRUE) %>%
  hc_yAxis(min = 0,max = 25, gridLineWidth = 0, plotBands = bandas) %>%
  hc_xAxis(gridLineWidth = 15, gridLineColor = "white") %>% 
  hc_plotOptions(series = list(pointPadding = 0.25, pointWidth = 15, borderWidth = 0, targetOptions = list(width = "200%"))) %>% 
  hc_size(height = 300)%>%
  hc_credits(enabled=TRUE, text="InvestigaOnline.com", href ="https://www.investigaonline.com") %>%
  hc_exporting(enabled=TRUE)
```

Nótese que en el gráfico la barra vertical perpendicular a cada barra horizontal, que es el `target` se toma de los propios datos. Es un gráfico que también se ve mucho en los _dashboard_, al igual que el anterior.

## Gráfico / _boxplot_

No lo hemos olvidado, el gráfico más típico en estadística junto con los histogramas, el denominado _boxplot_ o diagrama de caja o diagrama de Box-Whiskers. Un diagrama de caja ofrece un buen resumen de una o varias variables numéricas. La línea que divide el cuadro en 2 partes representa la mediana de los datos. El final del cuadro muestra los cuartiles superior e inferior. Las líneas extremas muestran el valor más alto y más bajo excluyendo los valores atípicos. Nótese que es usada una función de tranformación de los datos del campo `value`para obtener los valores adecuados para el gráfico. Del mismo modo, nótese que la función de adición de las series, se ve mínimamente modificada ya que va a recibir una lista de valores por cada campos de trabajo. Usamos `hc_add_series_list()`.


```{r fig.cap="_Boxplot_", out.width="80%", fig.asp=.75, fig.align="center", echo=TRUE, warning=FALSE, message=FALSE, comment = NA}
dfboxplot1 <- data_to_boxplot(df, value, add_outliers=TRUE, name= "value", color = "teal")

highchart() %>%
  hc_chart(type="boxplot") %>% 
  hc_add_series_list(dfboxplot1) %>%
  hc_credits(enabled=TRUE, text="InvestigaOnline.com", href ="https://www.investigaonline.com") %>%
  hc_exporting(enabled=TRUE)
```

Añadir más series sólo implica repetir el proceso, lo que permite la compración. 

```{r fig.cap="_Boxplot_ con series", out.width="80%", fig.asp=.75, fig.align="center", echo=TRUE, warning=FALSE, message=FALSE, comment = NA}
dfboxplot1 <- data_to_boxplot(df, value, add_outliers=TRUE, name= "value", color = "teal")
dfboxplot2 <- data_to_boxplot(df, high, add_outliers=TRUE, name= "high", color = "red")
dfboxplot3 <- data_to_boxplot(df, low, add_outliers=TRUE, name= "low", color = "orange")

highchart() %>%
  hc_chart(type="boxplot") %>%
  hc_add_series_list(dfboxplot1) %>%
  hc_add_series_list(dfboxplot2) %>%
  hc_add_series_list(dfboxplot3) %>%
  hc_credits(enabled=TRUE, text="InvestigaOnline.com", href ="https://www.investigaonline.com") %>%
  hc_exporting(enabled=TRUE)
```

## Gráfico de barras de error

A menudo tenemos necesidad de incluir un gráfico denominado de barras de error. Este gráfico toma los valores de _low-high_ (que podrían ser lo límites de confianza de un intervalo) y los representa en forma gráfica, quedando de esta forma.

```{r fig.cap="Gráfico de barras error", out.width="80%", fig.asp=.75, fig.align="center", echo=TRUE, warning=FALSE, message=FALSE, comment = NA}
highchart() %>%
  hc_chart(type = "errorbar", polar = FALSE, inverted = FALSE) %>% 
  hc_xAxis(categories = df$name) %>% 
  hc_yAxis(visible = TRUE) %>% 
  hc_tooltip(outside = TRUE, enabled=TRUE) %>% 
  hc_add_series(df,name = "Límites de confianza",showInLegend = FALSE, dataLabels = list(enabled=TRUE))
```

Si además de los límites de la medición, quisiéramos añadir el punto de valor, el resultado sería éste.

```{r fig.cap="Gráfico de barras error con punto", out.width="80%", fig.asp=.75, fig.align="center", echo=TRUE, warning=FALSE, message=FALSE, comment = NA}
highchart() %>%
  hc_chart(type = "errorbar", polar = FALSE, inverted = FALSE) %>% 
  hc_xAxis(categories = df$name) %>% 
  hc_yAxis(visible = TRUE) %>% 
  hc_tooltip(outside = TRUE, enabled=TRUE) %>% 
  hc_add_series(df,name = "Límites de confianza",showInLegend = FALSE, dataLabels = list(enabled=TRUE)) %>% 
  hc_add_series(df,type = "scatter", name = "Valor",showInLegend = FALSE, dataLabels = list(enabled=TRUE, x=15, y=5))
```

Probando nuevas cosas, hemos movido la etiqueta del valor hacia la derecha `(x=15)` y hacia abajo `(y=5)`. Eso hace que no se solape con el punto señalado en el gráfico.

## Gráficos de transiciones

En nuestro trabajo en mucho casos debemos a veces plantear gráficos en los que se trata de graficar relaciones de objetos con fuente y destino. Aunque nuestro banco de datos es muy simple, hemos creado campos con el nombrede `weight`,  `from` y `to` para que nos permitan hacer este tipo de gráficos que tienen dos versiones diferentes: el diagrama de Sankey y el diagrama de rueda de dependencia. Veamos ambos.

### Diagrama de Sankey

El diagrama de Sankey es un tipo específico de diagrama de flujo, en el que la anchura de las linea de relación entre dos puntos (from y to) se muestra proporcional a la cantidad de flujo transferido (weight, que podría ser frecuencia de emparejamiento).

```{r fig.cap="Gráfico de Sankey", out.width="80%", fig.asp=.75, fig.align="center", echo=TRUE, warning=FALSE, message=FALSE, comment = NA}
highchart() %>%
    hc_chart(type = "sankey", polar = FALSE, inverted = FALSE) %>% 
    hc_xAxis(categories = df$name) %>% 
    hc_yAxis(visible = TRUE) %>% 
    hc_tooltip(outside = TRUE, enabled=TRUE) %>% 
    hc_add_series(df,name = "Nombre de la serie",showInLegend = FALSE, dataLabels = list(enabled=TRUE), colorByPoint=TRUE)
```

De esta forma se muestra que las relaciones más fuertes se producen entre aceituna y pera o entre guava y pera.

### Diagrama de rueda

Otra forma de ver el mismo gráfico, pero en forma circular. Las mismas necesidades de campos `weight`, `from ` y `to`.

```{r fig.cap="Gráfico de rueda", out.width="80%", fig.asp=.75, fig.align="center", echo=TRUE, warning=FALSE, message=FALSE, comment = NA}
highchart() %>%
    hc_chart(type = "dependencywheel", polar = FALSE, inverted = FALSE) %>% 
    hc_xAxis(categories = df$name) %>% 
    hc_yAxis(visible = TRUE) %>% 
    hc_tooltip(outside = TRUE, enabled=TRUE) %>% 
    hc_add_series(df,name = "Nombre de la serie",showInLegend = FALSE, dataLabels = list(enabled=TRUE), colorByPoint=TRUE)
```

### Diagrama _streamgraph_

Un _streamgraph_ es un tipo de gráfico de áreas apiladas. Muestra la evolución de un valor numérico (eje Y) después de otro valor numérico (eje X). Esta evolución está representada por varios grupos, todos con un color distinto. Al contrario que en un área apilada, no hay esquinas: los bordes están redondeados, lo que da esta agradable impresión de flujo. Además, las áreas generalmente se desplazan alrededor de un eje central, lo que da como resultado una forma fluida y orgánica.

Usaremos los valores `y`, `z` y `value` para crear tres series.

```{r fig.cap="Streamgraph", out.width="80%", fig.asp=.75, fig.align="center", echo=TRUE, warning=FALSE, message=FALSE, comment = NA}
highchart() %>%
    hc_chart(type = "streamgraph", polar = FALSE, inverted = FALSE) %>% 
    hc_xAxis(categories = df$name) %>% 
    hc_yAxis(visible = TRUE) %>% 
    hc_tooltip(outside = TRUE, enabled=TRUE) %>% 
    hc_add_series(df$y,name = "y", showInLegend = FALSE, dataLabels = list(enabled=FALSE), color="silver") %>% 
    hc_add_series(df$z,name = "z", showInLegend = FALSE, dataLabels = list(enabled=FALSE), color="teal") %>% 
    hc_add_series(df$value ,name = "value", showInLegend = FALSE, dataLabels = list(enabled=FALSE), color="orange")
```

### Diagrama de redes

Para finalizar como homenaje a mis compañeros en TESI, quiero poner este gráfico muy de moda en la actualidad para representar transiciones, flujos o relaciones más complejas. Como es obvio, recogemos los datos de forma externa (ocultamos el código de carga) y presentamos los mismos en la imagen. El gráfico muestra nuestra relaciones de proyecto y de unidades de negocio de modo interno.


```{r fig.cap="Diagrama network, redes de influencia", out.width="80%", fig.asp=.75, fig.align="center", echo=TRUE, warning=FALSE, message=FALSE, comment = NA}
#edges contiene las relaciones mientras que names contiene los elementos

g <- graph_from_data_frame(edges, directed=TRUE, vertices=names)

hchart(g, layout = layout_with_fr, dataLabels=list(enabled = TRUE, format="{point.name}")) %>%
    hc_title(text="TESI", useHTML=TRUE) %>%
    hc_tooltip(useHTML = TRUE)
```

## Conclusión

Hasta aquí llegamos. Hemos presentado de forma muy breve y simplificada como podemos aprovechar toda la potencia de `highcharts` en nuestros scripts. Lo importante es practicar y practicar. No dejes de leer el [post de Danton Noriega](https://dantonnoriega.github.io/ultinomics.org/posts/2017-04-05-highcharter-explainer.html) acerca de como usar la [API](https://api.highcharts.com) para saber construir los gráficos highchart en R mediante `highcharteR` Del mismo modo, no dejes de acudir al sitio web de [Joshua Kunst](https://jkunst.com/highcharter), creador y mantenedor del paquete junto con otros colaboradores que permiten llevar adelante este excelente proyecto.

<!--chapter:end:08-visualizacion.Rmd-->

# Estilos y formatos de tabla {#tse-formateo}

```{r include = FALSE}
if(!knitr:::is_html_output())
{
  options("width"=56)
  knitr::opts_chunk$set(tidy.opts=list(width.cutoff=56, indent = 2), tidy = TRUE)
  knitr::opts_chunk$set(fig.pos = "H")
}
```

## Introducción

Los paquetes que hemos utilizado en nuestro trabajo con las tablas ya han sido referido en multitud de ocasiones. `expss` nos permite además de obtener el cuadro preciso, operar con las filas y columnas de la tabla, puesto que el objeto creado es como un _dataframe_ especial, ya que su clase de objeto es `etable`. Por tanto, vamos a tener la capacidad de poder operar con las columnas (variable) así como también con las filas (registros de ese _dataframe_).

Existen multitud de paquetes con los que poder interactuar para poder obtener los resultados deseados. Los paquetes `DT` (datatable), `formattable`, y también `kable` y `kableExtra` que son nativos para utilizar junto con `rmarkdown`, lo que conforma un amplio espectro de soluciones. Deberemos buscar aquella que responda a nuestras expectativas y que haga nos sintamos más cómodos. Nuestra elección será `kableExtra`.

Por el lado de las operaciones en la tabla, comenzaremos sentando las bases de como se realizan las operaciones, para luego trabajar la salida aportando estilos y formatos condicionales a las mismas. 

## Operaciones con tablas

Como hemos indicado en la presentación anterior, nuestro primer paso será la realización de operaciones muy simples con las tablas, que seguro en nuestro trabajo estamos acostumbrados a hacer. también vamos a adentramos un poco en la creación de los elementos con los que vamos a trabajar. Ahora ya no trabajaremos sobre lo que ha sido nuestro fichero base, sino que iremos aportando nuestros propios ejemplos que se adecuen a lo que deseamos hacer.

Imaginemos que disponemos datos sobre las cifras de ventas anuales de cinco empresas muy conocidas: Apple, Amazon, Microsoft, Google y Facebook. Estas empresas ofrecen información sobre Ingresos , Beneficio Operativo y Beneficio Neto de cuatro trimestre de 2018 y primer trimestre de 2019 en millones de dólares. Con estos datos creamos un _dataframe_. 


```{r fig.cap="Datos de trabajo", out.width="95%", fig.asp=.75, fig.align="center", echo=TRUE}
data <-
  data.frame(
    emp = c(
      "Apple",
      "Apple",
      "Microsoft",
      "Microsoft",
      "Amazon",
      "Amazon",
      "Google",
      "Google",
      "Facebook",
      "Facebook"
    ),
    ing = c(
      84310,
      91819,
      32471,
      36906,
      72400,
      87400,
      39276,
      46075,
      16914,
      21082
    ),
    bfo = c(23346, 25569, 10258, 13891, 3786, 3879, 8221, 9266, 7820, 8858),
    bfn = c(19965, 22236, 8420, 11649, 3027, 3268, 8948, 10671, 6882, 7349),
    per = c(
      "IV-2018",
      "I-2019",
      "IV-2018",
      "I-2019",
      "IV-2018",
      "I-2019",
      "IV-2018",
      "I-2019",
      "IV-2018",
      "I-2019"
    )
  )
data
```

Ahora vamos a obtener la tabla con la que deseamos trabajar, que sería comparar los ingresos de las cinco compañías en los dos períodos. Para ello creamos una tabla de la siguiente forma.

```{r fig.cap="Tabla con formato estándar de `expss`", out.width="95%", fig.asp=.75, fig.align="center", echo=TRUE}
as.datatable_widget(data %>% 
    tab_cols(per) %>% 
    tab_rows(emp) %>% 
    tab_cells(ing) %>% 
    tab_stat_sum() %>%
    tab_pivot())
```

Este sería el formato estándar de salida, pero como ya hemos visto en anteriores secciones, podemos adaptar esa salida a nuestras necesidades. Nótese que aun no siendo necesario, vamos a guardar la tabla en un output llamado **tab01** que luego vamos a publicar. Utilizamos la función `class()`para mostrarte que tras hacer la tabla, el output almacenado es un `etable` _dataframe_.

```{r fig.cap="Tabla con formato adaptado de `expss`", out.width="95%", fig.asp=.75, fig.align="center", echo=TRUE}
tab01 <- data %>% 
    tab_cols("|"=unvr(per)) %>% 
    tab_rows("|"=unvr(emp)) %>% 
    tab_cells("|"=unvr(ing)) %>% 
    tab_stat_sum(label="|") %>%
    tab_pivot()
class(tab01)
as.datatable_widget(tab01)
```

Podemos ver que esta tabla ya tiene un formato más adecuado a nuestra necesidad. Hemos quitado aquellos textos que en esta ocasión eran innecesarios.

Si convertimos (aunque ya lo es) y mostramos esta tabla como _dataframe_ el resultado sería éste.

```{r fig.cap="Tabla convertida a _dataframe_", out.width="95%", fig.asp=.75, fig.align="center", echo=TRUE}
tab01 <- as.data.frame(tab01)
class(tab01)
tab01
```

Nótese que ahora ya el output no es un objeto de tipo `etable`, solo es _dataframe_. Ya estamos en condiciones de poder operar. Calculemos la diferencia entre los dos trimestres.

```{r fig.cap="Operación de tabla", out.width="95%", fig.asp=.75, fig.align="center", echo=TRUE}
tab01$dif <- tab01[,2]-tab01[,3]
tab01
```

Esta información puede ser presentada en un gráfico tal como veíamos en la sección anterior. Aprovechemos también para cambiar el nombre de las columnas ...

```{r fig.cap="Gráfico del _dataframe_", out.width="95%", fig.asp=.75, fig.align="center", echo=TRUE}
colnames(tab01) <- c('empresa', '2019 (1º)', '2018 (4º)', 'dif')
highchart() %>%
  hc_chart(type = 'column') %>%
  hc_title(text = 'Cifra de negocio de las 5 mayores tecnológicas') %>%
  hc_xAxis(categories = tab01[, 1]) %>%
  hc_yAxis(min = 0, max = 100000) %>%
  hc_add_series(
    data = tab01[, 2],
    name = "IV de 2018",
    dataLabels = list(enabled = TRUE),
    color = "salmon"
  ) %>%
  hc_add_series(
    data = tab01[, 3],
    name = "I de 2019",
    dataLabels = list(enabled = TRUE),
    color = "darksalmon"
  ) %>%
  hc_add_series(
    data = tab01[, 4],
    name = "Diferencia",
    dataLabels = list(enabled = TRUE),
    color = "teal"
  )
```

Añadamos más información a la tabla. Vamos a calcular el porcentaje de incremento. Habrían muchas formas de hacerlo, pero vamos a tratar de hacerlo de la forma más simple.


```{r fig.cap="Operación de tabla", out.width="95%", fig.asp=.75, fig.align="center", echo=TRUE}
tab01$difpct <- round(((tab01[,2]/tab01[,3])-1)*100,1) #cociente entre valores y paso a porcentaje con redondeo a un decimal
tab01
```

Esto nos va a permitir probar algo que no vimos en la sección anterior, presentar en función de otro eje Y la información. Se puede observar que en el script abajo referido, estamos creando en la función `hc_yAxis()` una lista de dos ejes a los que referenciar los datos, mientras que las cifras absolutas se miran con el eje Y de la izquierda, el dato relativo se mira con el eje Y a la derecha del gráfico. El resto de opciones ya fueron analizadas


```{r fig.cap="Gráfico del _dataframe_", out.width="95%", fig.asp=.75, fig.align="center", echo=TRUE}
highchart() %>%
  hc_chart(type = "column") %>%
  hc_title(text = "Cifra de negocio de las 5 mayores tecnológicas") %>%
  hc_xAxis(categories = tab01[, 1]) %>%
  hc_yAxis_multiples(
    list(
      title = list(text = "Millones de dólares"),
      min = 0,
      max = 100000
    ),
    list(
      title = list(text = "Porcentaje"),
      min = 0,
      max = 100,
      opposite = TRUE
    )
  ) %>%
  hc_add_series(
    data = tab01[, 2],
    name = "IV de 2018",
    dataLabels = list(enabled = TRUE),
    color = "salmon"
  ) %>%
  hc_add_series(
    data = tab01[, 3],
    name = "I de 2019",
    dataLabels = list(enabled = TRUE),
    color = "darksalmon"
  ) %>%
  hc_add_series(
    data = tab01[, 4],
    name = "Diferencia",
    dataLabels = list(enabled = TRUE),
    color = "teal"
  ) %>%
  hc_add_series(
    data = tab01[, 5],
    name = "Diferencia porcentual",
    dataLabels = list(enabled = TRUE, format = "{point.y} %"),
    color = "darkblue",
    yAxis = 1
  )
```

## Estilo de las tablas

### Estilo y posición

Vamos ahora a trabajar con la con la tabla y realizaremos algunos cambios sobre ella. Utilizaremos el paquete `kableExtra`. Este paquete permite trabajar con los _dataframe_ para formatear la manera en que se van a mostrar en la pantalla.  Existen multitud de paquetes que nos permitirían hacer cosas semejantes, entre los que podríamos destacar `formattable`, `DT` o `flextable` entre otros. 

Nuestro primer cambio va a ser mostrar de forma diferente nuestra tabla. Con un estilo diferente a lo que ha aprecido hasta ahora. Le vamos a aplicar el estilo típico de **Bootstrap**, conocida librería JS con la que fue desarrollada Twitter. Te recomendamos visitar la viñeta del paquete en este [sitio](https://cran.r-project.org/web/packages/kableExtra/vignettes/awesome_table_in_html.html) si quieres ver todas sus posibilidades.

```{r fig.cap="Tabla básica Kable", out.width="80%", fig.asp=.75, fig.align="center", echo=TRUE, warning=FALSE, message=FALSE, comment = NA}
kbl(tab01) %>%
    kable_styling()
```
Se puede apreciar que el aspecto es diferente al mostrado por las tablas hasta ahora. Este sería el formato más básico de _Bootstrap_. Existen otras opciones entre las que vamos a ir añadiendo algunas características, aplicables a los formatos.

Usando `paper`...

```{r fig.cap="Tabla _kable paper_", out.width="80%", fig.asp=.75, fig.align="center", echo=TRUE, warning=FALSE, message=FALSE, comment = NA}
kbl(tab01) %>%
  kable_paper("hover")
```

Usando `classic`...

```{r fig.cap="Tabla _kable classic_", out.width="80%", fig.asp=.75, fig.align="center", echo=TRUE, warning=FALSE, message=FALSE, comment = NA}
kbl(tab01) %>%
  kable_classic("hover")
```

Usando `minimal`...

```{r fig.cap="Tabla _kable minimal_", out.width="80%", fig.asp=.75, fig.align="center", echo=TRUE, warning=FALSE, message=FALSE, comment = NA}
kbl(tab01) %>%
  kable_minimal("hover")
```

Añadimos además del efecto _hover_ con el ratón, el oscurecimiento o _striped_ de las filas para facilitar la lectura y usabilidad.

```{r fig.cap="Tabla _kable material_", out.width="80%", fig.asp=.75, fig.align="center", echo=TRUE, warning=FALSE, message=FALSE, comment = NA}
kbl(tab01) %>%
  kable_material(c("striped","hover"))
```

Finalizamos de nuevo con el primer formato que será el que mantendremos a partir de este momento.

```{r fig.cap="Tabla _kable bootstrap_", out.width="80%", fig.asp=.75, fig.align="center", echo=TRUE, warning=FALSE, message=FALSE, comment = NA}
kbl(tab01) %>% 
    kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"))
```

Una de las características que en algunos casos puede ser muy valiosa, es la posibilidad de establecer la tabla como flotante a derecha o izquierda del texto.

```{r fig.cap="Tabla _kable bootstrap_ flotante", out.width="80%", fig.asp=.75, fig.align="center", echo=TRUE, warning=FALSE, message=FALSE, comment = NA}
kbl(tab01) %>%
  kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"), full_width = F, position = "float_right")
```
Este texto que estamos escribiendo, se ubicaría a la izquierda de la tabla, ya que hemos indicado que ésta debe ser situada a la derecha como elemento flotante. Al mismo tiempo se le ha incluido la posibilidad de que la tabla no ocupe el 100% del espacio sino que se autoajuste al tamaño de las columna. Este efecto puede ser muy utilizado para incluir comentarios sobre la tabla que estamos publicando. Como es lógico, la tabla puede ser flotante a la derecha o a la izquierda del texto.

Existen otras muchas características que pueden ser aplicadas para conseguir posicionar la tabla de la forma deseada:

* fijar la cabecera
* incluir la tabla en una caja
* aplicar tamaños de fuente
* ... y más.


### Formato específico de fila o columna

Veamos algunas de las posibilidades que nos ofrece `kableExtra`para formatear partes de la tabla. Para ello debemos saber que las columnas se identifican por número secuencial (1 a n) al igual que las filas. Se pueden aplicar formatos tanto a filas como a columnas. Para ilustrar un ejemplo, vamos a utilizar una función de R muy frecuente denominada `ifelse()` que es el equivalente a la función `SI()` de Excel y con una estructura idéntica. Esta función admite la concatenación y sus parámetros son por este orden:

* condición que debe cumplirse
* resultado si verdadero
* resultado si falso

En nuestro caso nuestro resultado es la aplicación de un color verde o rojo según estemos por encima o por debajo de la media de la columna. Del mismo modo, también se puede aplicar como podemos observar un color directo a una columna determinada. Usaremos la función `column_spec()`.

```{r fig.cap="Tabla con elementos formateados (1)", out.width="80%", fig.asp=.75, fig.align="center", echo=TRUE, warning=FALSE, message=FALSE, comment = NA}
kbl(tab01) %>%
  kable_styling(
    bootstrap_options = c("striped", "hover", "condensed", "responsive"),
    full_width = F
  ) %>%
  column_spec(2, color = "teal", bold = TRUE) %>%
  column_spec(
    5,
    color = "white",
    background = ifelse(tab01$difpct > mean(tab01$difpct), "green", "salmon"),
    popover = paste(tab01[, 1])
  )
```

Otra posibilidad es la de poder marcar celdas cell_spec() o filas con `row_spec()`en particular ...

```{r fig.cap="Tabla con elementos formateados (2)", out.width="80%", fig.asp=.75, fig.align="center", echo=TRUE, warning=FALSE, message=FALSE, comment = NA}
kbl(tab01) %>%
  kable_styling(
    bootstrap_options = c("striped", "hover", "condensed", "responsive"),
    full_width = F
  ) %>%
  row_spec(3:5,
           bold = T,
           color = "white",
           background = "teal")
```

Un caso particular para la fila 0, la de encabezado.

```{r fig.cap="Tabla con elementos formateados (3)", out.width="80%", fig.asp=.75, fig.align="center", echo=TRUE, warning=FALSE, message=FALSE, comment = NA}

kbl(tab01) %>%
  kable_styling(c("striped", "hovered"), full_width = F) %>%
  row_spec(
    0,
    angle = -20,
    align = "left",
    background = "teal",
    color = "white",
    bold = TRUE
  ) %>%
  row_spec(1:5, align = "center", background = "lightsalmon")

```

## Adición de imágenes y de otros elementos

Ya para finalizar, es muy habitual querer utilizar imágenes para ilustrar la tabla, darle un aspecto más impactante. Vemos como hacerlo. Esta imagen puede sustituir el contenido completo de la columna o añadirse al final de la misma. En nuestro ejemplo queremos sustituir, por lo que nuestra primera instrucción _limpia_ la columna de tab01 denominada empresa. Posteriormente se crea un vector con las cinco imágenes que aprovecharemos en la columna 1. Para no perder nuestra tabla original, hacemos un copia de la misma en tab02.


```{r fig.cap="Tabla con elementos de imagen", out.width="80%", fig.asp=.75, fig.align="center", echo=TRUE, warning=FALSE, message=FALSE, comment = NA}

tab02 <- tab01
tab02$empresa <- ""
vector.img <-
  c(
    "https://download.tesigandia.com/test/20201112113121.png",
    "https://download.tesigandia.com/test/20201112112927.png",
    "https://download.tesigandia.com/test/20201112113240.png",
    "https://download.tesigandia.com/test/20201112113259.png",
    "https://download.tesigandia.com/test/20201112113048.png"
  )
kbl(tab02) %>%
  kable_styling(bootstrap_options = c("hover"),
                full_width = FALSE) %>%
  column_spec(1, image = vector.img) %>%
  column_spec(2, color = "teal", bold = TRUE) %>%
  column_spec(5,
              color = "white",
              background = ifelse(tab02$difpct > mean(tab02$difpct), "green", "salmon"))
```

### Adición de iconos de FontAwesome

En la siguiente tabla, vamos a añadir las marcas de icono llamadas [`fontawesome`](https://fontawesome.com/v4.7.0/icons/) que permite reproducir en modo texto los iconos más típicos. En nuestro caso y siguiendo el uso de la función `ifelse` que hemos visto antes, añadiremos una flecha arriba verde si la media de la cifra de negocio es mayor que la media o una flecha abajo roja si es menor.

```{r fig.cap="Tabla con elementos de imagen y _fontawesome_", out.width="80%", fig.asp=.75, fig.align="center", echo=TRUE, warning=FALSE, message=FALSE, comment = NA}

tab02 <- tab01
tab02[, 2] <-
  ifelse(tab02[, 2] > mean(tab02[, 2]), paste(tab02[, 2], fa("arrow-circle-up", fill =
                                                               "green")), paste(tab02[, 2], fa("arrow-circle-down", fill = "red")))
kbl(tab02, escape = FALSE) %>%
  kable_styling(
    bootstrap_options = c("striped", "hover", "condensed", "responsive"),
    full_width = F
  ) %>%
  column_spec(2, color = "teal", bold = TRUE) %>%
  column_spec(
    5,
    color = "white",
    background = ifelse(tab02$difpct > mean(tab01$difpct), "green", "salmon"),
    popover = paste(tab02[, 1])
  )
```

### Adición de gráficos de tipo sparkline

Dado que no tenemos datos para poder representar, vamos a suponer una serie de datos para cada empresa y vamos a hacer un gráfico de líneas de tipo `sparkline`, que vamos a integra como una columna más de nuestra tabla. `sparkline` es un paquete de R que utiliza la librería `jquery sparklines` para presentar gráficos minimalistas y ser integrados en nuestros __dataframe__, y por tanto, publicados en tablas.

En primer lugar creamos la serie de datos para cada empresa y lo vamos a hacer usando la función `sample()` que nos aportará 15 valores aleatorios entre 1 y 100 con posibilidad de repetición. Esta es una fórmula muy sencilla que se utiliza mucho en R para crear datos de test.

```{r fig.cap="Tabla con elementos de imagen y _sparkline_", out.width="80%", fig.asp=.75, fig.align="center", echo=TRUE, warning=FALSE, message=FALSE, comment = NA}

sparkline(0) #inicializamos la función sparkline
amz <- sample(1:100, 15, replace = TRUE)
app <- sample(1:100, 15, replace = TRUE)
fac <- sample(1:100, 15, replace = TRUE)
goo <- sample(1:100, 15, replace = TRUE)
mic <- sample(1:100, 15, replace = TRUE)
df <-
  data.frame(amz, app, fac, goo, mic) # los unimos para mostrarlos en forma de tabla, aunque no sería necesario.
df
```

Una vez tenemos esto Lo hemos juntado en un _dataframe_ para que se vea mejor, vamos a añadir una nueva columna a nuestra tabla, con la información del gráfico.

```{r fig.cap="Tabla formateada total", out.width="80%", fig.asp=.75, fig.align="center", echo=TRUE, warning=FALSE, message=FALSE, comment = NA}

tab03 <- tab01
tab03$sparkline = c(spk_chr(amz),
                    spk_chr(app),
                    spk_chr(fac),
                    spk_chr(goo),
                    spk_chr(mic))
kbl(tab03, escape = F) %>%
  kable_styling(full_width = TRUE)
```

La última columna de la tabla muestra los gráficos obtenidos. Nótese que los datos de la última columna han sido calculados con una fuente de datos diferente, por lo que esta tabla está presentando inputs obtenidos de dos fuentes. Por una lado nuestra vieja tabla y por otro lado la nueva información que le incorporamos. 

Y finalmente, mostramos casi todo lo que hemos hecho junto, no son cosas separadas.

```{r fig.cap="Tabla total con elementos de imagen", out.width="80%", fig.asp=.75, fig.align="center", echo=TRUE, warning=FALSE, message=FALSE, comment = NA}

tab02 <- tab03
tab02[, 2] <-
  ifelse(tab02[, 2] > mean(tab02[, 2]), paste(tab02[, 2], fa("arrow-circle-up", fill =
                                                               "green")), paste(tab02[, 2], fa("arrow-circle-down", fill = "red")))
kbl(tab02, escape = FALSE) %>%
  kable_styling(
    bootstrap_options = c("striped", "hover", "condensed", "responsive"),
    full_width = F
  ) %>%
  column_spec(2, color = "teal", bold = TRUE) %>%
  column_spec(5,
              color = "white",
              background = ifelse(tab02$difpct > mean(tab01$difpct), "green", "salmon"))
```

Si deseas consultar más información sobre la librería `jQuery Sparklines` accede al [enlace](https://omnipotent.net/jquery.sparkline/#s-about). Enlace antiguo, pero con muchísima utilidad.

<!--chapter:end:09-formateo.Rmd-->

# Condiciones {#tse09}

```{r include = FALSE}
if(!knitr:::is_html_output())
{
  options("width"=56)
  knitr::opts_chunk$set(tidy.opts=list(width.cutoff=56, indent = 2), tidy = TRUE)
  knitr::opts_chunk$set(fig.pos = "H")
}
```

Los operadores son los símbolos que le indican a R que debe realizar una tarea. Combinando datos y operadores es que logramos que R haga su trabajo.

Existen operadores específicos para cada tipo de tarea. Los tipos de operadores principales son los siguientes:

* Aritméticos
* Relacionales
* Lógicos
* De asignación

Familiarizarnos con los operadores nos permitirá manipular y transformar datos de distintos tipos.

## Operadores aritméticos

Como su nombre lo indica, este tipo de operador es usado para operaciones aritméticas. En R tenemos los siguientes operadores aritméticos:

|Operador|Operación|Ejemplo|Resultado|
|-|-|-|-|
|+|Suma|5 + 3|8|
|-|Resta|5 - 3|2|
|*|Multiplicación|5 * 3|18|
|/|División|5 /3|1.666667|
|^|Potencia|5 ^ 3|125|
|%%|División entera|5 %% 3|2|

## Operadores relacionales

|Operador|Comparación|Ejemplo|Resultado|
|-|-|-|-|
|<|Menor que|5 < 3|FALSE|
|<=|Menor o igual que|5 <= 3|FALSE|
|>|Mayor que|5 > 3|TRUE|
|>=|Mayor o igual que|5 >= 3|TRUE|
|==|Exactamente igual que|5 == 3|FALSE|
|!=|No es igual que|5 != 3|TRUE|

## Operadores lógicos

Los operadores lógicos son usados para operaciones de álgebra Booleana, es decir, para describir relaciones lógicas, expresadas como verdadero (TRUE) o falso (FALSO).

|Operador|Comparación|Ejemplo|Resultado|
|-|-|-|-|
|x | y|x Ó y es verdadero|TRUE | FALSE|TRUE|
|x & y|x Y y son verdaderos|TRUE & FALSE|FALSE|
|!x|x no es verdadero (negación)|!TRUE|FALSE|
|isTRUE(x)|x es verdadero (afirmación)|isTRUE(TRUE)|TRUE|

Los operadores | y & siguen estas reglas:

* | devuelve TRUE si alguno de los datos es TRUE
* & solo devuelve TRUE si ambos datos es TRUE
* | solo devuelve FALSE si ambos datos son FALSE
* & devuelve FALSE si alguno de los datos es FALSE

Estos operadores pueden ser usados con estos con datos de tipo numérico, lógico y complejo. Al igual que con los operadores relacionales, los operadores lógicos siempre devuelven TRUE o FALSE.

## Operadores de asignación

|Operador|Operación|
|-|-|
|<-|Asigna un valor a una variable|
|=|	Asigna un valor a una variable|

Aunque podemos usar el signo igual para una asignación, a lo largo de este libro utilizaremos <-, por ser característico de R y fácil de reconocer visualmente.

Después de realizar la operación de asignación, podemos usar el nombre de la variable para realizar operaciones con ella, como si fuera del tipo de datos que le hemos asignado. Si asignamos un valor a una variable a la que ya habíamos asignado datos, nuestra variable conserva el valor más reciente. Además, esta operación nos permite “guardar” el resultado de operaciones, de modo que podemos recuperarlos sin necesidad de realizar las operaciones otra vez. 

<!--chapter:end:10-condiciones.Rmd-->

`r if (knitr::is_html_output()) "
# Bibliografía {-}
"`

```{r include = FALSE}
if(!knitr:::is_html_output())
{
  options("width"=56)
  knitr::opts_chunk$set(tidy.opts=list(width.cutoff=56, indent = 2), tidy = TRUE)
  knitr::opts_chunk$set(fig.pos = "H")
}
```


<!--chapter:end:11-referencias.Rmd-->

